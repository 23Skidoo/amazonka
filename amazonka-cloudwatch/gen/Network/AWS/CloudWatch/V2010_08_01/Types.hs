{-# LANGUAGE DeriveDataTypeable          #-}
{-# LANGUAGE DeriveGeneric               #-}
{-# LANGUAGE FlexibleInstances           #-}
{-# LANGUAGE OverloadedStrings           #-}
{-# LANGUAGE StandaloneDeriving          #-}
{-# LANGUAGE TypeFamilies                #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Module      : Network.AWS.CloudWatch.V2010_08_01.Types
-- Copyright   : (c) 2013-2014 Brendan Hay <brendan.g.hay@gmail.com>
-- License     : This Source Code Form is subject to the terms of
--               the Mozilla Public License, v. 2.0.
--               A copy of the MPL can be found in the LICENSE file or
--               you can obtain it at http://mozilla.org/MPL/2.0/.
-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>
-- Stability   : experimental
-- Portability : non-portable (GHC extensions)

-- | Amazon CloudWatch is a monitoring service for AWS cloud resources and the
-- applications you run on AWS. You can use Amazon CloudWatch to collect and
-- track metrics, collect and monitor log files, and set alarms. Amazon
-- CloudWatch can monitor AWS resources such as Amazon EC2 instances, Amazon
-- DynamoDB tables, and Amazon RDS DB instances, as well as custom metrics
-- generated by your applications and services, and any log files your
-- applications generate. You can use Amazon CloudWatch to gain system-wide
-- visibility into resource utilization, application performance, and
-- operational health. You can use these insights to react and keep your
-- application running smoothly.
module Network.AWS.CloudWatch.V2010_08_01.Types
    (
    -- * Service
      CloudWatch
    -- ** Errors
    , Er (..)
    -- ** XML
    , xmlOptions

    -- * ComparisonOperator
    , ComparisonOperator (..)

    -- * HistoryItemType
    , HistoryItemType (..)

    -- * StandardUnit
    , StandardUnit (..)

    -- * StateValue
    , StateValue (..)

    -- * Statistic
    , Statistic (..)

    -- * AlarmHistoryItem
    , AlarmHistoryItem (..)
    , ahjAlarmName
    , ahjTimestamp
    , ahjHistoryItemType
    , ahjHistorySummary
    , ahjHistoryData

    -- * Datapoint
    , Datapoint (..)
    , mTimestamp
    , mSampleCount
    , mAverage
    , mSum
    , mMinimum
    , mMaximum
    , mUnit

    -- * Dimension
    , Dimension (..)
    , eName
    , eValue

    -- * DimensionFilter
    , DimensionFilter (..)
    , dgName
    , dgValue

    -- * Metric
    , Metric (..)
    , meNamespace
    , meMetricName
    , meDimensions

    -- * MetricAlarm
    , MetricAlarm (..)
    , mbAlarmName
    , mbAlarmArn
    , mbAlarmDescription
    , mbAlarmConfigurationUpdatedTimestamp
    , mbActionsEnabled
    , mbOKActions
    , mbAlarmActions
    , mbInsufficientDataActions
    , mbStateValue
    , mbStateReason
    , mbStateReasonData
    , mbStateUpdatedTimestamp
    , mbMetricName
    , mbNamespace
    , mbStatistic
    , mbDimensions
    , mbPeriod
    , mbUnit
    , mbEvaluationPeriods
    , mbThreshold
    , mbComparisonOperator

    -- * MetricDatum
    , MetricDatum (..)
    , mgMetricName
    , mgDimensions
    , mgTimestamp
    , mgValue
    , mgStatisticValues
    , mgUnit

    -- * StatisticSet
    , StatisticSet (..)
    , sswSampleCount
    , sswSum
    , sswMinimum
    , sswMaximum

    ) where

import Network.AWS.Prelude
import Network.AWS.Signing.V4

-- | Supported version (@2010-08-01@) of the
-- @Amazon CloudWatch@ service.
data CloudWatch deriving (Typeable)

instance AWSService CloudWatch where
    type Sg CloudWatch = V4
    data Er CloudWatch
        = CloudWatchClient HttpException
        | CloudWatchSerializer String
        | CloudWatchService String
        | InternalServiceFault
            { _isfMessage :: Maybe Text
            }
        | InvalidFormatFault
            { _iffMessage :: Maybe Text
            }
        | InvalidNextToken
            { _intMessage :: Maybe Text
            }
        | InvalidParameterCombinationException
            { _ipceMessage :: Maybe Text
            }
        | InvalidParameterValueException
            { _ipveMessage :: Maybe Text
            }
        | LimitExceededFault
            { _lefMessage :: Maybe Text
            }
        | MissingRequiredParameterException
            { _mrpeMessage :: Maybe Text
            }
        | ResourceNotFound
            { _rnfMessage :: Maybe Text
            }

    service = Service'
        { _svcEndpoint = Regional
        , _svcPrefix   = "monitoring"
        , _svcVersion  = "2010-08-01"
        , _svcTarget   = Nothing
        }

deriving instance Show    (Er CloudWatch)
deriving instance Generic (Er CloudWatch)

instance AWSError (Er CloudWatch) where
    awsError = const "CloudWatchError"

instance AWSServiceError (Er CloudWatch) where
    serviceError    = CloudWatchService
    clientError     = CloudWatchClient
    serializerError = CloudWatchSerializer

instance Exception (Er CloudWatch)

xmlOptions :: Tagged a XMLOptions
xmlOptions = Tagged def
    { xmlNamespace = Just "http://monitoring.amazonaws.com/doc/2010-08-01/"
    }

-- | The arithmetic operation to use when comparing the specified Statistic and
-- Threshold. The specified Statistic value is used as the first operand.
data ComparisonOperator
    = ComparisonOperatorGreaterThanOrEqualToThreshold -- ^ GreaterThanOrEqualToThreshold
    | ComparisonOperatorGreaterThanThreshold -- ^ GreaterThanThreshold
    | ComparisonOperatorLessThanOrEqualToThreshold -- ^ LessThanOrEqualToThreshold
    | ComparisonOperatorLessThanThreshold -- ^ LessThanThreshold
      deriving (Eq, Show, Generic)

instance Hashable ComparisonOperator

instance FromText ComparisonOperator where
    parser = match "GreaterThanOrEqualToThreshold" ComparisonOperatorGreaterThanOrEqualToThreshold
         <|> match "GreaterThanThreshold" ComparisonOperatorGreaterThanThreshold
         <|> match "LessThanOrEqualToThreshold" ComparisonOperatorLessThanOrEqualToThreshold
         <|> match "LessThanThreshold" ComparisonOperatorLessThanThreshold

instance ToText ComparisonOperator where
    toText ComparisonOperatorGreaterThanOrEqualToThreshold = "GreaterThanOrEqualToThreshold"
    toText ComparisonOperatorGreaterThanThreshold = "GreaterThanThreshold"
    toText ComparisonOperatorLessThanOrEqualToThreshold = "LessThanOrEqualToThreshold"
    toText ComparisonOperatorLessThanThreshold = "LessThanThreshold"

instance ToByteString ComparisonOperator

instance FromXML ComparisonOperator where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "ComparisonOperator"

instance ToQuery ComparisonOperator where
    toQuery = genericQuery def

-- | The type of alarm histories to retrieve.
data HistoryItemType
    = HistoryItemTypeAction -- ^ Action
    | HistoryItemTypeConfigurationUpdate -- ^ ConfigurationUpdate
    | HistoryItemTypeStateUpdate -- ^ StateUpdate
      deriving (Eq, Show, Generic)

instance Hashable HistoryItemType

instance FromText HistoryItemType where
    parser = match "Action" HistoryItemTypeAction
         <|> match "ConfigurationUpdate" HistoryItemTypeConfigurationUpdate
         <|> match "StateUpdate" HistoryItemTypeStateUpdate

instance ToText HistoryItemType where
    toText HistoryItemTypeAction = "Action"
    toText HistoryItemTypeConfigurationUpdate = "ConfigurationUpdate"
    toText HistoryItemTypeStateUpdate = "StateUpdate"

instance ToByteString HistoryItemType

instance FromXML HistoryItemType where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "HistoryItemType"

instance ToQuery HistoryItemType where
    toQuery = genericQuery def

-- | The unit of the alarm's associated metric.
data StandardUnit
    = StandardUnitBits -- ^ Bits
    | StandardUnitBitsSecond -- ^ Bits/Second
    | StandardUnitBytes -- ^ Bytes
    | StandardUnitBytesSecond -- ^ Bytes/Second
    | StandardUnitCount -- ^ Count
    | StandardUnitCountSecond -- ^ Count/Second
    | StandardUnitGigabits -- ^ Gigabits
    | StandardUnitGigabitsSecond -- ^ Gigabits/Second
    | StandardUnitGigabytes -- ^ Gigabytes
    | StandardUnitGigabytesSecond -- ^ Gigabytes/Second
    | StandardUnitKilobits -- ^ Kilobits
    | StandardUnitKilobitsSecond -- ^ Kilobits/Second
    | StandardUnitKilobytes -- ^ Kilobytes
    | StandardUnitKilobytesSecond -- ^ Kilobytes/Second
    | StandardUnitMegabits -- ^ Megabits
    | StandardUnitMegabitsSecond -- ^ Megabits/Second
    | StandardUnitMegabytes -- ^ Megabytes
    | StandardUnitMegabytesSecond -- ^ Megabytes/Second
    | StandardUnitMicroseconds -- ^ Microseconds
    | StandardUnitMilliseconds -- ^ Milliseconds
    | StandardUnitNone -- ^ None
    | StandardUnitPercent -- ^ Percent
    | StandardUnitSeconds -- ^ Seconds
    | StandardUnitTerabits -- ^ Terabits
    | StandardUnitTerabitsSecond -- ^ Terabits/Second
    | StandardUnitTerabytes -- ^ Terabytes
    | StandardUnitTerabytesSecond -- ^ Terabytes/Second
      deriving (Eq, Show, Generic)

instance Hashable StandardUnit

instance FromText StandardUnit where
    parser = match "Bits" StandardUnitBits
         <|> match "Bits/Second" StandardUnitBitsSecond
         <|> match "Bytes" StandardUnitBytes
         <|> match "Bytes/Second" StandardUnitBytesSecond
         <|> match "Count" StandardUnitCount
         <|> match "Count/Second" StandardUnitCountSecond
         <|> match "Gigabits" StandardUnitGigabits
         <|> match "Gigabits/Second" StandardUnitGigabitsSecond
         <|> match "Gigabytes" StandardUnitGigabytes
         <|> match "Gigabytes/Second" StandardUnitGigabytesSecond
         <|> match "Kilobits" StandardUnitKilobits
         <|> match "Kilobits/Second" StandardUnitKilobitsSecond
         <|> match "Kilobytes" StandardUnitKilobytes
         <|> match "Kilobytes/Second" StandardUnitKilobytesSecond
         <|> match "Megabits" StandardUnitMegabits
         <|> match "Megabits/Second" StandardUnitMegabitsSecond
         <|> match "Megabytes" StandardUnitMegabytes
         <|> match "Megabytes/Second" StandardUnitMegabytesSecond
         <|> match "Microseconds" StandardUnitMicroseconds
         <|> match "Milliseconds" StandardUnitMilliseconds
         <|> match "None" StandardUnitNone
         <|> match "Percent" StandardUnitPercent
         <|> match "Seconds" StandardUnitSeconds
         <|> match "Terabits" StandardUnitTerabits
         <|> match "Terabits/Second" StandardUnitTerabitsSecond
         <|> match "Terabytes" StandardUnitTerabytes
         <|> match "Terabytes/Second" StandardUnitTerabytesSecond

instance ToText StandardUnit where
    toText StandardUnitBits = "Bits"
    toText StandardUnitBitsSecond = "Bits/Second"
    toText StandardUnitBytes = "Bytes"
    toText StandardUnitBytesSecond = "Bytes/Second"
    toText StandardUnitCount = "Count"
    toText StandardUnitCountSecond = "Count/Second"
    toText StandardUnitGigabits = "Gigabits"
    toText StandardUnitGigabitsSecond = "Gigabits/Second"
    toText StandardUnitGigabytes = "Gigabytes"
    toText StandardUnitGigabytesSecond = "Gigabytes/Second"
    toText StandardUnitKilobits = "Kilobits"
    toText StandardUnitKilobitsSecond = "Kilobits/Second"
    toText StandardUnitKilobytes = "Kilobytes"
    toText StandardUnitKilobytesSecond = "Kilobytes/Second"
    toText StandardUnitMegabits = "Megabits"
    toText StandardUnitMegabitsSecond = "Megabits/Second"
    toText StandardUnitMegabytes = "Megabytes"
    toText StandardUnitMegabytesSecond = "Megabytes/Second"
    toText StandardUnitMicroseconds = "Microseconds"
    toText StandardUnitMilliseconds = "Milliseconds"
    toText StandardUnitNone = "None"
    toText StandardUnitPercent = "Percent"
    toText StandardUnitSeconds = "Seconds"
    toText StandardUnitTerabits = "Terabits"
    toText StandardUnitTerabitsSecond = "Terabits/Second"
    toText StandardUnitTerabytes = "Terabytes"
    toText StandardUnitTerabytesSecond = "Terabytes/Second"

instance ToByteString StandardUnit

instance FromXML StandardUnit where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "StandardUnit"

instance ToQuery StandardUnit where
    toQuery = genericQuery def

-- | The state value to be used in matching alarms.
data StateValue
    = StateValueAlarm -- ^ ALARM
    | StateValueInsufficientData -- ^ INSUFFICIENT_DATA
    | StateValueOk -- ^ OK
      deriving (Eq, Show, Generic)

instance Hashable StateValue

instance FromText StateValue where
    parser = match "ALARM" StateValueAlarm
         <|> match "INSUFFICIENT_DATA" StateValueInsufficientData
         <|> match "OK" StateValueOk

instance ToText StateValue where
    toText StateValueAlarm = "ALARM"
    toText StateValueInsufficientData = "INSUFFICIENT_DATA"
    toText StateValueOk = "OK"

instance ToByteString StateValue

instance FromXML StateValue where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "StateValue"

instance ToQuery StateValue where
    toQuery = genericQuery def

-- | The statistic to apply to the alarm's associated metric.
data Statistic
    = StatisticAverage -- ^ Average
    | StatisticMaximum -- ^ Maximum
    | StatisticMinimum -- ^ Minimum
    | StatisticSampleCount -- ^ SampleCount
    | StatisticSum -- ^ Sum
      deriving (Eq, Show, Generic)

instance Hashable Statistic

instance FromText Statistic where
    parser = match "Average" StatisticAverage
         <|> match "Maximum" StatisticMaximum
         <|> match "Minimum" StatisticMinimum
         <|> match "SampleCount" StatisticSampleCount
         <|> match "Sum" StatisticSum

instance ToText Statistic where
    toText StatisticAverage = "Average"
    toText StatisticMaximum = "Maximum"
    toText StatisticMinimum = "Minimum"
    toText StatisticSampleCount = "SampleCount"
    toText StatisticSum = "Sum"

instance ToByteString Statistic

instance FromXML Statistic where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "Statistic"

instance ToQuery Statistic where
    toQuery = genericQuery def

-- | The AlarmHistoryItem data type contains descriptive information about the
-- history of a specific alarm. If you call DescribeAlarmHistory, Amazon
-- CloudWatch returns this data type as part of the DescribeAlarmHistoryResult
-- data type.
data AlarmHistoryItem = AlarmHistoryItem
    { _ahjAlarmName :: Maybe Text
      -- ^ The descriptive name for the alarm.
    , _ahjTimestamp :: Maybe ISO8601
      -- ^ The time stamp for the alarm history item.
    , _ahjHistoryItemType :: Maybe HistoryItemType
      -- ^ The type of alarm history item.
    , _ahjHistorySummary :: Maybe Text
      -- ^ A human-readable summary of the alarm history.
    , _ahjHistoryData :: Maybe Text
      -- ^ Machine-readable data about the alarm in JSON format.
    } deriving (Show, Generic)

-- | The descriptive name for the alarm.
ahjAlarmName :: Lens' AlarmHistoryItem (Maybe Text)
ahjAlarmName f x =
    f (_ahjAlarmName x)
        <&> \y -> x { _ahjAlarmName = y }
{-# INLINE ahjAlarmName #-}

-- | The time stamp for the alarm history item.
ahjTimestamp :: Lens' AlarmHistoryItem (Maybe ISO8601)
ahjTimestamp f x =
    f (_ahjTimestamp x)
        <&> \y -> x { _ahjTimestamp = y }
{-# INLINE ahjTimestamp #-}

-- | The type of alarm history item.
ahjHistoryItemType :: Lens' AlarmHistoryItem (Maybe HistoryItemType)
ahjHistoryItemType f x =
    f (_ahjHistoryItemType x)
        <&> \y -> x { _ahjHistoryItemType = y }
{-# INLINE ahjHistoryItemType #-}

-- | A human-readable summary of the alarm history.
ahjHistorySummary :: Lens' AlarmHistoryItem (Maybe Text)
ahjHistorySummary f x =
    f (_ahjHistorySummary x)
        <&> \y -> x { _ahjHistorySummary = y }
{-# INLINE ahjHistorySummary #-}

-- | Machine-readable data about the alarm in JSON format.
ahjHistoryData :: Lens' AlarmHistoryItem (Maybe Text)
ahjHistoryData f x =
    f (_ahjHistoryData x)
        <&> \y -> x { _ahjHistoryData = y }
{-# INLINE ahjHistoryData #-}

instance FromXML AlarmHistoryItem where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "AlarmHistoryItem"

-- | The Datapoint data type encapsulates the statistical data that Amazon
-- CloudWatch computes from metric data.
data Datapoint = Datapoint
    { _mTimestamp :: Maybe ISO8601
      -- ^ The time stamp used for the datapoint.
    , _mSampleCount :: Maybe Double
      -- ^ The number of metric values that contributed to the aggregate
      -- value of this datapoint.
    , _mAverage :: Maybe Double
      -- ^ The average of metric values that correspond to the datapoint.
    , _mSum :: Maybe Double
      -- ^ The sum of metric values used for the datapoint.
    , _mMinimum :: Maybe Double
      -- ^ The minimum metric value used for the datapoint.
    , _mMaximum :: Maybe Double
      -- ^ The maximum of the metric value used for the datapoint.
    , _mUnit :: Maybe StandardUnit
      -- ^ The standard unit used for the datapoint.
    } deriving (Show, Generic)

-- | The time stamp used for the datapoint.
mTimestamp :: Lens' Datapoint (Maybe ISO8601)
mTimestamp f x =
    f (_mTimestamp x)
        <&> \y -> x { _mTimestamp = y }
{-# INLINE mTimestamp #-}

-- | The number of metric values that contributed to the aggregate value of this
-- datapoint.
mSampleCount :: Lens' Datapoint (Maybe Double)
mSampleCount f x =
    f (_mSampleCount x)
        <&> \y -> x { _mSampleCount = y }
{-# INLINE mSampleCount #-}

-- | The average of metric values that correspond to the datapoint.
mAverage :: Lens' Datapoint (Maybe Double)
mAverage f x =
    f (_mAverage x)
        <&> \y -> x { _mAverage = y }
{-# INLINE mAverage #-}

-- | The sum of metric values used for the datapoint.
mSum :: Lens' Datapoint (Maybe Double)
mSum f x =
    f (_mSum x)
        <&> \y -> x { _mSum = y }
{-# INLINE mSum #-}

-- | The minimum metric value used for the datapoint.
mMinimum :: Lens' Datapoint (Maybe Double)
mMinimum f x =
    f (_mMinimum x)
        <&> \y -> x { _mMinimum = y }
{-# INLINE mMinimum #-}

-- | The maximum of the metric value used for the datapoint.
mMaximum :: Lens' Datapoint (Maybe Double)
mMaximum f x =
    f (_mMaximum x)
        <&> \y -> x { _mMaximum = y }
{-# INLINE mMaximum #-}

-- | The standard unit used for the datapoint.
mUnit :: Lens' Datapoint (Maybe StandardUnit)
mUnit f x =
    f (_mUnit x)
        <&> \y -> x { _mUnit = y }
{-# INLINE mUnit #-}

instance FromXML Datapoint where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "Datapoint"

-- | The Dimension data type further expands on the identity of a metric using a
-- Name, Value pair.
data Dimension = Dimension
    { _eName :: Text
      -- ^ The name of the dimension.
    , _eValue :: Text
      -- ^ The value representing the dimension measurement.
    } deriving (Show, Generic)

-- | The name of the dimension.
eName :: Lens' Dimension (Text)
eName f x =
    f (_eName x)
        <&> \y -> x { _eName = y }
{-# INLINE eName #-}

-- | The value representing the dimension measurement.
eValue :: Lens' Dimension (Text)
eValue f x =
    f (_eValue x)
        <&> \y -> x { _eValue = y }
{-# INLINE eValue #-}

instance FromXML Dimension where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "Dimension"

instance ToQuery Dimension where
    toQuery = genericQuery def

-- | The DimensionFilter data type is used to filter ListMetrics results.
data DimensionFilter = DimensionFilter
    { _dgName :: Text
      -- ^ The dimension name to be matched.
    , _dgValue :: Maybe Text
      -- ^ The value of the dimension to be matched. Specifying a Name
      -- without specifying a Value returns all values associated with
      -- that Name.
    } deriving (Show, Generic)

-- | The dimension name to be matched.
dgName :: Lens' DimensionFilter (Text)
dgName f x =
    f (_dgName x)
        <&> \y -> x { _dgName = y }
{-# INLINE dgName #-}

-- | The value of the dimension to be matched. Specifying a Name without
-- specifying a Value returns all values associated with that Name.
dgValue :: Lens' DimensionFilter (Maybe Text)
dgValue f x =
    f (_dgValue x)
        <&> \y -> x { _dgValue = y }
{-# INLINE dgValue #-}

instance ToQuery DimensionFilter where
    toQuery = genericQuery def

-- | The Metric data type contains information about a specific metric. If you
-- call ListMetrics, Amazon CloudWatch returns information contained by this
-- data type.
data Metric = Metric
    { _meNamespace :: Maybe Text
      -- ^ The namespace of the metric.
    , _meMetricName :: Maybe Text
      -- ^ The name of the metric.
    , _meDimensions :: [Dimension]
      -- ^ A list of dimensions associated with the metric.
    } deriving (Show, Generic)

-- | The namespace of the metric.
meNamespace :: Lens' Metric (Maybe Text)
meNamespace f x =
    f (_meNamespace x)
        <&> \y -> x { _meNamespace = y }
{-# INLINE meNamespace #-}

-- | The name of the metric.
meMetricName :: Lens' Metric (Maybe Text)
meMetricName f x =
    f (_meMetricName x)
        <&> \y -> x { _meMetricName = y }
{-# INLINE meMetricName #-}

-- | A list of dimensions associated with the metric.
meDimensions :: Lens' Metric ([Dimension])
meDimensions f x =
    f (_meDimensions x)
        <&> \y -> x { _meDimensions = y }
{-# INLINE meDimensions #-}

instance FromXML Metric where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "Metric"

-- | The MetricAlarm data type represents an alarm. You can use PutMetricAlarm
-- to create or update an alarm.
data MetricAlarm = MetricAlarm
    { _mbAlarmName :: Maybe Text
      -- ^ The name of the alarm.
    , _mbAlarmArn :: Maybe Text
      -- ^ The Amazon Resource Name (ARN) of the alarm.
    , _mbAlarmDescription :: Maybe Text
      -- ^ The description for the alarm.
    , _mbAlarmConfigurationUpdatedTimestamp :: Maybe ISO8601
      -- ^ The time stamp of the last update to the alarm configuration.
    , _mbActionsEnabled :: Maybe Bool
      -- ^ Indicates whether actions should be executed during any changes
      -- to the alarm's state.
    , _mbOKActions :: [Text]
      -- ^ The list of actions to execute when this alarm transitions into
      -- an OK state from any other state. Each action is specified as an
      -- Amazon Resource Number (ARN). Currently the only actions
      -- supported are publishing to an Amazon SNS topic and triggering an
      -- Auto Scaling policy.
    , _mbAlarmActions :: [Text]
      -- ^ The list of actions to execute when this alarm transitions into
      -- an ALARM state from any other state. Each action is specified as
      -- an Amazon Resource Number (ARN). Currently the only actions
      -- supported are publishing to an Amazon SNS topic and triggering an
      -- Auto Scaling policy.
    , _mbInsufficientDataActions :: [Text]
      -- ^ The list of actions to execute when this alarm transitions into
      -- an INSUFFICIENT_DATA state from any other state. Each action is
      -- specified as an Amazon Resource Number (ARN). Currently the only
      -- actions supported are publishing to an Amazon SNS topic or
      -- triggering an Auto Scaling policy.
    , _mbStateValue :: Maybe StateValue
      -- ^ The state value for the alarm.
    , _mbStateReason :: Maybe Text
      -- ^ A human-readable explanation for the alarm's state.
    , _mbStateReasonData :: Maybe Text
      -- ^ An explanation for the alarm's state in machine-readable JSON
      -- format.
    , _mbStateUpdatedTimestamp :: Maybe ISO8601
      -- ^ The time stamp of the last update to the alarm's state.
    , _mbMetricName :: Maybe Text
      -- ^ The name of the alarm's metric.
    , _mbNamespace :: Maybe Text
      -- ^ The namespace of alarm's associated metric.
    , _mbStatistic :: Maybe Statistic
      -- ^ The statistic to apply to the alarm's associated metric.
    , _mbDimensions :: [Dimension]
      -- ^ The list of dimensions associated with the alarm's associated
      -- metric.
    , _mbPeriod :: Maybe Integer
      -- ^ The period in seconds over which the statistic is applied.
    , _mbUnit :: Maybe StandardUnit
      -- ^ The unit of the alarm's associated metric.
    , _mbEvaluationPeriods :: Maybe Integer
      -- ^ The number of periods over which data is compared to the
      -- specified threshold.
    , _mbThreshold :: Maybe Double
      -- ^ The value against which the specified statistic is compared.
    , _mbComparisonOperator :: Maybe ComparisonOperator
      -- ^ The arithmetic operation to use when comparing the specified
      -- Statistic and Threshold. The specified Statistic value is used as
      -- the first operand.
    } deriving (Show, Generic)

-- | The name of the alarm.
mbAlarmName :: Lens' MetricAlarm (Maybe Text)
mbAlarmName f x =
    f (_mbAlarmName x)
        <&> \y -> x { _mbAlarmName = y }
{-# INLINE mbAlarmName #-}

-- | The Amazon Resource Name (ARN) of the alarm.
mbAlarmArn :: Lens' MetricAlarm (Maybe Text)
mbAlarmArn f x =
    f (_mbAlarmArn x)
        <&> \y -> x { _mbAlarmArn = y }
{-# INLINE mbAlarmArn #-}

-- | The description for the alarm.
mbAlarmDescription :: Lens' MetricAlarm (Maybe Text)
mbAlarmDescription f x =
    f (_mbAlarmDescription x)
        <&> \y -> x { _mbAlarmDescription = y }
{-# INLINE mbAlarmDescription #-}

-- | The time stamp of the last update to the alarm configuration.
mbAlarmConfigurationUpdatedTimestamp :: Lens' MetricAlarm (Maybe ISO8601)
mbAlarmConfigurationUpdatedTimestamp f x =
    f (_mbAlarmConfigurationUpdatedTimestamp x)
        <&> \y -> x { _mbAlarmConfigurationUpdatedTimestamp = y }
{-# INLINE mbAlarmConfigurationUpdatedTimestamp #-}

-- | Indicates whether actions should be executed during any changes to the
-- alarm's state.
mbActionsEnabled :: Lens' MetricAlarm (Maybe Bool)
mbActionsEnabled f x =
    f (_mbActionsEnabled x)
        <&> \y -> x { _mbActionsEnabled = y }
{-# INLINE mbActionsEnabled #-}

-- | The list of actions to execute when this alarm transitions into an OK state
-- from any other state. Each action is specified as an Amazon Resource Number
-- (ARN). Currently the only actions supported are publishing to an Amazon SNS
-- topic and triggering an Auto Scaling policy.
mbOKActions :: Lens' MetricAlarm ([Text])
mbOKActions f x =
    f (_mbOKActions x)
        <&> \y -> x { _mbOKActions = y }
{-# INLINE mbOKActions #-}

-- | The list of actions to execute when this alarm transitions into an ALARM
-- state from any other state. Each action is specified as an Amazon Resource
-- Number (ARN). Currently the only actions supported are publishing to an
-- Amazon SNS topic and triggering an Auto Scaling policy.
mbAlarmActions :: Lens' MetricAlarm ([Text])
mbAlarmActions f x =
    f (_mbAlarmActions x)
        <&> \y -> x { _mbAlarmActions = y }
{-# INLINE mbAlarmActions #-}

-- | The list of actions to execute when this alarm transitions into an
-- INSUFFICIENT_DATA state from any other state. Each action is specified as
-- an Amazon Resource Number (ARN). Currently the only actions supported are
-- publishing to an Amazon SNS topic or triggering an Auto Scaling policy.
mbInsufficientDataActions :: Lens' MetricAlarm ([Text])
mbInsufficientDataActions f x =
    f (_mbInsufficientDataActions x)
        <&> \y -> x { _mbInsufficientDataActions = y }
{-# INLINE mbInsufficientDataActions #-}

-- | The state value for the alarm.
mbStateValue :: Lens' MetricAlarm (Maybe StateValue)
mbStateValue f x =
    f (_mbStateValue x)
        <&> \y -> x { _mbStateValue = y }
{-# INLINE mbStateValue #-}

-- | A human-readable explanation for the alarm's state.
mbStateReason :: Lens' MetricAlarm (Maybe Text)
mbStateReason f x =
    f (_mbStateReason x)
        <&> \y -> x { _mbStateReason = y }
{-# INLINE mbStateReason #-}

-- | An explanation for the alarm's state in machine-readable JSON format.
mbStateReasonData :: Lens' MetricAlarm (Maybe Text)
mbStateReasonData f x =
    f (_mbStateReasonData x)
        <&> \y -> x { _mbStateReasonData = y }
{-# INLINE mbStateReasonData #-}

-- | The time stamp of the last update to the alarm's state.
mbStateUpdatedTimestamp :: Lens' MetricAlarm (Maybe ISO8601)
mbStateUpdatedTimestamp f x =
    f (_mbStateUpdatedTimestamp x)
        <&> \y -> x { _mbStateUpdatedTimestamp = y }
{-# INLINE mbStateUpdatedTimestamp #-}

-- | The name of the alarm's metric.
mbMetricName :: Lens' MetricAlarm (Maybe Text)
mbMetricName f x =
    f (_mbMetricName x)
        <&> \y -> x { _mbMetricName = y }
{-# INLINE mbMetricName #-}

-- | The namespace of alarm's associated metric.
mbNamespace :: Lens' MetricAlarm (Maybe Text)
mbNamespace f x =
    f (_mbNamespace x)
        <&> \y -> x { _mbNamespace = y }
{-# INLINE mbNamespace #-}

-- | The statistic to apply to the alarm's associated metric.
mbStatistic :: Lens' MetricAlarm (Maybe Statistic)
mbStatistic f x =
    f (_mbStatistic x)
        <&> \y -> x { _mbStatistic = y }
{-# INLINE mbStatistic #-}

-- | The list of dimensions associated with the alarm's associated metric.
mbDimensions :: Lens' MetricAlarm ([Dimension])
mbDimensions f x =
    f (_mbDimensions x)
        <&> \y -> x { _mbDimensions = y }
{-# INLINE mbDimensions #-}

-- | The period in seconds over which the statistic is applied.
mbPeriod :: Lens' MetricAlarm (Maybe Integer)
mbPeriod f x =
    f (_mbPeriod x)
        <&> \y -> x { _mbPeriod = y }
{-# INLINE mbPeriod #-}

-- | The unit of the alarm's associated metric.
mbUnit :: Lens' MetricAlarm (Maybe StandardUnit)
mbUnit f x =
    f (_mbUnit x)
        <&> \y -> x { _mbUnit = y }
{-# INLINE mbUnit #-}

-- | The number of periods over which data is compared to the specified
-- threshold.
mbEvaluationPeriods :: Lens' MetricAlarm (Maybe Integer)
mbEvaluationPeriods f x =
    f (_mbEvaluationPeriods x)
        <&> \y -> x { _mbEvaluationPeriods = y }
{-# INLINE mbEvaluationPeriods #-}

-- | The value against which the specified statistic is compared.
mbThreshold :: Lens' MetricAlarm (Maybe Double)
mbThreshold f x =
    f (_mbThreshold x)
        <&> \y -> x { _mbThreshold = y }
{-# INLINE mbThreshold #-}

-- | The arithmetic operation to use when comparing the specified Statistic and
-- Threshold. The specified Statistic value is used as the first operand.
mbComparisonOperator :: Lens' MetricAlarm (Maybe ComparisonOperator)
mbComparisonOperator f x =
    f (_mbComparisonOperator x)
        <&> \y -> x { _mbComparisonOperator = y }
{-# INLINE mbComparisonOperator #-}

instance FromXML MetricAlarm where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "MetricAlarm"

-- | The MetricDatum data type encapsulates the information sent with
-- PutMetricData to either create a new metric or add new values to be
-- aggregated into an existing metric.
data MetricDatum = MetricDatum
    { _mgMetricName :: Text
      -- ^ The name of the metric.
    , _mgDimensions :: [Dimension]
      -- ^ A list of dimensions associated with the metric.
    , _mgTimestamp :: Maybe ISO8601
      -- ^ The time stamp used for the metric. If not specified, the default
      -- value is set to the time the metric data was received.
    , _mgValue :: Maybe Double
      -- ^ The value for the metric. Although the Value parameter accepts
      -- numbers of type Double, Amazon CloudWatch truncates values with
      -- very large exponents. Values with base-10 exponents greater than
      -- 126 (1 x 10^126) are truncated. Likewise, values with base-10
      -- exponents less than -130 (1 x 10^-130) are also truncated.
    , _mgStatisticValues :: Maybe StatisticSet
      -- ^ A set of statistical values describing the metric.
    , _mgUnit :: Maybe StandardUnit
      -- ^ The unit of the metric.
    } deriving (Show, Generic)

-- | The name of the metric.
mgMetricName :: Lens' MetricDatum (Text)
mgMetricName f x =
    f (_mgMetricName x)
        <&> \y -> x { _mgMetricName = y }
{-# INLINE mgMetricName #-}

-- | A list of dimensions associated with the metric.
mgDimensions :: Lens' MetricDatum ([Dimension])
mgDimensions f x =
    f (_mgDimensions x)
        <&> \y -> x { _mgDimensions = y }
{-# INLINE mgDimensions #-}

-- | The time stamp used for the metric. If not specified, the default value is
-- set to the time the metric data was received.
mgTimestamp :: Lens' MetricDatum (Maybe ISO8601)
mgTimestamp f x =
    f (_mgTimestamp x)
        <&> \y -> x { _mgTimestamp = y }
{-# INLINE mgTimestamp #-}

-- | The value for the metric. Although the Value parameter accepts numbers of
-- type Double, Amazon CloudWatch truncates values with very large exponents.
-- Values with base-10 exponents greater than 126 (1 x 10^126) are truncated.
-- Likewise, values with base-10 exponents less than -130 (1 x 10^-130) are
-- also truncated.
mgValue :: Lens' MetricDatum (Maybe Double)
mgValue f x =
    f (_mgValue x)
        <&> \y -> x { _mgValue = y }
{-# INLINE mgValue #-}

-- | A set of statistical values describing the metric.
mgStatisticValues :: Lens' MetricDatum (Maybe StatisticSet)
mgStatisticValues f x =
    f (_mgStatisticValues x)
        <&> \y -> x { _mgStatisticValues = y }
{-# INLINE mgStatisticValues #-}

-- | The unit of the metric.
mgUnit :: Lens' MetricDatum (Maybe StandardUnit)
mgUnit f x =
    f (_mgUnit x)
        <&> \y -> x { _mgUnit = y }
{-# INLINE mgUnit #-}

instance ToQuery MetricDatum where
    toQuery = genericQuery def

-- | A set of statistical values describing the metric.
data StatisticSet = StatisticSet
    { _sswSampleCount :: Double
      -- ^ The number of samples used for the statistic set.
    , _sswSum :: Double
      -- ^ The sum of values for the sample set.
    , _sswMinimum :: Double
      -- ^ The minimum value of the sample set.
    , _sswMaximum :: Double
      -- ^ The maximum value of the sample set.
    } deriving (Show, Generic)

-- | The number of samples used for the statistic set.
sswSampleCount :: Lens' StatisticSet (Double)
sswSampleCount f x =
    f (_sswSampleCount x)
        <&> \y -> x { _sswSampleCount = y }
{-# INLINE sswSampleCount #-}

-- | The sum of values for the sample set.
sswSum :: Lens' StatisticSet (Double)
sswSum f x =
    f (_sswSum x)
        <&> \y -> x { _sswSum = y }
{-# INLINE sswSum #-}

-- | The minimum value of the sample set.
sswMinimum :: Lens' StatisticSet (Double)
sswMinimum f x =
    f (_sswMinimum x)
        <&> \y -> x { _sswMinimum = y }
{-# INLINE sswMinimum #-}

-- | The maximum value of the sample set.
sswMaximum :: Lens' StatisticSet (Double)
sswMaximum f x =
    f (_sswMaximum x)
        <&> \y -> x { _sswMaximum = y }
{-# INLINE sswMaximum #-}

instance FromXML StatisticSet where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "StatisticSet"

instance ToQuery StatisticSet where
    toQuery = genericQuery def
