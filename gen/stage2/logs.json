{
    "service": {
        "signature": "v4",
        "checksum": "sha256",
        "abbrev": "CloudWatchLogs",
        "error": "CloudWatchLogsError",
        "namespace": "Network.AWS.CloudWatchLogs",
        "protocol": "json",
        "imports": [
            "Network.AWS.CloudWatchLogs.CreateLogGroup",
            "Network.AWS.CloudWatchLogs.CreateLogStream",
            "Network.AWS.CloudWatchLogs.DeleteLogGroup",
            "Network.AWS.CloudWatchLogs.DeleteLogStream",
            "Network.AWS.CloudWatchLogs.DeleteMetricFilter",
            "Network.AWS.CloudWatchLogs.DeleteRetentionPolicy",
            "Network.AWS.CloudWatchLogs.DescribeLogGroups",
            "Network.AWS.CloudWatchLogs.DescribeLogStreams",
            "Network.AWS.CloudWatchLogs.DescribeMetricFilters",
            "Network.AWS.CloudWatchLogs.GetLogEvents",
            "Network.AWS.CloudWatchLogs.PutLogEvents",
            "Network.AWS.CloudWatchLogs.PutMetricFilter",
            "Network.AWS.CloudWatchLogs.PutRetentionPolicy",
            "Network.AWS.CloudWatchLogs.TestMetricFilter",
            "Network.AWS.CloudWatchLogs.Types"
        ],
        "name": "Amazon CloudWatch Logs",
        "version": "2014-03-28",
        "documentation": "Amazon CloudWatch Logs enables you to monitor, store, and access your system, application, and custom log files.",
        "xmlNamespace": "https://logs.amazonaws.com/doc/2014-03-28/",
        "endpoint": "regional",
        "endpointPrefix": "logs",
        "targetPrefix": "Logs_20140328"
    },
    "cabal": {
        "library": "amazonka-cloudwatch-logs",
        "modules": [
            "Network.AWS.CloudWatchLogs",
            "Network.AWS.CloudWatchLogs.CreateLogGroup",
            "Network.AWS.CloudWatchLogs.CreateLogStream",
            "Network.AWS.CloudWatchLogs.DeleteLogGroup",
            "Network.AWS.CloudWatchLogs.DeleteLogStream",
            "Network.AWS.CloudWatchLogs.DeleteMetricFilter",
            "Network.AWS.CloudWatchLogs.DeleteRetentionPolicy",
            "Network.AWS.CloudWatchLogs.DescribeLogGroups",
            "Network.AWS.CloudWatchLogs.DescribeLogStreams",
            "Network.AWS.CloudWatchLogs.DescribeMetricFilters",
            "Network.AWS.CloudWatchLogs.GetLogEvents",
            "Network.AWS.CloudWatchLogs.PutLogEvents",
            "Network.AWS.CloudWatchLogs.PutMetricFilter",
            "Network.AWS.CloudWatchLogs.PutRetentionPolicy",
            "Network.AWS.CloudWatchLogs.TestMetricFilter",
            "Network.AWS.CloudWatchLogs.Types"
        ],
        "dependencies": [],
        "version": "0.0.0",
        "synopsis": "",
        "description": ""
    },
    "types": {
        "MetricFilter": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfmetricTransformations",
                    "type": "List1 MetricTransformation"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mffilterName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mffilterPattern",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfcreationTime",
                    "type": "Maybe Integer"
                }
            ]
        },
        "MetricFilterMatchRecord": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfmrextractedValues",
                    "type": "Map Text Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfmreventNumber",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfmreventMessage",
                    "type": "Maybe Text"
                }
            ]
        },
        "InvalidSequenceTokenException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "isteexpectedSequenceToken",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "MetricTransformation": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mtmetricName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mtmetricNamespace",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mtmetricValue",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": []
        },
        "LogStream": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lslogStreamName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lscreationTime",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsfirstEventTimestamp",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lslastEventTimestamp",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lslastIngestionTime",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsuploadSequenceToken",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsarn",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsstoredBytes",
                    "type": "Maybe Integer"
                }
            ]
        },
        "LogGroup": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lglogGroupName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lgcreationTime",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lgretentionInDays",
                    "type": "Maybe Int"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lgmetricFilterCount",
                    "type": "Maybe Int"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lgarn",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lgstoredBytes",
                    "type": "Maybe Integer"
                }
            ]
        },
        "namespace": "Network.AWS.CloudWatchLogs.Types",
        "imports": [],
        "InputLogEvent": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "iletimestamp",
                    "type": "Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ilemessage",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": []
        },
        "OutputLogEvent": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "oletimestamp",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "olemessage",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "oleingestionTime",
                    "type": "Maybe Integer"
                }
            ]
        },
        "DataAlreadyAcceptedException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "daaeexpectedSequenceToken",
                "type": "Maybe Text"
            },
            "type": "newtype"
        }
    },
    "operations": [
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glerevents",
                        "type": "List OutputLogEvent"
                    }
                ],
                "name": "GetLogEventsResponse",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glernextForwardToken",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glernextBackwardToken",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.CloudWatchLogs.GetLogEvents",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "GetLogEvents",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves log events from the specified log stream. You can provide an optional time range to filter the results on the event \u003ccode class=\"code\"\u003etimestamp\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e By default, this operation returns as much log events as can fit in a response size of 1MB, up to 10,000 log events. The response will always include a \u003ccode class=\"code\"\u003enextForwardToken\u003c/code\u003e and a \u003ccode class=\"code\"\u003enextBackwardToken\u003c/code\u003e in the response body. You can use any of these tokens in subsequent \u003ccode class=\"code\"\u003eGetLogEvents\u003c/code\u003e requests to paginate through events in either forward or backward direction. You can also limit the number of log events returned in the response by specifying the \u003ccode class=\"code\"\u003elimit\u003c/code\u003e parameter in the request. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glerlogGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glerlogStreamName",
                        "type": "Text"
                    }
                ],
                "name": "GetLogEventsRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glerstartTime",
                        "type": "Maybe Integer"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glerendTime",
                        "type": "Maybe Integer"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glernextToken",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glerlimit",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "glerstartFromHead",
                        "type": "Maybe Bool"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlgr1logGroups",
                        "type": "List LogGroup"
                    }
                ],
                "name": "DescribeLogGroupsResponse",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlgr1nextToken",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.CloudWatchLogs.DescribeLogGroups",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "DescribeLogGroups",
            "method": "post",
            "documentation": "\u003cp\u003e Returns all the log groups that are associated with the AWS account making the request. The list returned in the response is ASCII-sorted by log group name. \u003c/p\u003e \u003cp\u003e By default, this operation returns up to 50 log groups. If there are more log groups to list, the response would contain a \u003ccode class=\"code\"\u003enextToken\u003c/code\u003e value in the response body. You can also limit the number of log groups returned in the response by specifying the \u003ccode class=\"code\"\u003elimit\u003c/code\u003e parameter in the request. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "DescribeLogGroupsRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlgrlogGroupNamePrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlgrnextToken",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlgrlimit",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.DeleteLogStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "DeleteLogStream",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes a log stream and permanently deletes all the archived log events associated with it. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsrlogGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsrlogStreamName",
                        "type": "Text"
                    }
                ],
                "name": "DeleteLogStreamRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.CreateLogStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "CreateLogStream",
            "method": "post",
            "documentation": "\u003cp\u003e Creates a new log stream in the specified log group. The name of the log stream must be unique within the log group. There is no limit on the number of log streams that can exist in a log group. \u003c/p\u003e \u003cp\u003e You must use the following guidelines when naming a log stream: \u003cul\u003e \u003cli\u003eLog stream names can be between 1 and 512 characters long.\u003c/li\u003e \u003cli\u003eThe ':' colon character is not allowed.\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "clsrlogGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "clsrlogStreamName",
                        "type": "Text"
                    }
                ],
                "name": "CreateLogStreamRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.CreateLogGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "CreateLogGroup",
            "method": "post",
            "documentation": "\u003cp\u003e Creates a new log group with the specified name. The name of the log group must be unique within a region for an AWS account. You can create up to 500 log groups per account. \u003c/p\u003e \u003cp\u003e You must use the following guidelines when naming a log group: \u003cul\u003e \u003cli\u003eLog group names can be between 1 and 512 characters long.\u003c/li\u003e \u003cli\u003eAllowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), '/' (forward slash), and '.' (period).\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "clgrlogGroupName",
                    "type": "Text"
                },
                "name": "CreateLogGroupRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.DeleteLogGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "DeleteLogGroup",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the log group with the specified name and permanently deletes all the archived log events associated with it. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dlgrlogGroupName",
                    "type": "Text"
                },
                "name": "DeleteLogGroupRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "plernextSequenceToken",
                    "type": "Maybe Text"
                },
                "wrapper": false,
                "name": "PutLogEventsResponse",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.CloudWatchLogs.PutLogEvents",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "PutLogEvents",
            "method": "post",
            "documentation": "\u003cp\u003e Uploads a batch of log events to the specified log stream. \u003c/p\u003e \u003cp\u003e Every PutLogEvents request must include the \u003ccode class=\"code\"\u003esequenceToken\u003c/code\u003e obtained from the response of the previous request. An upload in a newly created log stream does not require a \u003ccode class=\"code\"\u003esequenceToken\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e The batch of events must satisfy the following constraints: \u003cul\u003e \u003cli\u003eThe maximum batch size is 32,768 bytes, and this size is calculated as the sum of all event messages in UTF-8, plus 26 bytes for each log event.\u003c/li\u003e \u003cli\u003eNone of the log events in the batch can be more than 2 hours in the future.\u003c/li\u003e \u003cli\u003eNone of the log events in the batch can be older than 14 days or the retention period of the log group.\u003c/li\u003e \u003cli\u003eThe log events in the batch must be in chronological ordered by their \u003ccode class=\"code\"\u003etimestamp\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eThe maximum number of log events in a batch is 1,000.\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "plerlogGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "plerlogStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "plerlogEvents",
                        "type": "List1 InputLogEvent"
                    }
                ],
                "name": "PutLogEventsRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "plersequenceToken",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfr1metricFilters",
                        "type": "List MetricFilter"
                    }
                ],
                "name": "DescribeMetricFiltersResponse",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfr1nextToken",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.CloudWatchLogs.DescribeMetricFilters",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "DescribeMetricFilters",
            "method": "post",
            "documentation": "\u003cp\u003e Returns all the metrics filters associated with the specified log group. The list returned in the response is ASCII-sorted by filter name. \u003c/p\u003e \u003cp\u003e By default, this operation returns up to 50 metric filters. If there are more metric filters to list, the response would contain a \u003ccode class=\"code\"\u003enextToken\u003c/code\u003e value in the response body. You can also limit the number of metric filters returned in the response by specifying the \u003ccode class=\"code\"\u003elimit\u003c/code\u003e parameter in the request. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfrlogGroupName",
                        "type": "Text"
                    }
                ],
                "name": "DescribeMetricFiltersRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfrfilterNamePrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfrnextToken",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfrlimit",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "tmfrmatches",
                    "type": "List MetricFilterMatchRecord"
                },
                "wrapper": false,
                "name": "TestMetricFilterResponse",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.CloudWatchLogs.TestMetricFilter",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "TestMetricFilter",
            "method": "post",
            "documentation": "\u003cp\u003e Tests the filter pattern of a metric filter against a sample of log event messages. You can use this operation to validate the correctness of a metric filter pattern. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "tmfrfilterPattern",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "tmfrlogEventMessages",
                        "type": "List1 Text"
                    }
                ],
                "name": "TestMetricFilterRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.PutMetricFilter",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "PutMetricFilter",
            "method": "post",
            "documentation": "\u003cp\u003e Creates or updates a metric filter and associates it with the specified log group. Metric filters allow you to configure rules to extract metric data from log events ingested through \u003ccode class=\"code\"\u003ePutLogEvents\u003c/code\u003e requests. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pmfrlogGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pmfrfilterName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pmfrfilterPattern",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pmfrmetricTransformations",
                        "type": "List1 MetricTransformation"
                    }
                ],
                "name": "PutMetricFilterRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.DeleteRetentionPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "DeleteRetentionPolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the retention policy of the specified log group. Log events would not expire if they belong to log groups without a retention policy. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "drprlogGroupName",
                    "type": "Text"
                },
                "name": "DeleteRetentionPolicyRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.DeleteMetricFilter",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "DeleteMetricFilter",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes a metric filter associated with the specified log group. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfr1logGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfr1filterName",
                        "type": "Text"
                    }
                ],
                "name": "DeleteMetricFilterRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.CloudWatchLogs.PutRetentionPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "PutRetentionPolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Sets the retention of the specified log group. A retention policy allows you to configure the number of days you want to retain log events in the specified log group. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "prprlogGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "prprretentionInDays",
                        "type": "Int"
                    }
                ],
                "name": "PutRetentionPolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsrlogStreams",
                        "type": "List LogStream"
                    }
                ],
                "name": "DescribeLogStreamsResponse",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsrnextToken",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.CloudWatchLogs.DescribeLogStreams",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.CloudWatchLogs.Types"
            ],
            "name": "DescribeLogStreams",
            "method": "post",
            "documentation": "\u003cp\u003e Returns all the log streams that are associated with the specified log group. The list returned in the response is ASCII-sorted by log stream name. \u003c/p\u003e \u003cp\u003e By default, this operation returns up to 50 log streams. If there are more log streams to list, the response would contain a \u003ccode class=\"code\"\u003enextToken\u003c/code\u003e value in the response body. You can also limit the number of log streams returned in the response by specifying the \u003ccode class=\"code\"\u003elimit\u003c/code\u003e parameter in the request. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsr1logGroupName",
                        "type": "Text"
                    }
                ],
                "name": "DescribeLogStreamsRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsr1logStreamNamePrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsr1nextToken",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dlsr1limit",
                        "type": "Maybe Int"
                    }
                ]
            }
        }
    ]
}