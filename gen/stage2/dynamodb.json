{
    "service": {
        "signature": "v4",
        "checksum": "sha256",
        "abbrev": "DynamoDB",
        "error": "DynamoDBError",
        "namespace": "Network.AWS.DynamoDB",
        "protocol": "json",
        "imports": [
            "Network.AWS.DynamoDB.BatchGetItem",
            "Network.AWS.DynamoDB.BatchWriteItem",
            "Network.AWS.DynamoDB.CreateTable",
            "Network.AWS.DynamoDB.DeleteItem",
            "Network.AWS.DynamoDB.DeleteTable",
            "Network.AWS.DynamoDB.DescribeTable",
            "Network.AWS.DynamoDB.GetItem",
            "Network.AWS.DynamoDB.ListTables",
            "Network.AWS.DynamoDB.PutItem",
            "Network.AWS.DynamoDB.Query",
            "Network.AWS.DynamoDB.Scan",
            "Network.AWS.DynamoDB.Types",
            "Network.AWS.DynamoDB.UpdateItem",
            "Network.AWS.DynamoDB.UpdateTable"
        ],
        "name": "Amazon DynamoDB",
        "version": "2012-08-10",
        "documentation": "\u003cfullname\u003eAmazon DynamoDB\u003c/fullname\u003e \u003cb\u003eOverview\u003c/b\u003e \u003cp\u003eThis is the Amazon DynamoDB API Reference. This guide provides descriptions and samples of the low-level DynamoDB API. For information about DynamoDB application development, go to the \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/\"\u003eAmazon DynamoDB Developer Guide\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eInstead of making the requests to the low-level DynamoDB API directly from your application, we recommend that you use the AWS Software Development Kits (SDKs). The easy-to-use libraries in the AWS SDKs make it unnecessary to call the low-level DynamoDB API directly from your application. The libraries take care of request authentication, serialization, and connection management. For more information, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/UsingAWSSDK.html\"\u003eUsing the AWS SDKs with DynamoDB\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you decide to code against the low-level DynamoDB API directly, you will need to write the necessary code to authenticate your requests. For more information on signing your requests, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/API.html\"\u003eUsing the DynamoDB API\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eThe following are short descriptions of each low-level API action, organized by function.\u003c/p\u003e \u003cp\u003e \u003cb\u003eManaging Tables\u003c/b\u003e \u003c/p\u003e \u003cp\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCreateTable\u003c/i\u003e - Creates a table with user-specified provisioned throughput settings. You must designate one attribute as the hash primary key for the table; you can optionally designate a second attribute as the range primary key. DynamoDB creates indexes on these key attributes for fast data access. Optionally, you can create one or more secondary indexes, which provide fast data access using non-key attributes.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDescribeTable\u003c/i\u003e - Returns metadata for a table, such as table size, status, and index information.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUpdateTable\u003c/i\u003e - Modifies the provisioned throughput settings for a table. Optionally, you can modify the provisioned throughput settings for global secondary indexes on the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eListTables\u003c/i\u003e - Returns a list of all tables associated with the current AWS account and endpoint.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteTable\u003c/i\u003e - Deletes a table and all of its indexes.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e \u003cp\u003eFor conceptual information about managing tables, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html\"\u003eWorking with Tables\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003e \u003cb\u003eReading Data\u003c/b\u003e \u003c/p\u003e \u003cp\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eGetItem\u003c/i\u003e - Returns a set of attributes for the item that has a given primary key. By default, \u003ci\u003eGetItem\u003c/i\u003e performs an eventually consistent read; however, applications can specify a strongly consistent read instead.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eBatchGetItem\u003c/i\u003e - Performs multiple \u003ci\u003eGetItem\u003c/i\u003e requests for data items using their primary keys, from one table or multiple tables. The response from \u003ci\u003eBatchGetItem\u003c/i\u003e has a size limit of 16 MB and returns a maximum of 100 items. Both eventually consistent and strongly consistent reads can be used.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eQuery\u003c/i\u003e - Returns one or more items from a table or a secondary index. You must provide a specific hash key value. You can narrow the scope of the query using comparison operators against a range key value, or on the index key. \u003ci\u003eQuery\u003c/i\u003e supports either eventual or strong consistency. A single response has a size limit of 1 MB.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eScan\u003c/i\u003e - Reads every item in a table; the result set is eventually consistent. You can limit the number of items returned by filtering the data attributes, using conditional expressions. \u003ci\u003eScan\u003c/i\u003e can be used to enable ad-hoc querying of a table against non-key attributes; however, since this is a full table scan without using an index, \u003ci\u003eScan\u003c/i\u003e should not be used for any application query use case that requires predictable performance.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e \u003cp\u003eFor conceptual information about reading data, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\"\u003eWorking with Items\u003c/a\u003e and \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\"\u003eQuery and Scan Operations\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003e \u003cb\u003eModifying Data\u003c/b\u003e \u003c/p\u003e \u003cp\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003ePutItem\u003c/i\u003e - Creates a new item, or replaces an existing item with a new item (including all the attributes). By default, if an item in the table already exists with the same primary key, the new item completely replaces the existing item. You can use conditional operators to replace an item only if its attribute values match certain conditions, or to insert a new item only if that item doesn't already exist.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUpdateItem\u003c/i\u003e - Modifies the attributes of an existing item. You can also use conditional operators to perform an update only if the item's attribute values match certain conditions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteItem\u003c/i\u003e - Deletes an item in a table by primary key. You can use conditional operators to perform a delete an item only if the item's attribute values match certain conditions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eBatchWriteItem\u003c/i\u003e - Performs multiple \u003ci\u003ePutItem\u003c/i\u003e and \u003ci\u003eDeleteItem\u003c/i\u003e requests across multiple tables in a single request. A failure of any request(s) in the batch will not cause the entire \u003ci\u003eBatchWriteItem\u003c/i\u003e operation to fail. Supports batches of up to 25 items to put or delete, with a maximum total request size of 16 MB. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e \u003cp\u003eFor conceptual information about modifying data, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\"\u003eWorking with Items\u003c/a\u003e and \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\"\u003eQuery and Scan Operations\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
        "xmlNamespace": "https://dynamodb.amazonaws.com/doc/2012-08-10/",
        "endpoint": "regional",
        "endpointPrefix": "dynamodb",
        "targetPrefix": "DynamoDB_20120810"
    },
    "cabal": {
        "library": "amazonka-dynamodb",
        "modules": [
            "Network.AWS.DynamoDB",
            "Network.AWS.DynamoDB.BatchGetItem",
            "Network.AWS.DynamoDB.BatchWriteItem",
            "Network.AWS.DynamoDB.CreateTable",
            "Network.AWS.DynamoDB.DeleteItem",
            "Network.AWS.DynamoDB.DeleteTable",
            "Network.AWS.DynamoDB.DescribeTable",
            "Network.AWS.DynamoDB.GetItem",
            "Network.AWS.DynamoDB.ListTables",
            "Network.AWS.DynamoDB.PutItem",
            "Network.AWS.DynamoDB.Query",
            "Network.AWS.DynamoDB.Scan",
            "Network.AWS.DynamoDB.Types",
            "Network.AWS.DynamoDB.UpdateItem",
            "Network.AWS.DynamoDB.UpdateTable"
        ],
        "dependencies": [],
        "version": "0.0.0",
        "synopsis": "",
        "description": ""
    },
    "types": {
        "WriteRequest": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "wrPutRequest",
                    "type": "Maybe PutRequest"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "wrDeleteRequest",
                    "type": "Maybe DeleteRequest"
                }
            ]
        },
        "ProvisionedThroughputDescription": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ptdLastIncreaseDateTime",
                    "type": "Maybe (Time RFC822)"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ptdLastDecreaseDateTime",
                    "type": "Maybe (Time RFC822)"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ptdNumberOfDecreasesToday",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ptdReadCapacityUnits",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ptdWriteCapacityUnits",
                    "type": "Maybe Integer"
                }
            ]
        },
        "AttributeValue": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avSS",
                    "type": "List Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avNS",
                    "type": "List Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avBS",
                    "type": "List Blob"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avM",
                    "type": "Map Text AttributeValue"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avL",
                    "type": "List AttributeValue"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avS",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avN",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avB",
                    "type": "Maybe Blob"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avNULL",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avBOOL",
                    "type": "Maybe Bool"
                }
            ]
        },
        "ProvisionedThroughput": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "enum",
                "num"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ptReadCapacityUnits",
                    "type": "Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ptWriteCapacityUnits",
                    "type": "Integer"
                }
            ],
            "type": "record",
            "optional": []
        },
        "TableDescription": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdAttributeDefinitions",
                    "type": "List AttributeDefinition"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdKeySchema",
                    "type": "List1 KeySchemaElement"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdLocalSecondaryIndexes",
                    "type": "List LocalSecondaryIndexDescription"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdGlobalSecondaryIndexes",
                    "type": "List GlobalSecondaryIndexDescription"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdTableName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdTableStatus",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdCreationDateTime",
                    "type": "Maybe (Time RFC822)"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdProvisionedThroughput",
                    "type": "Maybe ProvisionedThroughputDescription"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdTableSizeBytes",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tdItemCount",
                    "type": "Maybe Integer"
                }
            ]
        },
        "KeysAndAttributes": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "kaaKeys",
                    "type": "List1 (Map Text AttributeValue)"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "kaaAttributesToGet",
                    "type": "List1 Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "kaaExpressionAttributeNames",
                    "type": "Map Text Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "kaaConsistentRead",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "kaaProjectionExpression",
                    "type": "Maybe Text"
                }
            ]
        },
        "namespace": "Network.AWS.DynamoDB.Types",
        "ProvisionedThroughputExceededException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "pteemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "AttributeValueUpdate": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avuValue",
                    "type": "Maybe AttributeValue"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "avuAction",
                    "type": "Maybe Text"
                }
            ]
        },
        "imports": [],
        "ExpectedAttributeValue": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "eavAttributeValueList",
                    "type": "List AttributeValue"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "eavValue",
                    "type": "Maybe AttributeValue"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "eavExists",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "eavComparisonOperator",
                    "type": "Maybe Text"
                }
            ]
        },
        "AttributeDefinition": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "adAttributeName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "adAttributeType",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": []
        },
        "LocalSecondaryIndex": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsiIndexName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsiKeySchema",
                    "type": "List1 KeySchemaElement"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsiProjection",
                    "type": "Projection"
                }
            ],
            "type": "record",
            "optional": []
        },
        "GlobalSecondaryIndexDescription": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsidKeySchema",
                    "type": "List1 KeySchemaElement"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsidIndexName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsidProjection",
                    "type": "Maybe Projection"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsidIndexStatus",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsidProvisionedThroughput",
                    "type": "Maybe ProvisionedThroughputDescription"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsidIndexSizeBytes",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsidItemCount",
                    "type": "Maybe Integer"
                }
            ]
        },
        "ItemCollectionMetrics": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "icmItemCollectionKey",
                    "type": "Map Text AttributeValue"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "icmSizeEstimateRangeGB",
                    "type": "List Double"
                }
            ],
            "type": "record",
            "optional": []
        },
        "ConditionalCheckFailedException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "ccfemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "Capacity": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "enum",
                "num"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "capCapacityUnits",
                "type": "Maybe Double"
            },
            "type": "newtype"
        },
        "ConsumedCapacity": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ccLocalSecondaryIndexes",
                    "type": "Map Text Capacity"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ccGlobalSecondaryIndexes",
                    "type": "Map Text Capacity"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ccTableName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ccCapacityUnits",
                    "type": "Maybe Double"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ccTable",
                    "type": "Maybe Capacity"
                }
            ]
        },
        "GlobalSecondaryIndex": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsiIndexName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsiKeySchema",
                    "type": "List1 KeySchemaElement"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsiProjection",
                    "type": "Projection"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "gsiProvisionedThroughput",
                    "type": "ProvisionedThroughput"
                }
            ],
            "type": "record",
            "optional": []
        },
        "LocalSecondaryIndexDescription": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsidKeySchema",
                    "type": "List1 KeySchemaElement"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsidIndexName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsidProjection",
                    "type": "Maybe Projection"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsidIndexSizeBytes",
                    "type": "Maybe Integer"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lsidItemCount",
                    "type": "Maybe Integer"
                }
            ]
        },
        "ItemCollectionSizeLimitExceededException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "icsleemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "InternalServerError": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "isemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "Projection": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "proNonKeyAttributes",
                    "type": "List1 Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "proProjectionType",
                    "type": "Maybe Text"
                }
            ]
        },
        "KeySchemaElement": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "kseAttributeName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "kseKeyType",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": []
        },
        "DeleteRequest": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "drKey",
                "type": "Map Text AttributeValue"
            },
            "type": "newtype"
        },
        "UpdateGlobalSecondaryIndexAction": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ugsiaIndexName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ugsiaProvisionedThroughput",
                    "type": "ProvisionedThroughput"
                }
            ],
            "type": "record",
            "optional": []
        },
        "PutRequest": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "prItem",
                "type": "Map Text AttributeValue"
            },
            "type": "newtype"
        },
        "Condition": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "conAttributeValueList",
                    "type": "List AttributeValue"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "conComparisonOperator",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": []
        },
        "GlobalSecondaryIndexUpdate": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "gsiuUpdate",
                "type": "Maybe UpdateGlobalSecondaryIndexAction"
            },
            "type": "newtype"
        },
        "ResourceNotFoundException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "rnfemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "LimitExceededException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "leemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "ResourceInUseException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "riuemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        }
    },
    "operations": [
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pioAttributes",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "PutItemOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pioConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pioItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "namespace": "Network.AWS.DynamoDB.PutItem",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "PutItem",
            "method": "post",
            "documentation": "\u003cp\u003eCreates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn't exist), or replace an existing item if it has certain attribute values. \u003c/p\u003e \u003cp\u003eIn addition to putting an item, you can also return the item's attribute values in the same operation, using the \u003ci\u003eReturnValues\u003c/i\u003e parameter.\u003c/p\u003e \u003cp\u003eWhen you add an item, the primary key attribute(s) are the only required attributes. Attribute values cannot be null. String and Binary type attributes must have lengths greater than zero. Set type attributes cannot be empty. Requests with empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eYou can request that \u003ci\u003ePutItem\u003c/i\u003e return either a copy of the original item (before the update) or a copy of the updated item (after the update). For more information, see the \u003ci\u003eReturnValues\u003c/i\u003e description below.\u003c/p\u003e \u003cp\u003eFor more information about using this API, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\"\u003eWorking with Items\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiItem",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiExpected",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiExpressionAttributeNames",
                        "type": "Map Text Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiExpressionAttributeValues",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "PutItemInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiReturnValues",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiReturnConsumedCapacity",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiReturnItemCollectionMetrics",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiConditionalOperator",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "piiConditionExpression",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dioAttributes",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "DeleteItemOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dioConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dioItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "namespace": "Network.AWS.DynamoDB.DeleteItem",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "DeleteItem",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.\u003c/p\u003e \u003cp\u003eIn addition to deleting an item, you can also return the item's attribute values in the same operation, using the \u003ci\u003eReturnValues\u003c/i\u003e parameter.\u003c/p\u003e \u003cp\u003eUnless you specify conditions, the \u003ci\u003eDeleteItem\u003c/i\u003e is an idempotent operation; running it multiple times on the same item or attribute does \u003ci\u003enot\u003c/i\u003e result in an error response.\u003c/p\u003e \u003cp\u003eConditional deletes are useful for deleting items only if specific conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not deleted. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiKey",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiExpected",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiExpressionAttributeNames",
                        "type": "Map Text Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiExpressionAttributeValues",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "DeleteItemInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiConditionalOperator",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiReturnValues",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiReturnConsumedCapacity",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiReturnItemCollectionMetrics",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "diiConditionExpression",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uioAttributes",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "UpdateItemOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uioConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uioItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "namespace": "Network.AWS.DynamoDB.UpdateItem",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "UpdateItem",
            "method": "post",
            "documentation": "\u003cp\u003e Edits an existing item's attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update (insert a new attribute name-value pair if it doesn't exist, or replace an existing name-value pair if it has certain expected attribute values).\u003c/p\u003e \u003cp\u003eYou can also return the item's attribute values in the same \u003ci\u003eUpdateItem\u003c/i\u003e operation using the \u003ci\u003eReturnValues\u003c/i\u003e parameter.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiKey",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiAttributeUpdates",
                        "type": "Map Text AttributeValueUpdate"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiExpected",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiExpressionAttributeNames",
                        "type": "Map Text Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiExpressionAttributeValues",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "UpdateItemInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiConditionalOperator",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiReturnValues",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiReturnConsumedCapacity",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiReturnItemCollectionMetrics",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiUpdateExpression",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uiiConditionExpression",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dtoTableDescription",
                    "type": "Maybe TableDescription"
                },
                "wrapper": false,
                "name": "DeleteTableOutput",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.DynamoDB.DeleteTable",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "DeleteTable",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eDeleteTable\u003c/i\u003e operation deletes a table and all of its items. After a \u003ci\u003eDeleteTable\u003c/i\u003e request, the specified table is in the \u003ccode\u003eDELETING\u003c/code\u003e state until DynamoDB completes the deletion. If the table is in the \u003ccode\u003eACTIVE\u003c/code\u003e state, you can delete it. If a table is in \u003ccode\u003eCREATING\u003c/code\u003e or \u003ccode\u003eUPDATING\u003c/code\u003e states, then DynamoDB returns a \u003ci\u003eResourceInUseException\u003c/i\u003e. If the specified table does not exist, DynamoDB returns a \u003ci\u003eResourceNotFoundException\u003c/i\u003e. If table is already in the \u003ccode\u003eDELETING\u003c/code\u003e state, no error is returned. \u003c/p\u003e \u003cp\u003eWhen you delete a table, any indexes on that table are also deleted.\u003c/p\u003e \u003cp\u003eUse the \u003ci\u003eDescribeTable\u003c/i\u003e API to check the status of the table. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dti1TableName",
                    "type": "Text"
                },
                "name": "DeleteTableInput",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "utoTableDescription",
                    "type": "Maybe TableDescription"
                },
                "wrapper": false,
                "name": "UpdateTableOutput",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.DynamoDB.UpdateTable",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "UpdateTable",
            "method": "post",
            "documentation": "\u003cp\u003eUpdates the provisioned throughput for the given table. Setting the throughput for a table helps you manage performance and is part of the provisioned throughput feature of DynamoDB.\u003c/p\u003e \u003cp\u003eThe provisioned throughput values can be upgraded or downgraded based on the maximums and minimums listed in the \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e section in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eThe table must be in the \u003ccode\u003eACTIVE\u003c/code\u003e state for this operation to succeed. \u003ci\u003eUpdateTable\u003c/i\u003e is an asynchronous operation; while executing the operation, the table is in the \u003ccode\u003eUPDATING\u003c/code\u003e state. While the table is in the \u003ccode\u003eUPDATING\u003c/code\u003e state, the table still has the provisioned throughput from before the call. The new provisioned throughput setting is in effect only when the table returns to the \u003ccode\u003eACTIVE\u003c/code\u003e state after the \u003ci\u003eUpdateTable\u003c/i\u003e operation. \u003c/p\u003e \u003cp\u003eYou cannot add, modify or delete indexes using \u003ci\u003eUpdateTable\u003c/i\u003e. Indexes can only be defined at table creation time.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "utiTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "utiGlobalSecondaryIndexUpdates",
                        "type": "List GlobalSecondaryIndexUpdate"
                    }
                ],
                "name": "UpdateTableInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "utiProvisionedThroughput",
                        "type": "Maybe ProvisionedThroughput"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bgioResponses",
                        "type": "Map Text (List (Map Text AttributeValue))"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bgioUnprocessedKeys",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bgioConsumedCapacity",
                        "type": "List ConsumedCapacity"
                    }
                ],
                "name": "BatchGetItemOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.DynamoDB.BatchGetItem",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "BatchGetItem",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eBatchGetItem\u003c/i\u003e operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.\u003c/p\u003e \u003cp\u003eA single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. \u003ci\u003eBatchGetItem\u003c/i\u003e will return a partial result if the response size limit is exceeded, the table's provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for \u003ci\u003eUnprocessedKeys\u003c/i\u003e. You can use this value to retry the operation starting with the next item to get.\u003c/p\u003e \u003cp\u003eFor example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate \u003ci\u003eUnprocessedKeys\u003c/i\u003e value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one data set.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003enone\u003c/i\u003e of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then \u003ci\u003eBatchGetItem\u003c/i\u003e will return a \u003ci\u003eProvisionedThroughputExceededException\u003c/i\u003e. If \u003ci\u003eat least one\u003c/i\u003e of the items is successfully processed, then \u003ci\u003eBatchGetItem\u003c/i\u003e completes successfully, while returning the keys of the unread items in \u003ci\u003eUnprocessedKeys\u003c/i\u003e.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, \u003ci\u003ewe strongly recommend that you use an exponential backoff algorithm\u003c/i\u003e. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\u003c/p\u003e \u003cp\u003eFor more information, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\"\u003eBatch Operations and Error Handling\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eBy default, \u003ci\u003eBatchGetItem\u003c/i\u003e performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set \u003ci\u003eConsistentRead\u003c/i\u003e to \u003ccode\u003etrue\u003c/code\u003e for any or all tables.\u003c/p\u003e \u003cp\u003eIn order to minimize response latency, \u003ci\u003eBatchGetItem\u003c/i\u003e retrieves items in parallel.\u003c/p\u003e \u003cp\u003eWhen designing your application, keep in mind that DynamoDB does not return attributes in any particular order. To help parse the response by item, include the primary key values for the items in your request in the \u003ci\u003eAttributesToGet\u003c/i\u003e parameter.\u003c/p\u003e \u003cp\u003eIf a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations\"\u003eCapacity Units Calculations\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bgiiRequestItems",
                        "type": "Map Text KeysAndAttributes"
                    }
                ],
                "name": "BatchGetItemInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bgiiReturnConsumedCapacity",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dtoTable",
                    "type": "Maybe TableDescription"
                },
                "wrapper": false,
                "name": "DescribeTableOutput",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.DynamoDB.DescribeTable",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "DescribeTable",
            "method": "post",
            "documentation": "\u003cp\u003eReturns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dtiTableName",
                    "type": "Text"
                },
                "name": "DescribeTableInput",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gioItem",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "GetItemOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gioConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ]
            },
            "namespace": "Network.AWS.DynamoDB.GetItem",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "GetItem",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eGetItem\u003c/i\u003e operation returns a set of attributes for the item with the given primary key. If there is no matching item, \u003ci\u003eGetItem\u003c/i\u003e does not return any data.\u003c/p\u003e \u003cp\u003e\u003ci\u003eGetItem\u003c/i\u003e provides an eventually consistent read by default. If your application requires a strongly consistent read, set \u003ci\u003eConsistentRead\u003c/i\u003e to \u003ccode\u003etrue\u003c/code\u003e. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "giiTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "giiKey",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "giiAttributesToGet",
                        "type": "List1 Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "giiExpressionAttributeNames",
                        "type": "Map Text Text"
                    }
                ],
                "name": "GetItemInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "giiConsistentRead",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "giiReturnConsumedCapacity",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "giiProjectionExpression",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bwioUnprocessedItems",
                        "type": "Map Text (List1 WriteRequest)"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bwioItemCollectionMetrics",
                        "type": "Map Text (List ItemCollectionMetrics)"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bwioConsumedCapacity",
                        "type": "List ConsumedCapacity"
                    }
                ],
                "name": "BatchWriteItemOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.DynamoDB.BatchWriteItem",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "BatchWriteItem",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eBatchWriteItem\u003c/i\u003e operation puts or deletes multiple items in one or more tables. A single call to \u003ci\u003eBatchWriteItem\u003c/i\u003e can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.\u003c/p\u003e \u003cp\u003eThe individual \u003ci\u003ePutItem\u003c/i\u003e and \u003ci\u003eDeleteItem\u003c/i\u003e operations specified in \u003ci\u003eBatchWriteItem\u003c/i\u003e are atomic; however \u003ci\u003eBatchWriteItem\u003c/i\u003e as a whole is not. If any requested operations fail because the table's provisioned throughput is exceeded or an internal processing failure occurs, the failed operations are returned in the \u003ci\u003eUnprocessedItems\u003c/i\u003e response parameter. You can investigate and optionally resend the requests. Typically, you would call \u003ci\u003eBatchWriteItem\u003c/i\u003e in a loop. Each iteration would check for unprocessed items and submit a new \u003ci\u003eBatchWriteItem\u003c/i\u003e request with those unprocessed items until all items have been processed.\u003c/p\u003e \u003cp\u003eNote that if \u003ci\u003enone\u003c/i\u003e of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then \u003ci\u003eBatchWriteItem\u003c/i\u003e will return a \u003ci\u003eProvisionedThroughputExceededException\u003c/i\u003e.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, \u003ci\u003ewe strongly recommend that you use an exponential backoff algorithm\u003c/i\u003e. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\u003c/p\u003e \u003cp\u003eFor more information, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\"\u003eBatch Operations and Error Handling\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eWith \u003ci\u003eBatchWriteItem\u003c/i\u003e, you can efficiently write or delete large amounts of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, \u003ci\u003eBatchWriteItem\u003c/i\u003e does not behave in the same way as individual \u003ci\u003ePutItem\u003c/i\u003e and \u003ci\u003eDeleteItem\u003c/i\u003e calls would For example, you cannot specify conditions on individual put and delete requests, and \u003ci\u003eBatchWriteItem\u003c/i\u003e does not return deleted items in the response.\u003c/p\u003e \u003cp\u003eIf you use a programming language that supports concurrency, such as Java, you can use threads to write items in parallel. Your application must include the necessary logic to manage the threads. With languages that don't support threading, such as PHP, you must update or delete the specified items one at a time. In both situations, \u003ci\u003eBatchWriteItem\u003c/i\u003e provides an alternative where the API performs the specified put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce complexity into your application.\u003c/p\u003e \u003cp\u003eParallel processing reduces latency, but each specified put and delete request consumes the same number of write capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write capacity unit.\u003c/p\u003e \u003cp\u003eIf one or more of the following is true, DynamoDB rejects the entire batch write operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eOne or more tables specified in the \u003ci\u003eBatchWriteItem\u003c/i\u003e request does not exist.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ePrimary key attributes specified on an item in the request do not match those in the corresponding table's primary key schema.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eYou try to perform multiple operations on the same item in the same \u003ci\u003eBatchWriteItem\u003c/i\u003e request. For example, you cannot put and delete the same item in the same \u003ci\u003eBatchWriteItem\u003c/i\u003e request. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThere are more than 25 requests in the batch.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAny individual item in a batch exceeds 400 KB.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe total request size exceeds 16 MB.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bwiiRequestItems",
                        "type": "Map Text (List1 WriteRequest)"
                    }
                ],
                "name": "BatchWriteItemInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bwiiReturnConsumedCapacity",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "bwiiReturnItemCollectionMetrics",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltoTableNames",
                        "type": "List Text"
                    }
                ],
                "name": "ListTablesOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltoLastEvaluatedTableName",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.DynamoDB.ListTables",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "ListTables",
            "method": "post",
            "documentation": "\u003cp\u003eReturns an array of table names associated with the current account and endpoint. The output from \u003ci\u003eListTables\u003c/i\u003e is paginated, with each page returning a maximum of 100 table names.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListTablesInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltiExclusiveStartTableName",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltiLimit",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "soItems",
                        "type": "List (Map Text AttributeValue)"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "soLastEvaluatedKey",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "ScanOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "soCount",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "soScannedCount",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "soConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ]
            },
            "namespace": "Network.AWS.DynamoDB.Scan",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "Scan",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eScan\u003c/i\u003e operation returns one or more items and item attributes by accessing every item in the table. To have DynamoDB return fewer items, you can provide a \u003ci\u003eScanFilter\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eIf the total number of scanned items exceeds the maximum data set size limit of 1 MB, the scan stops and results are returned to the user as a \u003ci\u003eLastEvaluatedKey\u003c/i\u003e value to continue the scan in a subsequent operation. The results also include the number of items exceeding the limit. A scan can result in no table data meeting the filter criteria. \u003c/p\u003e \u003cp\u003eThe result set is eventually consistent. \u003c/p\u003e \u003cp\u003eBy default, \u003ci\u003eScan\u003c/i\u003e operations proceed sequentially; however, for faster performance on large tables, applications can request a parallel \u003ci\u003eScan\u003c/i\u003e operation by specifying the \u003ci\u003eSegment\u003c/i\u003e and \u003ci\u003eTotalSegments\u003c/i\u003e parameters. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#QueryAndScanParallelScan\"\u003eParallel Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siAttributesToGet",
                        "type": "List1 Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siScanFilter",
                        "type": "Map Text Condition"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siExclusiveStartKey",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siExpressionAttributeNames",
                        "type": "Map Text Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siExpressionAttributeValues",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "ScanInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siLimit",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siSelect",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siConditionalOperator",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siReturnConsumedCapacity",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siTotalSegments",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siSegment",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siProjectionExpression",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "siFilterExpression",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qoItems",
                        "type": "List (Map Text AttributeValue)"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qoLastEvaluatedKey",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "QueryOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qoCount",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qoScannedCount",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qoConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ]
            },
            "namespace": "Network.AWS.DynamoDB.Query",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "Query",
            "method": "post",
            "documentation": "\u003cp\u003eA \u003ci\u003eQuery\u003c/i\u003e operation directly accesses items from a table using the table primary key, or from an index using the index key. You must provide a specific hash key value. You can narrow the scope of the query by using comparison operators on the range key value, or on the index key. You can use the \u003ci\u003eScanIndexForward\u003c/i\u003e parameter to get results in forward or reverse order, by range key or by index key. \u003c/p\u003e \u003cp\u003eQueries that do not return results consume the minimum number of read capacity units for that type of read operation.\u003c/p\u003e \u003cp\u003eIf the total number of items meeting the query criteria exceeds the result set size limit of 1 MB, the query stops and results are returned to the user with \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to continue the query in a subsequent operation. Unlike a \u003ci\u003eScan\u003c/i\u003e operation, a \u003ci\u003eQuery\u003c/i\u003e operation never returns both an empty result set and a \u003ci\u003eLastEvaluatedKey\u003c/i\u003e. The \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is only provided if the results exceed 1 MB, or if you have used \u003ci\u003eLimit\u003c/i\u003e. \u003c/p\u003e \u003cp\u003eYou can query a table, a local secondary index, or a global secondary index. For a query on a table or on a local secondary index, you can set \u003ci\u003eConsistentRead\u003c/i\u003e to true and obtain a strongly consistent result. Global secondary indexes support eventually consistent reads only, so do not specify \u003ci\u003eConsistentRead\u003c/i\u003e when querying a global secondary index.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiAttributesToGet",
                        "type": "List1 Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiKeyConditions",
                        "type": "Map Text Condition"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiQueryFilter",
                        "type": "Map Text Condition"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiExclusiveStartKey",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiExpressionAttributeNames",
                        "type": "Map Text Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiExpressionAttributeValues",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "name": "QueryInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiIndexName",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiSelect",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiLimit",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiConsistentRead",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiConditionalOperator",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiScanIndexForward",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiReturnConsumedCapacity",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiProjectionExpression",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "qiFilterExpression",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "ctoTableDescription",
                    "type": "Maybe TableDescription"
                },
                "wrapper": false,
                "name": "CreateTableOutput",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.DynamoDB.CreateTable",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "name": "CreateTable",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eCreateTable\u003c/i\u003e operation adds a new table to your account. In an AWS account, table names must be unique within each region. That is, you can have two tables with same name if you create the tables in different regions.\u003c/p\u003e \u003cp\u003e\u003ci\u003eCreateTable\u003c/i\u003e is an asynchronous operation. Upon receiving a \u003ci\u003eCreateTable\u003c/i\u003e request, DynamoDB immediately returns a response with a \u003ci\u003eTableStatus\u003c/i\u003e of \u003ccode\u003eCREATING\u003c/code\u003e. After the table is created, DynamoDB sets the \u003ci\u003eTableStatus\u003c/i\u003e to \u003ccode\u003eACTIVE\u003c/code\u003e. You can perform read and write operations only on an \u003ccode\u003eACTIVE\u003c/code\u003e table. \u003c/p\u003e \u003cp\u003eIf you want to create multiple tables with secondary indexes on them, you must create them sequentially. Only one table with secondary indexes can be in the \u003ccode\u003eCREATING\u003c/code\u003e state at any given time.\u003c/p\u003e \u003cp\u003eYou can use the \u003ci\u003eDescribeTable\u003c/i\u003e API to check the table status.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ctiAttributeDefinitions",
                        "type": "List AttributeDefinition"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ctiTableName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ctiKeySchema",
                        "type": "List1 KeySchemaElement"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ctiLocalSecondaryIndexes",
                        "type": "List LocalSecondaryIndex"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ctiGlobalSecondaryIndexes",
                        "type": "List GlobalSecondaryIndex"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ctiProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "name": "CreateTableInput",
                "type": "record",
                "optional": []
            }
        }
    ]
}