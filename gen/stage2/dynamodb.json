{
    "service": {
        "signature": "V4",
        "checksum": "sha256",
        "abbrev": "DynamoDB",
        "error": "JSONError",
        "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/Welcome.html",
        "namespace": "Network.AWS.DynamoDB",
        "protocol": "json",
        "imports": [
            "Network.AWS.DynamoDB.BatchGetItem",
            "Network.AWS.DynamoDB.BatchWriteItem",
            "Network.AWS.DynamoDB.CreateTable",
            "Network.AWS.DynamoDB.DeleteItem",
            "Network.AWS.DynamoDB.DeleteTable",
            "Network.AWS.DynamoDB.DescribeTable",
            "Network.AWS.DynamoDB.GetItem",
            "Network.AWS.DynamoDB.ListTables",
            "Network.AWS.DynamoDB.PutItem",
            "Network.AWS.DynamoDB.Query",
            "Network.AWS.DynamoDB.Scan",
            "Network.AWS.DynamoDB.Types",
            "Network.AWS.DynamoDB.UpdateItem",
            "Network.AWS.DynamoDB.UpdateTable"
        ],
        "name": "Amazon DynamoDB",
        "version": "2012-08-10",
        "documentation": "Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. You can use Amazon DynamoDB to create a database table that can store and retrieve any amount of data, and serve any level of request traffic. Amazon DynamoDB automatically spreads the data and traffic for the table over a sufficient number of servers to handle the request capacity specified by the customer and the amount of data stored, while maintaining consistent and fast performance.",
        "xmlNamespace": "https://dynamodb.amazonaws.com/doc/2012-08-10/",
        "jsonVersion": "1.0",
        "endpoint": "Regional",
        "endpointPrefix": "dynamodb",
        "targetPrefix": "DynamoDB_20120810"
    },
    "cabal": {
        "other": [],
        "library": "amazonka-dynamodb",
        "exposed": [
            "Network.AWS.DynamoDB",
            "Network.AWS.DynamoDB.BatchGetItem",
            "Network.AWS.DynamoDB.BatchWriteItem",
            "Network.AWS.DynamoDB.CreateTable",
            "Network.AWS.DynamoDB.DeleteItem",
            "Network.AWS.DynamoDB.DeleteTable",
            "Network.AWS.DynamoDB.DescribeTable",
            "Network.AWS.DynamoDB.GetItem",
            "Network.AWS.DynamoDB.ListTables",
            "Network.AWS.DynamoDB.PutItem",
            "Network.AWS.DynamoDB.Query",
            "Network.AWS.DynamoDB.Scan",
            "Network.AWS.DynamoDB.Types",
            "Network.AWS.DynamoDB.UpdateItem",
            "Network.AWS.DynamoDB.UpdateTable"
        ],
        "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/Welcome.html",
        "protocol": "json",
        "name": "Amazon DynamoDB",
        "version": "0.0.0",
        "description": "Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. You can use Amazon DynamoDB to create a database table that can store and retrieve any amount of data, and serve any level of request traffic. Amazon DynamoDB automatically spreads the data and traffic for the table over a sufficient number of servers to handle the request capacity specified by the customer and the amount of data stored, while maintaining consistent and fast performance."
    },
    "types": {
        "namespace": "Network.AWS.DynamoDB.Types",
        "types": [
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 15,
                "ctor": "writeRequest",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "wPutRequest",
                        "name": "_wPutRequest",
                        "shape": "PutRequest",
                        "locationName": "PutRequest",
                        "documentation": "\u003cp\u003eA request to perform a \u003ci\u003ePutItem\u003c/i\u003e operation.\u003c/p\u003e",
                        "typeExposed": "Maybe PutRequest",
                        "type": "Maybe PutRequest"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "wDeleteRequest",
                        "name": "_wDeleteRequest",
                        "shape": "DeleteRequest",
                        "locationName": "DeleteRequest",
                        "documentation": "\u003cp\u003eA request to perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation.\u003c/p\u003e",
                        "typeExposed": "Maybe DeleteRequest",
                        "type": "Maybe DeleteRequest"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 14,
                "name": "WriteRequest",
                "locationPad": 14,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "wPutRequest",
                        "name": "_wPutRequest",
                        "shape": "PutRequest",
                        "locationName": "PutRequest",
                        "documentation": "\u003cp\u003eA request to perform a \u003ci\u003ePutItem\u003c/i\u003e operation.\u003c/p\u003e",
                        "typeExposed": "Maybe PutRequest",
                        "type": "Maybe PutRequest"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "wDeleteRequest",
                        "name": "_wDeleteRequest",
                        "shape": "DeleteRequest",
                        "locationName": "DeleteRequest",
                        "documentation": "\u003cp\u003eA request to perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation.\u003c/p\u003e",
                        "typeExposed": "Maybe DeleteRequest",
                        "type": "Maybe DeleteRequest"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "wDeleteRequest",
                        "name": "_wDeleteRequest",
                        "shape": "DeleteRequest",
                        "locationName": "DeleteRequest",
                        "documentation": "\u003cp\u003eA request to perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation.\u003c/p\u003e",
                        "typeExposed": "Maybe DeleteRequest",
                        "type": "Maybe DeleteRequest"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "wPutRequest",
                        "name": "_wPutRequest",
                        "shape": "PutRequest",
                        "locationName": "PutRequest",
                        "documentation": "\u003cp\u003eA request to perform a \u003ci\u003ePutItem\u003c/i\u003e operation.\u003c/p\u003e",
                        "typeExposed": "Maybe PutRequest",
                        "type": "Maybe PutRequest"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "fieldPad": 26,
                "ctor": "provisionedThroughputDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastIncreaseDateTime",
                        "name": "_ptdLastIncreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastIncreaseDateTime",
                        "documentation": "\u003cp\u003eThe date and time of the last provisioned throughput increase for this table.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastDecreaseDateTime",
                        "name": "_ptdLastDecreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastDecreaseDateTime",
                        "documentation": "\u003cp\u003eThe date and time of the last provisioned throughput decrease for this table.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdNumberOfDecreasesToday",
                        "name": "_ptdNumberOfDecreasesToday",
                        "shape": "PositiveLongObject",
                        "locationName": "NumberOfDecreasesToday",
                        "documentation": "\u003cp\u003eThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdReadCapacityUnits",
                        "name": "_ptdReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 \u003ci\u003eReadCapacityUnits\u003c/i\u003e per second provides 100 eventually consistent \u003ci\u003eReadCapacityUnits\u003c/i\u003e per second.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdWriteCapacityUnits",
                        "name": "_ptdWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of writes consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 23,
                "name": "ProvisionedThroughputDescription",
                "locationPad": 23,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastIncreaseDateTime",
                        "name": "_ptdLastIncreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastIncreaseDateTime",
                        "documentation": "\u003cp\u003eThe date and time of the last provisioned throughput increase for this table.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastDecreaseDateTime",
                        "name": "_ptdLastDecreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastDecreaseDateTime",
                        "documentation": "\u003cp\u003eThe date and time of the last provisioned throughput decrease for this table.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdNumberOfDecreasesToday",
                        "name": "_ptdNumberOfDecreasesToday",
                        "shape": "PositiveLongObject",
                        "locationName": "NumberOfDecreasesToday",
                        "documentation": "\u003cp\u003eThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdReadCapacityUnits",
                        "name": "_ptdReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 \u003ci\u003eReadCapacityUnits\u003c/i\u003e per second provides 100 eventually consistent \u003ci\u003eReadCapacityUnits\u003c/i\u003e per second.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdWriteCapacityUnits",
                        "name": "_ptdWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of writes consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastDecreaseDateTime",
                        "name": "_ptdLastDecreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastDecreaseDateTime",
                        "documentation": "\u003cp\u003eThe date and time of the last provisioned throughput decrease for this table.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastIncreaseDateTime",
                        "name": "_ptdLastIncreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastIncreaseDateTime",
                        "documentation": "\u003cp\u003eThe date and time of the last provisioned throughput increase for this table.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdNumberOfDecreasesToday",
                        "name": "_ptdNumberOfDecreasesToday",
                        "shape": "PositiveLongObject",
                        "locationName": "NumberOfDecreasesToday",
                        "documentation": "\u003cp\u003eThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdReadCapacityUnits",
                        "name": "_ptdReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 \u003ci\u003eReadCapacityUnits\u003c/i\u003e per second provides 100 eventually consistent \u003ci\u003eReadCapacityUnits\u003c/i\u003e per second.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdWriteCapacityUnits",
                        "name": "_ptdWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of writes consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Hash": "HASH",
                    "Range": "RANGE"
                },
                "valuePad": 6,
                "name": "KeyType",
                "type": "nullary",
                "branchPad": 5
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 7,
                "ctor": "attributeValue",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avS",
                        "name": "_avS",
                        "shape": "StringAttributeValue",
                        "locationName": "S",
                        "documentation": "\u003cp\u003eA String data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avN",
                        "name": "_avN",
                        "shape": "NumberAttributeValue",
                        "locationName": "N",
                        "documentation": "\u003cp\u003eA Number data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avB",
                        "name": "_avB",
                        "shape": "BinaryAttributeValue",
                        "locationName": "B",
                        "documentation": "\u003cp\u003eA Binary data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Base64",
                        "type": "Maybe Base64"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avSS",
                        "name": "_avSS",
                        "shape": "StringSetAttributeValue",
                        "locationName": "SS",
                        "documentation": "\u003cp\u003eA String Set data type.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"SS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avNS",
                        "name": "_avNS",
                        "shape": "NumberSetAttributeValue",
                        "locationName": "NS",
                        "documentation": "\u003cp\u003eA Number Set data type.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"NS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avBS",
                        "name": "_avBS",
                        "shape": "BinarySetAttributeValue",
                        "locationName": "BS",
                        "documentation": "\u003cp\u003eA Binary Set data type.\u003c/p\u003e",
                        "typeExposed": "[Base64]",
                        "type": "List \"BS\" Base64"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avM",
                        "name": "_avM",
                        "shape": "MapAttributeValue",
                        "locationName": "M",
                        "documentation": "\u003cp\u003eA Map of attribute values.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avL",
                        "name": "_avL",
                        "shape": "ListAttributeValue",
                        "locationName": "L",
                        "documentation": "\u003cp\u003eA List of attribute values.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"L\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avNULL",
                        "name": "_avNULL",
                        "shape": "NullAttributeValue",
                        "locationName": "NULL",
                        "documentation": "\u003cp\u003eA Null data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avBOOL",
                        "name": "_avBOOL",
                        "shape": "BooleanAttributeValue",
                        "locationName": "BOOL",
                        "documentation": "\u003cp\u003eA Boolean data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 5,
                "name": "AttributeValue",
                "locationPad": 5,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avS",
                        "name": "_avS",
                        "shape": "StringAttributeValue",
                        "locationName": "S",
                        "documentation": "\u003cp\u003eA String data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avN",
                        "name": "_avN",
                        "shape": "NumberAttributeValue",
                        "locationName": "N",
                        "documentation": "\u003cp\u003eA Number data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avB",
                        "name": "_avB",
                        "shape": "BinaryAttributeValue",
                        "locationName": "B",
                        "documentation": "\u003cp\u003eA Binary data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Base64",
                        "type": "Maybe Base64"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avSS",
                        "name": "_avSS",
                        "shape": "StringSetAttributeValue",
                        "locationName": "SS",
                        "documentation": "\u003cp\u003eA String Set data type.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"SS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avNS",
                        "name": "_avNS",
                        "shape": "NumberSetAttributeValue",
                        "locationName": "NS",
                        "documentation": "\u003cp\u003eA Number Set data type.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"NS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avBS",
                        "name": "_avBS",
                        "shape": "BinarySetAttributeValue",
                        "locationName": "BS",
                        "documentation": "\u003cp\u003eA Binary Set data type.\u003c/p\u003e",
                        "typeExposed": "[Base64]",
                        "type": "List \"BS\" Base64"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avM",
                        "name": "_avM",
                        "shape": "MapAttributeValue",
                        "locationName": "M",
                        "documentation": "\u003cp\u003eA Map of attribute values.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avL",
                        "name": "_avL",
                        "shape": "ListAttributeValue",
                        "locationName": "L",
                        "documentation": "\u003cp\u003eA List of attribute values.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"L\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avNULL",
                        "name": "_avNULL",
                        "shape": "NullAttributeValue",
                        "locationName": "NULL",
                        "documentation": "\u003cp\u003eA Null data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avBOOL",
                        "name": "_avBOOL",
                        "shape": "BooleanAttributeValue",
                        "locationName": "BOOL",
                        "documentation": "\u003cp\u003eA Boolean data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avB",
                        "name": "_avB",
                        "shape": "BinaryAttributeValue",
                        "locationName": "B",
                        "documentation": "\u003cp\u003eA Binary data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Base64",
                        "type": "Maybe Base64"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avBOOL",
                        "name": "_avBOOL",
                        "shape": "BooleanAttributeValue",
                        "locationName": "BOOL",
                        "documentation": "\u003cp\u003eA Boolean data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avBS",
                        "name": "_avBS",
                        "shape": "BinarySetAttributeValue",
                        "locationName": "BS",
                        "documentation": "\u003cp\u003eA Binary Set data type.\u003c/p\u003e",
                        "typeExposed": "[Base64]",
                        "type": "List \"BS\" Base64"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avL",
                        "name": "_avL",
                        "shape": "ListAttributeValue",
                        "locationName": "L",
                        "documentation": "\u003cp\u003eA List of attribute values.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"L\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avM",
                        "name": "_avM",
                        "shape": "MapAttributeValue",
                        "locationName": "M",
                        "documentation": "\u003cp\u003eA Map of attribute values.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avN",
                        "name": "_avN",
                        "shape": "NumberAttributeValue",
                        "locationName": "N",
                        "documentation": "\u003cp\u003eA Number data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avNS",
                        "name": "_avNS",
                        "shape": "NumberSetAttributeValue",
                        "locationName": "NS",
                        "documentation": "\u003cp\u003eA Number Set data type.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"NS\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avNULL",
                        "name": "_avNULL",
                        "shape": "NullAttributeValue",
                        "locationName": "NULL",
                        "documentation": "\u003cp\u003eA Null data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avS",
                        "name": "_avS",
                        "shape": "StringAttributeValue",
                        "locationName": "S",
                        "documentation": "\u003cp\u003eA String data type.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "avSS",
                        "name": "_avSS",
                        "shape": "StringSetAttributeValue",
                        "locationName": "SS",
                        "documentation": "\u003cp\u003eA String Set data type.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"SS\" Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Deleting": "DELETING",
                    "Updating": "UPDATING",
                    "Creating": "CREATING",
                    "Active": "ACTIVE"
                },
                "valuePad": 9,
                "name": "IndexStatus",
                "type": "nullary",
                "branchPad": 8
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "fieldPad": 21,
                "ctor": "provisionedThroughput",
                "contents": [
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ptReadCapacityUnits",
                        "name": "_ptReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    },
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ptWriteCapacityUnits",
                        "name": "_ptWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of writes consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ptReadCapacityUnits",
                        "name": "_ptReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    },
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ptWriteCapacityUnits",
                        "name": "_ptWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of writes consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    }
                ],
                "contentPad": 19,
                "name": "ProvisionedThroughput",
                "locationPad": 19,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ptReadCapacityUnits",
                        "name": "_ptReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    },
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ptWriteCapacityUnits",
                        "name": "_ptWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "\u003cp\u003eThe maximum number of writes consumed per second before DynamoDB returns a \u003ci\u003eThrottlingException\u003c/i\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput\"\u003eSpecifying Read and Write Requirements\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "TSUpdating": "UPDATING",
                    "TSDeleting": "DELETING",
                    "TSActive": "ACTIVE",
                    "TSCreating": "CREATING"
                },
                "valuePad": 9,
                "name": "TableStatus",
                "type": "nullary",
                "branchPad": 10
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Include": "INCLUDE",
                    "All": "ALL",
                    "KeysOnly": "KEYS_ONLY"
                },
                "valuePad": 10,
                "name": "ProjectionType",
                "type": "nullary",
                "branchPad": 8
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 25,
                "ctor": "tableDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdAttributeDefinitions",
                        "name": "_tdAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "\u003cp\u003eAn array of \u003ci\u003eAttributeDefinition\u003c/i\u003e objects. Each of these objects describes one attribute in the table and index key schema.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eAttributeDefinition\u003c/i\u003e object in this array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeType\u003c/i\u003e - The data type for the attribute.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableName",
                        "name": "_tdTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "tdKeySchema",
                        "name": "_tdKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe primary key structure for the table. Each \u003ci\u003eKeySchemaElement\u003c/i\u003e consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeyType\u003c/i\u003e - The key type for the attribute. Can be either \u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableStatus",
                        "name": "_tdTableStatus",
                        "shape": "TableStatus",
                        "locationName": "TableStatus",
                        "documentation": "\u003cp\u003eThe current state of the table:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The table is being created, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The table is being updated, as the result of an \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The table is being deleted, as the result of a \u003ci\u003eDeleteTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The table is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdCreationDateTime",
                        "name": "_tdCreationDateTime",
                        "shape": "Date",
                        "locationName": "CreationDateTime",
                        "documentation": "\u003cp\u003eThe date and time when the table was created, in \u003ca href=\"http://www.epochconverter.com/\"\u003eUNIX epoch time\u003c/a\u003e format.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdProvisionedThroughput",
                        "name": "_tdProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": "\u003cp\u003eThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\u003c/p\u003e",
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableSizeBytes",
                        "name": "_tdTableSizeBytes",
                        "shape": "Long",
                        "locationName": "TableSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdItemCount",
                        "name": "_tdItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdLocalSecondaryIndexes",
                        "name": "_tdLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexDescriptionList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eRepresents one or more local secondary indexes on the table. Each index is scoped to a given hash key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the local secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexSizeBytes\u003c/i\u003e - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCount\u003c/i\u003e - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
                        "typeExposed": "[LocalSecondaryIndexDescription]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdGlobalSecondaryIndexes",
                        "name": "_tdGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexDescriptionList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe global secondary indexes, if any, on the table. Each index is scoped to a given hash key value. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexSizeBytes\u003c/i\u003e - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexStatus\u003c/i\u003e - The current status of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The index is being created.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The index is being updated.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The index is being deleted.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCount\u003c/i\u003e - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProvisionedThroughput\u003c/i\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
                        "typeExposed": "[GlobalSecondaryIndexDescription]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndexDescription"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "tdKeySchema",
                        "name": "_tdKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe primary key structure for the table. Each \u003ci\u003eKeySchemaElement\u003c/i\u003e consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeyType\u003c/i\u003e - The key type for the attribute. Can be either \u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    }
                ],
                "contentPad": 23,
                "name": "TableDescription",
                "locationPad": 23,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdAttributeDefinitions",
                        "name": "_tdAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "\u003cp\u003eAn array of \u003ci\u003eAttributeDefinition\u003c/i\u003e objects. Each of these objects describes one attribute in the table and index key schema.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eAttributeDefinition\u003c/i\u003e object in this array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeType\u003c/i\u003e - The data type for the attribute.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableName",
                        "name": "_tdTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableStatus",
                        "name": "_tdTableStatus",
                        "shape": "TableStatus",
                        "locationName": "TableStatus",
                        "documentation": "\u003cp\u003eThe current state of the table:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The table is being created, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The table is being updated, as the result of an \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The table is being deleted, as the result of a \u003ci\u003eDeleteTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The table is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdCreationDateTime",
                        "name": "_tdCreationDateTime",
                        "shape": "Date",
                        "locationName": "CreationDateTime",
                        "documentation": "\u003cp\u003eThe date and time when the table was created, in \u003ca href=\"http://www.epochconverter.com/\"\u003eUNIX epoch time\u003c/a\u003e format.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdProvisionedThroughput",
                        "name": "_tdProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": "\u003cp\u003eThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\u003c/p\u003e",
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableSizeBytes",
                        "name": "_tdTableSizeBytes",
                        "shape": "Long",
                        "locationName": "TableSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdItemCount",
                        "name": "_tdItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdLocalSecondaryIndexes",
                        "name": "_tdLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexDescriptionList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eRepresents one or more local secondary indexes on the table. Each index is scoped to a given hash key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the local secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexSizeBytes\u003c/i\u003e - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCount\u003c/i\u003e - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
                        "typeExposed": "[LocalSecondaryIndexDescription]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdGlobalSecondaryIndexes",
                        "name": "_tdGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexDescriptionList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe global secondary indexes, if any, on the table. Each index is scoped to a given hash key value. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexSizeBytes\u003c/i\u003e - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexStatus\u003c/i\u003e - The current status of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The index is being created.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The index is being updated.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The index is being deleted.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCount\u003c/i\u003e - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProvisionedThroughput\u003c/i\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
                        "typeExposed": "[GlobalSecondaryIndexDescription]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndexDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdAttributeDefinitions",
                        "name": "_tdAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "\u003cp\u003eAn array of \u003ci\u003eAttributeDefinition\u003c/i\u003e objects. Each of these objects describes one attribute in the table and index key schema.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eAttributeDefinition\u003c/i\u003e object in this array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeType\u003c/i\u003e - The data type for the attribute.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdCreationDateTime",
                        "name": "_tdCreationDateTime",
                        "shape": "Date",
                        "locationName": "CreationDateTime",
                        "documentation": "\u003cp\u003eThe date and time when the table was created, in \u003ca href=\"http://www.epochconverter.com/\"\u003eUNIX epoch time\u003c/a\u003e format.\u003c/p\u003e",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe RFC822"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdGlobalSecondaryIndexes",
                        "name": "_tdGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexDescriptionList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe global secondary indexes, if any, on the table. Each index is scoped to a given hash key value. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexSizeBytes\u003c/i\u003e - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexStatus\u003c/i\u003e - The current status of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The index is being created.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The index is being updated.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The index is being deleted.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCount\u003c/i\u003e - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProvisionedThroughput\u003c/i\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases. \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
                        "typeExposed": "[GlobalSecondaryIndexDescription]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdItemCount",
                        "name": "_tdItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "tdKeySchema",
                        "name": "_tdKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe primary key structure for the table. Each \u003ci\u003eKeySchemaElement\u003c/i\u003e consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of the attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeyType\u003c/i\u003e - The key type for the attribute. Can be either \u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "tdLocalSecondaryIndexes",
                        "name": "_tdLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexDescriptionList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eRepresents one or more local secondary indexes on the table. Each index is scoped to a given hash key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the local secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexSizeBytes\u003c/i\u003e - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCount\u003c/i\u003e - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf the table is in the \u003ccode\u003eDELETING\u003c/code\u003e state, no information about indexes will be returned.\u003c/p\u003e",
                        "typeExposed": "[LocalSecondaryIndexDescription]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdProvisionedThroughput",
                        "name": "_tdProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": "\u003cp\u003eThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\u003c/p\u003e",
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableName",
                        "name": "_tdTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableSizeBytes",
                        "name": "_tdTableSizeBytes",
                        "shape": "Long",
                        "locationName": "TableSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "tdTableStatus",
                        "name": "_tdTableStatus",
                        "shape": "TableStatus",
                        "locationName": "TableStatus",
                        "documentation": "\u003cp\u003eThe current state of the table:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The table is being created, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The table is being updated, as the result of an \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The table is being deleted, as the result of a \u003ci\u003eDeleteTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The table is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 28,
                "ctor": "keysAndAttributes",
                "contents": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaKeys",
                        "name": "_kaaKeys",
                        "shape": "KeyList",
                        "locationName": "Keys",
                        "documentation": "\u003cp\u003eThe primary key attribute values that define the items and the attributes associated with the items.\u003c/p\u003e",
                        "typeExposed": "NonEmpty (HashMap Text AttributeValue)",
                        "type": "List1 \"Keys\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaAttributesToGet",
                        "name": "_kaaAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table or index. If no attribute names are specified then all attributes will be returned. If any of the specified attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaConsistentRead",
                        "name": "_kaaConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eThe consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaProjectionExpression",
                        "name": "_kaaProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaExpressionAttributeNames",
                        "name": "_kaaExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaKeys",
                        "name": "_kaaKeys",
                        "shape": "KeyList",
                        "locationName": "Keys",
                        "documentation": "\u003cp\u003eThe primary key attribute values that define the items and the attributes associated with the items.\u003c/p\u003e",
                        "typeExposed": "NonEmpty (HashMap Text AttributeValue)",
                        "type": "List1 \"Keys\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaAttributesToGet",
                        "name": "_kaaAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table or index. If no attribute names are specified then all attributes will be returned. If any of the specified attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "contentPad": 25,
                "name": "KeysAndAttributes",
                "locationPad": 25,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaConsistentRead",
                        "name": "_kaaConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eThe consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaProjectionExpression",
                        "name": "_kaaProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaExpressionAttributeNames",
                        "name": "_kaaExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaAttributesToGet",
                        "name": "_kaaAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table or index. If no attribute names are specified then all attributes will be returned. If any of the specified attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaConsistentRead",
                        "name": "_kaaConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eThe consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaExpressionAttributeNames",
                        "name": "_kaaExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaKeys",
                        "name": "_kaaKeys",
                        "shape": "KeyList",
                        "locationName": "Keys",
                        "documentation": "\u003cp\u003eThe primary key attribute values that define the items and the attributes associated with the items.\u003c/p\u003e",
                        "typeExposed": "NonEmpty (HashMap Text AttributeValue)",
                        "type": "List1 \"Keys\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaProjectionExpression",
                        "name": "_kaaProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "None": "NONE",
                    "Total": "TOTAL",
                    "Indexes": "INDEXES"
                },
                "valuePad": 8,
                "name": "ReturnConsumedCapacity",
                "type": "nullary",
                "branchPad": 7
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "RICMNone": "NONE",
                    "RICMSize": "SIZE"
                },
                "valuePad": 5,
                "name": "ReturnItemCollectionMetrics",
                "type": "nullary",
                "branchPad": 8
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 10,
                "ctor": "attributeValueUpdate",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avuValue",
                        "name": "_avuValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avuAction",
                        "name": "_avuAction",
                        "shape": "AttributeAction",
                        "locationName": "Action",
                        "documentation": "\u003cp\u003eSpecifies how to perform the update. Valid values are \u003ccode\u003ePUT\u003c/code\u003e (default), \u003ccode\u003eDELETE\u003c/code\u003e, and \u003ccode\u003eADD\u003c/code\u003e. The behavior depends on whether the specified primary key already exists in the table.\u003c/p\u003e \u003cp\u003e \u003cb\u003eIf an item with the specified \u003ci\u003eKey\u003c/i\u003e is found in the table:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type.\u003c/p\u003e \u003cp\u003eIf a \u003ci\u003eset\u003c/i\u003e of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ci\u003eDELETE\u003c/i\u003e action specified \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then the \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set, and if the \u003ci\u003eValue\u003c/i\u003e is also a set, then the \u003ci\u003eValue\u003c/i\u003e is added to the existing set. (This is a \u003ci\u003eset\u003c/i\u003e operation, not mathematical addition.) For example, if the attribute value was the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ci\u003eValue\u003c/i\u003e must also be a set of strings. The same holds true for number sets and binary sets.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThis action is only valid for an existing attribute whose data type is number or is a set. Do not use \u003ccode\u003eADD\u003c/code\u003e for any other data types.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e \u003cb\u003eIf no item with the specified \u003ci\u003eKey\u003c/i\u003e is found:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - DynamoDB creates a new item with the specified primary key, and then adds the attribute. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Nothing happens; there is no attribute to delete.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 7,
                "name": "AttributeValueUpdate",
                "locationPad": 7,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avuValue",
                        "name": "_avuValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avuAction",
                        "name": "_avuAction",
                        "shape": "AttributeAction",
                        "locationName": "Action",
                        "documentation": "\u003cp\u003eSpecifies how to perform the update. Valid values are \u003ccode\u003ePUT\u003c/code\u003e (default), \u003ccode\u003eDELETE\u003c/code\u003e, and \u003ccode\u003eADD\u003c/code\u003e. The behavior depends on whether the specified primary key already exists in the table.\u003c/p\u003e \u003cp\u003e \u003cb\u003eIf an item with the specified \u003ci\u003eKey\u003c/i\u003e is found in the table:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type.\u003c/p\u003e \u003cp\u003eIf a \u003ci\u003eset\u003c/i\u003e of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ci\u003eDELETE\u003c/i\u003e action specified \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then the \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set, and if the \u003ci\u003eValue\u003c/i\u003e is also a set, then the \u003ci\u003eValue\u003c/i\u003e is added to the existing set. (This is a \u003ci\u003eset\u003c/i\u003e operation, not mathematical addition.) For example, if the attribute value was the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ci\u003eValue\u003c/i\u003e must also be a set of strings. The same holds true for number sets and binary sets.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThis action is only valid for an existing attribute whose data type is number or is a set. Do not use \u003ccode\u003eADD\u003c/code\u003e for any other data types.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e \u003cb\u003eIf no item with the specified \u003ci\u003eKey\u003c/i\u003e is found:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - DynamoDB creates a new item with the specified primary key, and then adds the attribute. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Nothing happens; there is no attribute to delete.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avuAction",
                        "name": "_avuAction",
                        "shape": "AttributeAction",
                        "locationName": "Action",
                        "documentation": "\u003cp\u003eSpecifies how to perform the update. Valid values are \u003ccode\u003ePUT\u003c/code\u003e (default), \u003ccode\u003eDELETE\u003c/code\u003e, and \u003ccode\u003eADD\u003c/code\u003e. The behavior depends on whether the specified primary key already exists in the table.\u003c/p\u003e \u003cp\u003e \u003cb\u003eIf an item with the specified \u003ci\u003eKey\u003c/i\u003e is found in the table:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value's data type.\u003c/p\u003e \u003cp\u003eIf a \u003ci\u003eset\u003c/i\u003e of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ci\u003eDELETE\u003c/i\u003e action specified \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then the \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set, and if the \u003ci\u003eValue\u003c/i\u003e is also a set, then the \u003ci\u003eValue\u003c/i\u003e is added to the existing set. (This is a \u003ci\u003eset\u003c/i\u003e operation, not mathematical addition.) For example, if the attribute value was the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value would be \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ci\u003eValue\u003c/i\u003e must also be a set of strings. The same holds true for number sets and binary sets.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThis action is only valid for an existing attribute whose data type is number or is a set. Do not use \u003ccode\u003eADD\u003c/code\u003e for any other data types.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003e \u003cb\u003eIf no item with the specified \u003ci\u003eKey\u003c/i\u003e is found:\u003c/b\u003e \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - DynamoDB creates a new item with the specified primary key, and then adds the attribute. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Nothing happens; there is no attribute to delete.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "avuValue",
                        "name": "_avuValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 22,
                "ctor": "expectedAttributeValue",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavValue",
                        "name": "_eavValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavExists",
                        "name": "_eavExists",
                        "shape": "BooleanObject",
                        "locationName": "Exists",
                        "documentation": "\u003cp\u003eCauses DynamoDB to evaluate the value before attempting a conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a \u003ci\u003eConditionalCheckFailedException\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a \u003ci\u003eConditionalCheckFailedException\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe default setting for \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e. If you supply a \u003ci\u003eValue\u003c/i\u003e all by itself, DynamoDB assumes the attribute exists: You don't have to set \u003ci\u003eExists\u003c/i\u003e to \u003ccode\u003etrue\u003c/code\u003e, because it is implied.\u003c/p\u003e \u003cp\u003eDynamoDB returns a \u003ci\u003eValidationException\u003c/i\u003e if:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e but there is no \u003ci\u003eValue\u003c/i\u003e to check. (You expect a value to exist, but don't specify what that value is.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e but you also specify a \u003ci\u003eValue\u003c/i\u003e. (You cannot expect an attribute to have a value, while also expecting it not to exist.)\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavComparisonOperator",
                        "name": "_eavComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "\u003cp\u003eA comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "eavAttributeValueList",
                        "name": "_eavAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 19,
                "name": "ExpectedAttributeValue",
                "locationPad": 19,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavValue",
                        "name": "_eavValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavExists",
                        "name": "_eavExists",
                        "shape": "BooleanObject",
                        "locationName": "Exists",
                        "documentation": "\u003cp\u003eCauses DynamoDB to evaluate the value before attempting a conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a \u003ci\u003eConditionalCheckFailedException\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a \u003ci\u003eConditionalCheckFailedException\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe default setting for \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e. If you supply a \u003ci\u003eValue\u003c/i\u003e all by itself, DynamoDB assumes the attribute exists: You don't have to set \u003ci\u003eExists\u003c/i\u003e to \u003ccode\u003etrue\u003c/code\u003e, because it is implied.\u003c/p\u003e \u003cp\u003eDynamoDB returns a \u003ci\u003eValidationException\u003c/i\u003e if:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e but there is no \u003ci\u003eValue\u003c/i\u003e to check. (You expect a value to exist, but don't specify what that value is.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e but you also specify a \u003ci\u003eValue\u003c/i\u003e. (You cannot expect an attribute to have a value, while also expecting it not to exist.)\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavComparisonOperator",
                        "name": "_eavComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "\u003cp\u003eA comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "eavAttributeValueList",
                        "name": "_eavAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "eavAttributeValueList",
                        "name": "_eavAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavComparisonOperator",
                        "name": "_eavComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "\u003cp\u003eA comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavExists",
                        "name": "_eavExists",
                        "shape": "BooleanObject",
                        "locationName": "Exists",
                        "documentation": "\u003cp\u003eCauses DynamoDB to evaluate the value before attempting a conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a \u003ci\u003eConditionalCheckFailedException\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a \u003ci\u003eConditionalCheckFailedException\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe default setting for \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e. If you supply a \u003ci\u003eValue\u003c/i\u003e all by itself, DynamoDB assumes the attribute exists: You don't have to set \u003ci\u003eExists\u003c/i\u003e to \u003ccode\u003etrue\u003c/code\u003e, because it is implied.\u003c/p\u003e \u003cp\u003eDynamoDB returns a \u003ci\u003eValidationException\u003c/i\u003e if:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e but there is no \u003ci\u003eValue\u003c/i\u003e to check. (You expect a value to exist, but don't specify what that value is.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e but you also specify a \u003ci\u003eValue\u003c/i\u003e. (You cannot expect an attribute to have a value, while also expecting it not to exist.)\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "eavValue",
                        "name": "_eavValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "fieldPad": 16,
                "ctor": "attributeDefinition",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeName",
                        "name": "_adAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "\u003cp\u003eA name for the attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeType",
                        "name": "_adAttributeType",
                        "shape": "ScalarAttributeType",
                        "locationName": "AttributeType",
                        "documentation": "\u003cp\u003eThe data type for the attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeName",
                        "name": "_adAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "\u003cp\u003eA name for the attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeType",
                        "name": "_adAttributeType",
                        "shape": "ScalarAttributeType",
                        "locationName": "AttributeType",
                        "documentation": "\u003cp\u003eThe data type for the attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "contentPad": 14,
                "name": "AttributeDefinition",
                "locationPad": 14,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeName",
                        "name": "_adAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "\u003cp\u003eA name for the attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeType",
                        "name": "_adAttributeType",
                        "shape": "ScalarAttributeType",
                        "locationName": "AttributeType",
                        "documentation": "\u003cp\u003eThe data type for the attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Eq": "EQ",
                    "Ge": "GE",
                    "In'": "IN",
                    "Gt": "GT",
                    "Null": "NULL",
                    "Ne": "NE",
                    "NotContains": "NOT_CONTAINS",
                    "Between": "BETWEEN",
                    "Lt": "LT",
                    "Contains": "CONTAINS",
                    "BeginsWith": "BEGINS_WITH",
                    "NotNull": "NOT_NULL",
                    "Le": "LE"
                },
                "valuePad": 13,
                "name": "ComparisonOperator",
                "type": "nullary",
                "branchPad": 11
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "RVAllOld": "ALL_OLD",
                    "RVUpdatedNew": "UPDATED_NEW",
                    "RVUpdatedOld": "UPDATED_OLD",
                    "RVNone": "NONE",
                    "RVAllNew": "ALL_NEW"
                },
                "valuePad": 12,
                "name": "ReturnValue",
                "type": "nullary",
                "branchPad": 12
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 14,
                "ctor": "localSecondaryIndex",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiIndexName",
                        "name": "_lsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the local secondary index. The name must be unique among all other indexes on this table.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiKeySchema",
                        "name": "_lsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiProjection",
                        "name": "_lsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiIndexName",
                        "name": "_lsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the local secondary index. The name must be unique among all other indexes on this table.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiKeySchema",
                        "name": "_lsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiProjection",
                        "name": "_lsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    }
                ],
                "contentPad": 11,
                "name": "LocalSecondaryIndex",
                "locationPad": 11,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiIndexName",
                        "name": "_lsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the local secondary index. The name must be unique among all other indexes on this table.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiKeySchema",
                        "name": "_lsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiProjection",
                        "name": "_lsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 26,
                "ctor": "globalSecondaryIndexDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexName",
                        "name": "_gsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsidKeySchema",
                        "name": "_gsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for the global secondary index, consisting of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProjection",
                        "name": "_gsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexStatus",
                        "name": "_gsidIndexStatus",
                        "shape": "IndexStatus",
                        "locationName": "IndexStatus",
                        "documentation": "\u003cp\u003eThe current state of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The index is being created, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e or \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The index is being updated, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e or \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The index is being deleted, as the result of a \u003ci\u003eDeleteTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProvisionedThroughput",
                        "name": "_gsidProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexSizeBytes",
                        "name": "_gsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidItemCount",
                        "name": "_gsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsidKeySchema",
                        "name": "_gsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for the global secondary index, consisting of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    }
                ],
                "contentPad": 22,
                "name": "GlobalSecondaryIndexDescription",
                "locationPad": 22,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexName",
                        "name": "_gsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProjection",
                        "name": "_gsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexStatus",
                        "name": "_gsidIndexStatus",
                        "shape": "IndexStatus",
                        "locationName": "IndexStatus",
                        "documentation": "\u003cp\u003eThe current state of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The index is being created, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e or \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The index is being updated, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e or \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The index is being deleted, as the result of a \u003ci\u003eDeleteTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProvisionedThroughput",
                        "name": "_gsidProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexSizeBytes",
                        "name": "_gsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidItemCount",
                        "name": "_gsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexName",
                        "name": "_gsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexSizeBytes",
                        "name": "_gsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexStatus",
                        "name": "_gsidIndexStatus",
                        "shape": "IndexStatus",
                        "locationName": "IndexStatus",
                        "documentation": "\u003cp\u003eThe current state of the global secondary index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCREATING\u003c/i\u003e - The index is being created, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e or \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eUPDATING\u003c/i\u003e - The index is being updated, as the result of a \u003ci\u003eCreateTable\u003c/i\u003e or \u003ci\u003eUpdateTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDELETING\u003c/i\u003e - The index is being deleted, as the result of a \u003ci\u003eDeleteTable\u003c/i\u003e operation.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eACTIVE\u003c/i\u003e - The index is ready for use.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidItemCount",
                        "name": "_gsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsidKeySchema",
                        "name": "_gsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for the global secondary index, consisting of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProjection",
                        "name": "_gsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProvisionedThroughput",
                        "name": "_gsidProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 23,
                "ctor": "itemCollectionMetrics",
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "icmItemCollectionKey",
                        "name": "_icmItemCollectionKey",
                        "shape": "ItemCollectionKeyAttributeMap",
                        "locationName": "ItemCollectionKey",
                        "documentation": "\u003cp\u003eThe hash key value of the item collection. This value is the same as the hash key of the item.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "icmSizeEstimateRangeGB",
                        "name": "_icmSizeEstimateRangeGB",
                        "shape": "ItemCollectionSizeEstimateRange",
                        "locationName": "SizeEstimateRangeGB",
                        "documentation": "\u003cp\u003eAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e",
                        "typeExposed": "[Double]",
                        "type": "List \"SizeEstimateRangeGB\" Double"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 20,
                "name": "ItemCollectionMetrics",
                "locationPad": 20,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "icmItemCollectionKey",
                        "name": "_icmItemCollectionKey",
                        "shape": "ItemCollectionKeyAttributeMap",
                        "locationName": "ItemCollectionKey",
                        "documentation": "\u003cp\u003eThe hash key value of the item collection. This value is the same as the hash key of the item.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "icmSizeEstimateRangeGB",
                        "name": "_icmSizeEstimateRangeGB",
                        "shape": "ItemCollectionSizeEstimateRange",
                        "locationName": "SizeEstimateRangeGB",
                        "documentation": "\u003cp\u003eAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e",
                        "typeExposed": "[Double]",
                        "type": "List \"SizeEstimateRangeGB\" Double"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "icmItemCollectionKey",
                        "name": "_icmItemCollectionKey",
                        "shape": "ItemCollectionKeyAttributeMap",
                        "locationName": "ItemCollectionKey",
                        "documentation": "\u003cp\u003eThe hash key value of the item collection. This value is the same as the hash key of the item.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "icmSizeEstimateRangeGB",
                        "name": "_icmSizeEstimateRangeGB",
                        "shape": "ItemCollectionSizeEstimateRange",
                        "locationName": "SizeEstimateRangeGB",
                        "documentation": "\u003cp\u003eAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e",
                        "typeExposed": "[Double]",
                        "type": "List \"SizeEstimateRangeGB\" Double"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "capacity",
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "flattened": false,
                    "required": false,
                    "lens": "cCapacityUnits",
                    "name": "_cCapacityUnits",
                    "shape": "ConsumedCapacityUnits",
                    "locationName": "CapacityUnits",
                    "documentation": "\u003cp\u003eThe total number of capacity units consumed on a table or an index.\u003c/p\u003e",
                    "typeExposed": "Maybe Double",
                    "type": "Maybe Double"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "cCapacityUnits",
                        "name": "_cCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "\u003cp\u003eThe total number of capacity units consumed on a table or an index.\u003c/p\u003e",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 0,
                "name": "Capacity",
                "locationPad": 0,
                "type": "newtype",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "cCapacityUnits",
                        "name": "_cCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "\u003cp\u003eThe total number of capacity units consumed on a table or an index.\u003c/p\u003e",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "cCapacityUnits",
                        "name": "_cCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "\u003cp\u003eThe total number of capacity units consumed on a table or an index.\u003c/p\u003e",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 25,
                "ctor": "consumedCapacity",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTableName",
                        "name": "_ccTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table that was affected by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccCapacityUnits",
                        "name": "_ccCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "\u003cp\u003eThe total number of capacity units consumed by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTable",
                        "name": "_ccTable",
                        "shape": "Capacity",
                        "locationName": "Table",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on the table affected by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Capacity",
                        "type": "Maybe Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ccLocalSecondaryIndexes",
                        "name": "_ccLocalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on each local index affected by the operation.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ccGlobalSecondaryIndexes",
                        "name": "_ccGlobalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on each global index affected by the operation.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 23,
                "name": "ConsumedCapacity",
                "locationPad": 23,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTableName",
                        "name": "_ccTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table that was affected by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccCapacityUnits",
                        "name": "_ccCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "\u003cp\u003eThe total number of capacity units consumed by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTable",
                        "name": "_ccTable",
                        "shape": "Capacity",
                        "locationName": "Table",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on the table affected by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Capacity",
                        "type": "Maybe Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ccLocalSecondaryIndexes",
                        "name": "_ccLocalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on each local index affected by the operation.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ccGlobalSecondaryIndexes",
                        "name": "_ccGlobalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on each global index affected by the operation.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccCapacityUnits",
                        "name": "_ccCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "\u003cp\u003eThe total number of capacity units consumed by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ccGlobalSecondaryIndexes",
                        "name": "_ccGlobalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on each global index affected by the operation.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ccLocalSecondaryIndexes",
                        "name": "_ccLocalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on each local index affected by the operation.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTable",
                        "name": "_ccTable",
                        "shape": "Capacity",
                        "locationName": "Table",
                        "documentation": "\u003cp\u003eThe amount of throughput consumed on the table affected by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Capacity",
                        "type": "Maybe Capacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTableName",
                        "name": "_ccTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table that was affected by the operation.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 25,
                "ctor": "globalSecondaryIndex",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiIndexName",
                        "name": "_gsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index. The name must be unique among all other indexes on this table.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiKeySchema",
                        "name": "_gsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProjection",
                        "name": "_gsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProvisionedThroughput",
                        "name": "_gsiProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiIndexName",
                        "name": "_gsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index. The name must be unique among all other indexes on this table.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiKeySchema",
                        "name": "_gsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProjection",
                        "name": "_gsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProvisionedThroughput",
                        "name": "_gsiProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "contentPad": 22,
                "name": "GlobalSecondaryIndex",
                "locationPad": 22,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiIndexName",
                        "name": "_gsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index. The name must be unique among all other indexes on this table.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiKeySchema",
                        "name": "_gsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProjection",
                        "name": "_gsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProvisionedThroughput",
                        "name": "_gsiProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 19,
                "ctor": "localSecondaryIndexDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexName",
                        "name": "_lsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eRepresents the name of the local secondary index.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsidKeySchema",
                        "name": "_lsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete index key schema, which consists of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidProjection",
                        "name": "_lsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexSizeBytes",
                        "name": "_lsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidItemCount",
                        "name": "_lsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsidKeySchema",
                        "name": "_lsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete index key schema, which consists of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    }
                ],
                "contentPad": 15,
                "name": "LocalSecondaryIndexDescription",
                "locationPad": 15,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexName",
                        "name": "_lsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eRepresents the name of the local secondary index.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidProjection",
                        "name": "_lsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexSizeBytes",
                        "name": "_lsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidItemCount",
                        "name": "_lsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexName",
                        "name": "_lsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eRepresents the name of the local secondary index.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexSizeBytes",
                        "name": "_lsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "\u003cp\u003eThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidItemCount",
                        "name": "_lsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "\u003cp\u003eThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value. \u003c/p\u003e",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "lsidKeySchema",
                        "name": "_lsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eThe complete index key schema, which consists of one or more pairs of attribute names and key types (\u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e).\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidProjection",
                        "name": "_lsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Add": "ADD",
                    "Delete'": "DELETE",
                    "Put": "PUT"
                },
                "valuePad": 7,
                "name": "AttributeAction",
                "type": "nullary",
                "branchPad": 7
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "N": "N",
                    "B": "B",
                    "S": "S"
                },
                "valuePad": 2,
                "name": "ScalarAttributeType",
                "type": "nullary",
                "branchPad": 1
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "fieldPad": 18,
                "ctor": "projection",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pProjectionType",
                        "name": "_pProjectionType",
                        "shape": "ProjectionType",
                        "locationName": "ProjectionType",
                        "documentation": "\u003cp\u003eThe set of attributes that are projected into the index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "pNonKeyAttributes",
                        "name": "_pNonKeyAttributes",
                        "shape": "NonKeyAttributeNameList",
                        "locationName": "NonKeyAttributes",
                        "documentation": "\u003cp\u003eRepresents the non-key attribute names which will be projected into the index.\u003c/p\u003e \u003cp\u003eFor local secondary indexes, the total count of \u003ci\u003eNonKeyAttributes\u003c/i\u003e summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"NonKeyAttributes\" Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "pNonKeyAttributes",
                        "name": "_pNonKeyAttributes",
                        "shape": "NonKeyAttributeNameList",
                        "locationName": "NonKeyAttributes",
                        "documentation": "\u003cp\u003eRepresents the non-key attribute names which will be projected into the index.\u003c/p\u003e \u003cp\u003eFor local secondary indexes, the total count of \u003ci\u003eNonKeyAttributes\u003c/i\u003e summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"NonKeyAttributes\" Text"
                    }
                ],
                "contentPad": 17,
                "name": "Projection",
                "locationPad": 17,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pProjectionType",
                        "name": "_pProjectionType",
                        "shape": "ProjectionType",
                        "locationName": "ProjectionType",
                        "documentation": "\u003cp\u003eThe set of attributes that are projected into the index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "pNonKeyAttributes",
                        "name": "_pNonKeyAttributes",
                        "shape": "NonKeyAttributeNameList",
                        "locationName": "NonKeyAttributes",
                        "documentation": "\u003cp\u003eRepresents the non-key attribute names which will be projected into the index.\u003c/p\u003e \u003cp\u003eFor local secondary indexes, the total count of \u003ci\u003eNonKeyAttributes\u003c/i\u003e summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"NonKeyAttributes\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pProjectionType",
                        "name": "_pProjectionType",
                        "shape": "ProjectionType",
                        "locationName": "ProjectionType",
                        "documentation": "\u003cp\u003eThe set of attributes that are projected into the index:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Count": "COUNT",
                    "AllAttributes": "ALL_ATTRIBUTES",
                    "SpecificAttributes": "SPECIFIC_ATTRIBUTES",
                    "AllProjectedAttributes": "ALL_PROJECTED_ATTRIBUTES"
                },
                "valuePad": 25,
                "name": "Select",
                "type": "nullary",
                "branchPad": 22
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "fieldPad": 17,
                "ctor": "keySchemaElement",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kseAttributeName",
                        "name": "_kseAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "\u003cp\u003eThe name of a key attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kseKeyType",
                        "name": "_kseKeyType",
                        "shape": "KeyType",
                        "locationName": "KeyType",
                        "documentation": "\u003cp\u003eThe attribute data, consisting of the data type and the attribute value itself.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kseAttributeName",
                        "name": "_kseAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "\u003cp\u003eThe name of a key attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kseKeyType",
                        "name": "_kseKeyType",
                        "shape": "KeyType",
                        "locationName": "KeyType",
                        "documentation": "\u003cp\u003eThe attribute data, consisting of the data type and the attribute value itself.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "contentPad": 14,
                "name": "KeySchemaElement",
                "locationPad": 14,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kseAttributeName",
                        "name": "_kseAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "\u003cp\u003eThe name of a key attribute.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "kseKeyType",
                        "name": "_kseKeyType",
                        "shape": "KeyType",
                        "locationName": "KeyType",
                        "documentation": "\u003cp\u003eThe attribute data, consisting of the data type and the attribute value itself.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show",
                    "Monoid",
                    "Semigroup"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "deleteRequest",
                "field": {
                    "location": null,
                    "iso": "_Map",
                    "lensMapping": "_Map",
                    "default": "mempty",
                    "flattened": false,
                    "required": true,
                    "lens": "dKey",
                    "name": "_dKey",
                    "shape": "Key",
                    "locationName": "Key",
                    "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.\u003c/p\u003e",
                    "typeExposed": "HashMap Text AttributeValue",
                    "type": "Map Text AttributeValue"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "dKey",
                        "name": "_dKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 0,
                "name": "DeleteRequest",
                "locationPad": 0,
                "type": "newtype",
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "dKey",
                        "name": "_dKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "dKey",
                        "name": "_dKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of the item to delete. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 27,
                "ctor": "updateGlobalSecondaryIndexAction",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaIndexName",
                        "name": "_ugsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index to be updated.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaProvisionedThroughput",
                        "name": "_ugsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaIndexName",
                        "name": "_ugsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index to be updated.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaProvisionedThroughput",
                        "name": "_ugsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "contentPad": 22,
                "name": "UpdateGlobalSecondaryIndexAction",
                "locationPad": 22,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaIndexName",
                        "name": "_ugsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of the global secondary index to be updated.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaProvisionedThroughput",
                        "name": "_ugsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show",
                    "Monoid",
                    "Semigroup"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "putRequest",
                "field": {
                    "location": null,
                    "iso": "_Map",
                    "lensMapping": "_Map",
                    "default": "mempty",
                    "flattened": false,
                    "required": true,
                    "lens": "pItem",
                    "name": "_pItem",
                    "shape": "PutItemInputAttributeMap",
                    "locationName": "Item",
                    "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of an item to be processed by \u003ci\u003ePutItem\u003c/i\u003e. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item which are part of an index key schema for the table, their types must match the index key schema.\u003c/p\u003e",
                    "typeExposed": "HashMap Text AttributeValue",
                    "type": "Map Text AttributeValue"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "pItem",
                        "name": "_pItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of an item to be processed by \u003ci\u003ePutItem\u003c/i\u003e. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item which are part of an index key schema for the table, their types must match the index key schema.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 0,
                "name": "PutRequest",
                "locationPad": 0,
                "type": "newtype",
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "pItem",
                        "name": "_pItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of an item to be processed by \u003ci\u003ePutItem\u003c/i\u003e. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item which are part of an index key schema for the table, their types must match the index key schema.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "pItem",
                        "name": "_pItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute name to attribute values, representing the primary key of an item to be processed by \u003ci\u003ePutItem\u003c/i\u003e. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item which are part of an index key schema for the table, their types must match the index key schema.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "fieldPad": 20,
                "ctor": "condition",
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "cAttributeValueList",
                        "name": "_cAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "cComparisonOperator",
                        "name": "_cComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "\u003cp\u003eA comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "cComparisonOperator",
                        "name": "_cComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "\u003cp\u003eA comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "contentPad": 19,
                "name": "Condition",
                "locationPad": 19,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "cAttributeValueList",
                        "name": "_cAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "cAttributeValueList",
                        "name": "_cAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "\u003cp\u003eOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "cComparisonOperator",
                        "name": "_cComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "\u003cp\u003eA comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "And": "AND",
                    "Or": "OR"
                },
                "valuePad": 4,
                "name": "ConditionalOperator",
                "type": "nullary",
                "branchPad": 3
            },
            {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "globalSecondaryIndexUpdate",
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "flattened": false,
                    "required": false,
                    "lens": "gsiuUpdate",
                    "name": "_gsiuUpdate",
                    "shape": "UpdateGlobalSecondaryIndexAction",
                    "locationName": "Update",
                    "documentation": "\u003cp\u003eThe name of a global secondary index, along with the updated provisioned throughput settings that are to be applied to that index.\u003c/p\u003e",
                    "typeExposed": "Maybe UpdateGlobalSecondaryIndexAction",
                    "type": "Maybe UpdateGlobalSecondaryIndexAction"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuUpdate",
                        "name": "_gsiuUpdate",
                        "shape": "UpdateGlobalSecondaryIndexAction",
                        "locationName": "Update",
                        "documentation": "\u003cp\u003eThe name of a global secondary index, along with the updated provisioned throughput settings that are to be applied to that index.\u003c/p\u003e",
                        "typeExposed": "Maybe UpdateGlobalSecondaryIndexAction",
                        "type": "Maybe UpdateGlobalSecondaryIndexAction"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 0,
                "name": "GlobalSecondaryIndexUpdate",
                "locationPad": 0,
                "type": "newtype",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuUpdate",
                        "name": "_gsiuUpdate",
                        "shape": "UpdateGlobalSecondaryIndexAction",
                        "locationName": "Update",
                        "documentation": "\u003cp\u003eThe name of a global secondary index, along with the updated provisioned throughput settings that are to be applied to that index.\u003c/p\u003e",
                        "typeExposed": "Maybe UpdateGlobalSecondaryIndexAction",
                        "type": "Maybe UpdateGlobalSecondaryIndexAction"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuUpdate",
                        "name": "_gsiuUpdate",
                        "shape": "UpdateGlobalSecondaryIndexAction",
                        "locationName": "Update",
                        "documentation": "\u003cp\u003eThe name of a global secondary index, along with the updated provisioned throughput settings that are to be applied to that index.\u003c/p\u003e",
                        "typeExposed": "Maybe UpdateGlobalSecondaryIndexAction",
                        "type": "Maybe UpdateGlobalSecondaryIndexAction"
                    }
                ]
            }
        ],
        "imports": [],
        "shared": [
            "WriteRequest",
            "AttributeValue",
            "TableDescription",
            "KeysAndAttributes",
            "ExpectedAttributeValue",
            "ItemCollectionMetrics",
            "ConsumedCapacity",
            "Condition"
        ]
    },
    "operations": [
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 21,
                "ctor": "batchGetItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirResponses",
                        "name": "_bgirResponses",
                        "shape": "BatchGetResponseMap",
                        "locationName": "Responses",
                        "documentation": "\u003cp\u003eA map of table name to a list of items. Each object in \u003ci\u003eResponses\u003c/i\u003e consists of a table name, along with a map of attribute data consisting of the data type and attribute value.\u003c/p\u003e",
                        "typeExposed": "HashMap Text [HashMap Text AttributeValue]",
                        "type": "Map Text (List \"Items\" (Map Text AttributeValue))"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirUnprocessedKeys",
                        "name": "_bgirUnprocessedKeys",
                        "shape": "BatchGetRequestMap",
                        "locationName": "UnprocessedKeys",
                        "documentation": "\u003cp\u003eA map of tables and their respective keys that were not processed with the current response. The \u003ci\u003eUnprocessedKeys\u003c/i\u003e value is in the same form as \u003ci\u003eRequestItems\u003c/i\u003e, so the value can be provided directly to a subsequent \u003ci\u003eBatchGetItem\u003c/i\u003e operation. For more information, see \u003ci\u003eRequestItems\u003c/i\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeys\u003c/i\u003e - An array of primary key attribute values that define specific items in the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributesToGet\u003c/i\u003e - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a specified attribute is not found, it does not appear in the result.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eConsistentRead\u003c/i\u003e - The consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed keys remaining, the response contains an empty \u003ci\u003eUnprocessedKeys\u003c/i\u003e map.\u003c/p\u003e",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirConsumedCapacity",
                        "name": "_bgirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "\u003cp\u003eThe write capacity units consumed by the operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eTableName\u003c/i\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCapacityUnits\u003c/i\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "BatchGetItemResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirResponses",
                        "name": "_bgirResponses",
                        "shape": "BatchGetResponseMap",
                        "locationName": "Responses",
                        "documentation": "\u003cp\u003eA map of table name to a list of items. Each object in \u003ci\u003eResponses\u003c/i\u003e consists of a table name, along with a map of attribute data consisting of the data type and attribute value.\u003c/p\u003e",
                        "typeExposed": "HashMap Text [HashMap Text AttributeValue]",
                        "type": "Map Text (List \"Items\" (Map Text AttributeValue))"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirUnprocessedKeys",
                        "name": "_bgirUnprocessedKeys",
                        "shape": "BatchGetRequestMap",
                        "locationName": "UnprocessedKeys",
                        "documentation": "\u003cp\u003eA map of tables and their respective keys that were not processed with the current response. The \u003ci\u003eUnprocessedKeys\u003c/i\u003e value is in the same form as \u003ci\u003eRequestItems\u003c/i\u003e, so the value can be provided directly to a subsequent \u003ci\u003eBatchGetItem\u003c/i\u003e operation. For more information, see \u003ci\u003eRequestItems\u003c/i\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeys\u003c/i\u003e - An array of primary key attribute values that define specific items in the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributesToGet\u003c/i\u003e - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a specified attribute is not found, it does not appear in the result.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eConsistentRead\u003c/i\u003e - The consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed keys remaining, the response contains an empty \u003ci\u003eUnprocessedKeys\u003c/i\u003e map.\u003c/p\u003e",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirConsumedCapacity",
                        "name": "_bgirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "\u003cp\u003eThe write capacity units consumed by the operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eTableName\u003c/i\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCapacityUnits\u003c/i\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirConsumedCapacity",
                        "name": "_bgirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "\u003cp\u003eThe write capacity units consumed by the operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eTableName\u003c/i\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCapacityUnits\u003c/i\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirResponses",
                        "name": "_bgirResponses",
                        "shape": "BatchGetResponseMap",
                        "locationName": "Responses",
                        "documentation": "\u003cp\u003eA map of table name to a list of items. Each object in \u003ci\u003eResponses\u003c/i\u003e consists of a table name, along with a map of attribute data consisting of the data type and attribute value.\u003c/p\u003e",
                        "typeExposed": "HashMap Text [HashMap Text AttributeValue]",
                        "type": "Map Text (List \"Items\" (Map Text AttributeValue))"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirUnprocessedKeys",
                        "name": "_bgirUnprocessedKeys",
                        "shape": "BatchGetRequestMap",
                        "locationName": "UnprocessedKeys",
                        "documentation": "\u003cp\u003eA map of tables and their respective keys that were not processed with the current response. The \u003ci\u003eUnprocessedKeys\u003c/i\u003e value is in the same form as \u003ci\u003eRequestItems\u003c/i\u003e, so the value can be provided directly to a subsequent \u003ci\u003eBatchGetItem\u003c/i\u003e operation. For more information, see \u003ci\u003eRequestItems\u003c/i\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeys\u003c/i\u003e - An array of primary key attribute values that define specific items in the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributesToGet\u003c/i\u003e - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a specified attribute is not found, it does not appear in the result.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eConsistentRead\u003c/i\u003e - The consistency of a read operation. If set to \u003ccode\u003etrue\u003c/code\u003e, then a strongly consistent read is used; otherwise, an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed keys remaining, the response contains an empty \u003ci\u003eUnprocessedKeys\u003c/i\u003e map.\u003c/p\u003e",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html",
            "namespace": "Network.AWS.DynamoDB.BatchGetItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "BatchGetItem",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eBatchGetItem\u003c/i\u003e operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.\u003c/p\u003e \u003cp\u003eA single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. \u003ci\u003eBatchGetItem\u003c/i\u003e will return a partial result if the response size limit is exceeded, the table's provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for \u003ci\u003eUnprocessedKeys\u003c/i\u003e. You can use this value to retry the operation starting with the next item to get.\u003c/p\u003e \u003cp\u003eFor example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate \u003ci\u003eUnprocessedKeys\u003c/i\u003e value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one data set.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003enone\u003c/i\u003e of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then \u003ci\u003eBatchGetItem\u003c/i\u003e will return a \u003ci\u003eProvisionedThroughputExceededException\u003c/i\u003e. If \u003ci\u003eat least one\u003c/i\u003e of the items is successfully processed, then \u003ci\u003eBatchGetItem\u003c/i\u003e completes successfully, while returning the keys of the unread items in \u003ci\u003eUnprocessedKeys\u003c/i\u003e.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, \u003ci\u003ewe strongly recommend that you use an exponential backoff algorithm\u003c/i\u003e. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\u003c/p\u003e \u003cp\u003eFor more information, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\"\u003eBatch Operations and Error Handling\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eBy default, \u003ci\u003eBatchGetItem\u003c/i\u003e performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set \u003ci\u003eConsistentRead\u003c/i\u003e to \u003ccode\u003etrue\u003c/code\u003e for any or all tables.\u003c/p\u003e \u003cp\u003eIn order to minimize response latency, \u003ci\u003eBatchGetItem\u003c/i\u003e retrieves items in parallel.\u003c/p\u003e \u003cp\u003eWhen designing your application, keep in mind that DynamoDB does not return attributes in any particular order. To help parse the response by item, include the primary key values for the items in your request in the \u003ci\u003eAttributesToGet\u003c/i\u003e parameter.\u003c/p\u003e \u003cp\u003eIf a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations\"\u003eCapacity Units Calculations\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "batchGetItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgiRequestItems",
                        "name": "_bgiRequestItems",
                        "shape": "BatchGetRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "\u003cp\u003eA map of one or more table names and, for each table, the corresponding primary keys for the items to retrieve. Each table name can be invoked only once.\u003c/p\u003e \u003cp\u003eEach element in the map consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeys\u003c/i\u003e - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify \u003ci\u003eboth\u003c/i\u003e the hash attribute and the range attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributesToGet\u003c/i\u003e - One or more attributes to be retrieved from the table. By default, all attributes are returned. If a specified attribute is not found, it does not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eConsistentRead\u003c/i\u003e - If \u003ccode\u003etrue\u003c/code\u003e, a strongly consistent read is used; if \u003ccode\u003efalse\u003c/code\u003e (the default), an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bgiReturnConsumedCapacity",
                        "name": "_bgiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 23,
                "queryPad": 0,
                "name": "BatchGetItem",
                "query": [],
                "locationPad": 23,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgiRequestItems",
                        "name": "_bgiRequestItems",
                        "shape": "BatchGetRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "\u003cp\u003eA map of one or more table names and, for each table, the corresponding primary keys for the items to retrieve. Each table name can be invoked only once.\u003c/p\u003e \u003cp\u003eEach element in the map consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeys\u003c/i\u003e - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify \u003ci\u003eboth\u003c/i\u003e the hash attribute and the range attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributesToGet\u003c/i\u003e - One or more attributes to be retrieved from the table. By default, all attributes are returned. If a specified attribute is not found, it does not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eConsistentRead\u003c/i\u003e - If \u003ccode\u003etrue\u003c/code\u003e, a strongly consistent read is used; if \u003ccode\u003efalse\u003c/code\u003e (the default), an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bgiReturnConsumedCapacity",
                        "name": "_bgiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bgiRequestItems",
                        "name": "_bgiRequestItems",
                        "shape": "BatchGetRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "\u003cp\u003eA map of one or more table names and, for each table, the corresponding primary keys for the items to retrieve. Each table name can be invoked only once.\u003c/p\u003e \u003cp\u003eEach element in the map consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeys\u003c/i\u003e - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify \u003ci\u003eboth\u003c/i\u003e the hash attribute and the range attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributesToGet\u003c/i\u003e - One or more attributes to be retrieved from the table. By default, all attributes are returned. If a specified attribute is not found, it does not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eConsistentRead\u003c/i\u003e - If \u003ccode\u003etrue\u003c/code\u003e, a strongly consistent read is used; if \u003ccode\u003efalse\u003c/code\u003e (the default), an eventually consistent read is used.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bgiReturnConsumedCapacity",
                        "name": "_bgiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "batchWriteItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirUnprocessedItems",
                        "name": "_bwirUnprocessedItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "UnprocessedItems",
                        "documentation": "\u003cp\u003eA map of tables and requests against those tables that were not processed. The \u003ci\u003eUnprocessedItems\u003c/i\u003e value is in the same form as \u003ci\u003eRequestItems\u003c/i\u003e, so you can provide this value directly to a subsequent \u003ci\u003eBatchGetItem\u003c/i\u003e operation. For more information, see \u003ci\u003eRequestItems\u003c/i\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eUnprocessedItems\u003c/i\u003e entry consists of a table name and, for that table, a list of operations to perform (\u003ci\u003eDeleteRequest\u003c/i\u003e or \u003ci\u003ePutRequest\u003c/i\u003e).\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteRequest\u003c/i\u003e - Perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation on the specified item. The item to be deleted is identified by a \u003ci\u003eKey\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKey\u003c/i\u003e - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003ePutRequest\u003c/i\u003e - Perform a \u003ci\u003ePutItem\u003c/i\u003e operation on the specified item. The item to be put is identified by an \u003ci\u003eItem\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItem\u003c/i\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed items remaining, the response contains an empty \u003ci\u003eUnprocessedItems\u003c/i\u003e map.\u003c/p\u003e",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirItemCollectionMetrics",
                        "name": "_bwirItemCollectionMetrics",
                        "shape": "ItemCollectionMetricsPerTable",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA list of tables that were processed by \u003ci\u003eBatchWriteItem\u003c/i\u003e and, for each table, information about any item collections that were affected by individual \u003ci\u003eDeleteItem\u003c/i\u003e or \u003ci\u003ePutItem\u003c/i\u003e operations.\u003c/p\u003e \u003cp\u003eEach entry consists of the following subelements:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text [ItemCollectionMetrics]",
                        "type": "Map Text (List \"ItemCollectionMetrics\" ItemCollectionMetrics)"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirConsumedCapacity",
                        "name": "_bwirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "\u003cp\u003eThe capacity units consumed by the operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eTableName\u003c/i\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCapacityUnits\u003c/i\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "BatchWriteItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirUnprocessedItems",
                        "name": "_bwirUnprocessedItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "UnprocessedItems",
                        "documentation": "\u003cp\u003eA map of tables and requests against those tables that were not processed. The \u003ci\u003eUnprocessedItems\u003c/i\u003e value is in the same form as \u003ci\u003eRequestItems\u003c/i\u003e, so you can provide this value directly to a subsequent \u003ci\u003eBatchGetItem\u003c/i\u003e operation. For more information, see \u003ci\u003eRequestItems\u003c/i\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eUnprocessedItems\u003c/i\u003e entry consists of a table name and, for that table, a list of operations to perform (\u003ci\u003eDeleteRequest\u003c/i\u003e or \u003ci\u003ePutRequest\u003c/i\u003e).\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteRequest\u003c/i\u003e - Perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation on the specified item. The item to be deleted is identified by a \u003ci\u003eKey\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKey\u003c/i\u003e - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003ePutRequest\u003c/i\u003e - Perform a \u003ci\u003ePutItem\u003c/i\u003e operation on the specified item. The item to be put is identified by an \u003ci\u003eItem\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItem\u003c/i\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed items remaining, the response contains an empty \u003ci\u003eUnprocessedItems\u003c/i\u003e map.\u003c/p\u003e",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirItemCollectionMetrics",
                        "name": "_bwirItemCollectionMetrics",
                        "shape": "ItemCollectionMetricsPerTable",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA list of tables that were processed by \u003ci\u003eBatchWriteItem\u003c/i\u003e and, for each table, information about any item collections that were affected by individual \u003ci\u003eDeleteItem\u003c/i\u003e or \u003ci\u003ePutItem\u003c/i\u003e operations.\u003c/p\u003e \u003cp\u003eEach entry consists of the following subelements:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text [ItemCollectionMetrics]",
                        "type": "Map Text (List \"ItemCollectionMetrics\" ItemCollectionMetrics)"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirConsumedCapacity",
                        "name": "_bwirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "\u003cp\u003eThe capacity units consumed by the operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eTableName\u003c/i\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCapacityUnits\u003c/i\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirConsumedCapacity",
                        "name": "_bwirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "\u003cp\u003eThe capacity units consumed by the operation.\u003c/p\u003e \u003cp\u003eEach element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eTableName\u003c/i\u003e - The table that consumed the provisioned throughput.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eCapacityUnits\u003c/i\u003e - The total number of capacity units consumed.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirItemCollectionMetrics",
                        "name": "_bwirItemCollectionMetrics",
                        "shape": "ItemCollectionMetricsPerTable",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA list of tables that were processed by \u003ci\u003eBatchWriteItem\u003c/i\u003e and, for each table, information about any item collections that were affected by individual \u003ci\u003eDeleteItem\u003c/i\u003e or \u003ci\u003ePutItem\u003c/i\u003e operations.\u003c/p\u003e \u003cp\u003eEach entry consists of the following subelements:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text [ItemCollectionMetrics]",
                        "type": "Map Text (List \"ItemCollectionMetrics\" ItemCollectionMetrics)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirUnprocessedItems",
                        "name": "_bwirUnprocessedItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "UnprocessedItems",
                        "documentation": "\u003cp\u003eA map of tables and requests against those tables that were not processed. The \u003ci\u003eUnprocessedItems\u003c/i\u003e value is in the same form as \u003ci\u003eRequestItems\u003c/i\u003e, so you can provide this value directly to a subsequent \u003ci\u003eBatchGetItem\u003c/i\u003e operation. For more information, see \u003ci\u003eRequestItems\u003c/i\u003e in the Request Parameters section.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eUnprocessedItems\u003c/i\u003e entry consists of a table name and, for that table, a list of operations to perform (\u003ci\u003eDeleteRequest\u003c/i\u003e or \u003ci\u003ePutRequest\u003c/i\u003e).\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteRequest\u003c/i\u003e - Perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation on the specified item. The item to be deleted is identified by a \u003ci\u003eKey\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKey\u003c/i\u003e - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003ePutRequest\u003c/i\u003e - Perform a \u003ci\u003ePutItem\u003c/i\u003e operation on the specified item. The item to be put is identified by an \u003ci\u003eItem\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItem\u003c/i\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf there are no unprocessed items remaining, the response contains an empty \u003ci\u003eUnprocessedItems\u003c/i\u003e map.\u003c/p\u003e",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html",
            "namespace": "Network.AWS.DynamoDB.BatchWriteItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "BatchWriteItem",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eBatchWriteItem\u003c/i\u003e operation puts or deletes multiple items in one or more tables. A single call to \u003ci\u003eBatchWriteItem\u003c/i\u003e can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.\u003c/p\u003e \u003cp\u003eThe individual \u003ci\u003ePutItem\u003c/i\u003e and \u003ci\u003eDeleteItem\u003c/i\u003e operations specified in \u003ci\u003eBatchWriteItem\u003c/i\u003e are atomic; however \u003ci\u003eBatchWriteItem\u003c/i\u003e as a whole is not. If any requested operations fail because the table's provisioned throughput is exceeded or an internal processing failure occurs, the failed operations are returned in the \u003ci\u003eUnprocessedItems\u003c/i\u003e response parameter. You can investigate and optionally resend the requests. Typically, you would call \u003ci\u003eBatchWriteItem\u003c/i\u003e in a loop. Each iteration would check for unprocessed items and submit a new \u003ci\u003eBatchWriteItem\u003c/i\u003e request with those unprocessed items until all items have been processed.\u003c/p\u003e \u003cp\u003eNote that if \u003ci\u003enone\u003c/i\u003e of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then \u003ci\u003eBatchWriteItem\u003c/i\u003e will return a \u003ci\u003eProvisionedThroughputExceededException\u003c/i\u003e.\u003c/p\u003e \u003cimportant\u003e \u003cp\u003eIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, \u003ci\u003ewe strongly recommend that you use an exponential backoff algorithm\u003c/i\u003e. If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\u003c/p\u003e \u003cp\u003eFor more information, go to \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations\"\u003eBatch Operations and Error Handling\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eWith \u003ci\u003eBatchWriteItem\u003c/i\u003e, you can efficiently write or delete large amounts of data, such as from Amazon Elastic MapReduce (EMR), or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, \u003ci\u003eBatchWriteItem\u003c/i\u003e does not behave in the same way as individual \u003ci\u003ePutItem\u003c/i\u003e and \u003ci\u003eDeleteItem\u003c/i\u003e calls would For example, you cannot specify conditions on individual put and delete requests, and \u003ci\u003eBatchWriteItem\u003c/i\u003e does not return deleted items in the response.\u003c/p\u003e \u003cp\u003eIf you use a programming language that supports concurrency, such as Java, you can use threads to write items in parallel. Your application must include the necessary logic to manage the threads. With languages that don't support threading, such as PHP, you must update or delete the specified items one at a time. In both situations, \u003ci\u003eBatchWriteItem\u003c/i\u003e provides an alternative where the API performs the specified put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce complexity into your application.\u003c/p\u003e \u003cp\u003eParallel processing reduces latency, but each specified put and delete request consumes the same number of write capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write capacity unit.\u003c/p\u003e \u003cp\u003eIf one or more of the following is true, DynamoDB rejects the entire batch write operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eOne or more tables specified in the \u003ci\u003eBatchWriteItem\u003c/i\u003e request does not exist.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ePrimary key attributes specified on an item in the request do not match those in the corresponding table's primary key schema.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eYou try to perform multiple operations on the same item in the same \u003ci\u003eBatchWriteItem\u003c/i\u003e request. For example, you cannot put and delete the same item in the same \u003ci\u003eBatchWriteItem\u003c/i\u003e request. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThere are more than 25 requests in the batch.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eAny individual item in a batch exceeds 400 KB.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe total request size exceeds 16 MB.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 31,
                "ctor": "batchWriteItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwiRequestItems",
                        "name": "_bwiRequestItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "\u003cp\u003eA map of one or more table names and, for each table, a list of operations to be performed (\u003ci\u003eDeleteRequest\u003c/i\u003e or \u003ci\u003ePutRequest\u003c/i\u003e). Each element in the map consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteRequest\u003c/i\u003e - Perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation on the specified item. The item to be deleted is identified by a \u003ci\u003eKey\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKey\u003c/i\u003e - A map of primary key attribute values that uniquely identify the ! item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify \u003ci\u003eboth\u003c/i\u003e the hash attribute and the range attribute.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003ePutRequest\u003c/i\u003e - Perform a \u003ci\u003ePutItem\u003c/i\u003e operation on the specified item. The item to be put is identified by an \u003ci\u003eItem\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItem\u003c/i\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnConsumedCapacity",
                        "name": "_bwiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnItemCollectionMetrics",
                        "name": "_bwiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "BatchWriteItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwiRequestItems",
                        "name": "_bwiRequestItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "\u003cp\u003eA map of one or more table names and, for each table, a list of operations to be performed (\u003ci\u003eDeleteRequest\u003c/i\u003e or \u003ci\u003ePutRequest\u003c/i\u003e). Each element in the map consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteRequest\u003c/i\u003e - Perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation on the specified item. The item to be deleted is identified by a \u003ci\u003eKey\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKey\u003c/i\u003e - A map of primary key attribute values that uniquely identify the ! item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify \u003ci\u003eboth\u003c/i\u003e the hash attribute and the range attribute.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003ePutRequest\u003c/i\u003e - Perform a \u003ci\u003ePutItem\u003c/i\u003e operation on the specified item. The item to be put is identified by an \u003ci\u003eItem\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItem\u003c/i\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnConsumedCapacity",
                        "name": "_bwiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnItemCollectionMetrics",
                        "name": "_bwiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "bwiRequestItems",
                        "name": "_bwiRequestItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "\u003cp\u003eA map of one or more table names and, for each table, a list of operations to be performed (\u003ci\u003eDeleteRequest\u003c/i\u003e or \u003ci\u003ePutRequest\u003c/i\u003e). Each element in the map consists of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eDeleteRequest\u003c/i\u003e - Perform a \u003ci\u003eDeleteItem\u003c/i\u003e operation on the specified item. The item to be deleted is identified by a \u003ci\u003eKey\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKey\u003c/i\u003e - A map of primary key attribute values that uniquely identify the ! item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide \u003ci\u003eall\u003c/i\u003e of the key attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify \u003ci\u003eboth\u003c/i\u003e the hash attribute and the range attribute.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003ePutRequest\u003c/i\u003e - Perform a \u003ci\u003ePutItem\u003c/i\u003e operation on the specified item. The item to be put is identified by an \u003ci\u003eItem\u003c/i\u003e subelement:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eItem\u003c/i\u003e - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnConsumedCapacity",
                        "name": "_bwiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnItemCollectionMetrics",
                        "name": "_bwiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "createTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "flattened": false,
                    "required": false,
                    "lens": "ctrTableDescription",
                    "name": "_ctrTableDescription",
                    "shape": "TableDescription",
                    "locationName": "TableDescription",
                    "documentation": null,
                    "typeExposed": "Maybe TableDescription",
                    "type": "Maybe TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ctrTableDescription",
                        "name": "_ctrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "CreateTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ctrTableDescription",
                        "name": "_ctrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ctrTableDescription",
                        "name": "_ctrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html",
            "namespace": "Network.AWS.DynamoDB.CreateTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "CreateTable",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eCreateTable\u003c/i\u003e operation adds a new table to your account. In an AWS account, table names must be unique within each region. That is, you can have two tables with same name if you create the tables in different regions.\u003c/p\u003e \u003cp\u003e\u003ci\u003eCreateTable\u003c/i\u003e is an asynchronous operation. Upon receiving a \u003ci\u003eCreateTable\u003c/i\u003e request, DynamoDB immediately returns a response with a \u003ci\u003eTableStatus\u003c/i\u003e of \u003ccode\u003eCREATING\u003c/code\u003e. After the table is created, DynamoDB sets the \u003ci\u003eTableStatus\u003c/i\u003e to \u003ccode\u003eACTIVE\u003c/code\u003e. You can perform read and write operations only on an \u003ccode\u003eACTIVE\u003c/code\u003e table. \u003c/p\u003e \u003cp\u003eIf you want to create multiple tables with secondary indexes on them, you must create them sequentially. Only one table with secondary indexes can be in the \u003ccode\u003eCREATING\u003c/code\u003e state at any given time.\u003c/p\u003e \u003cp\u003eYou can use the \u003ci\u003eDescribeTable\u003c/i\u003e API to check the table status.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "createTable",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctAttributeDefinitions",
                        "name": "_ctAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "\u003cp\u003eAn array of attributes that describe the key schema for the table and indexes.\u003c/p\u003e",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctTableName",
                        "name": "_ctTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to create.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctKeySchema",
                        "name": "_ctKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eSpecifies the attributes that make up the primary key for a table or an index. The attributes in \u003ci\u003eKeySchema\u003c/i\u003e must also be defined in the \u003ci\u003eAttributeDefinitions\u003c/i\u003e array. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\"\u003eData Model\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eKeySchemaElement\u003c/i\u003e in the array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of this key attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeyType\u003c/i\u003e - Determines whether the key attribute is \u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor a primary key that consists of a hash attribute, you must specify exactly one element with a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eHASH\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor a primary key that consists of hash and range attributes, you must specify exactly two elements, in this order: The first element must have a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eHASH\u003c/code\u003e, and the second element must have a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key\"\u003eSpecifying the Primary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctLocalSecondaryIndexes",
                        "name": "_ctLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eOne or more local secondary indexes (the maximum is five) to be created on the table. Each index is scoped to a given hash key value. There is a 10 GB size limit per hash key; otherwise, the size of a local secondary index is unconstrained.\u003c/p\u003e \u003cp\u003eEach local secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the local secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the key schema for the local secondary index. The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[LocalSecondaryIndex]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctGlobalSecondaryIndexes",
                        "name": "_ctGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eOne or more global secondary indexes (the maximum is five) to be created on the table. Each global secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the global secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the key schema for the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProvisionedThroughput\u003c/i\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[GlobalSecondaryIndex]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctProvisionedThroughput",
                        "name": "_ctProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctTableName",
                        "name": "_ctTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to create.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctKeySchema",
                        "name": "_ctKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eSpecifies the attributes that make up the primary key for a table or an index. The attributes in \u003ci\u003eKeySchema\u003c/i\u003e must also be defined in the \u003ci\u003eAttributeDefinitions\u003c/i\u003e array. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\"\u003eData Model\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eKeySchemaElement\u003c/i\u003e in the array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of this key attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeyType\u003c/i\u003e - Determines whether the key attribute is \u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor a primary key that consists of a hash attribute, you must specify exactly one element with a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eHASH\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor a primary key that consists of hash and range attributes, you must specify exactly two elements, in this order: The first element must have a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eHASH\u003c/code\u003e, and the second element must have a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key\"\u003eSpecifying the Primary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctProvisionedThroughput",
                        "name": "_ctProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 23,
                "queryPad": 0,
                "name": "CreateTable",
                "query": [],
                "locationPad": 23,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctAttributeDefinitions",
                        "name": "_ctAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "\u003cp\u003eAn array of attributes that describe the key schema for the table and indexes.\u003c/p\u003e",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctLocalSecondaryIndexes",
                        "name": "_ctLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eOne or more local secondary indexes (the maximum is five) to be created on the table. Each index is scoped to a given hash key value. There is a 10 GB size limit per hash key; otherwise, the size of a local secondary index is unconstrained.\u003c/p\u003e \u003cp\u003eEach local secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the local secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the key schema for the local secondary index. The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[LocalSecondaryIndex]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctGlobalSecondaryIndexes",
                        "name": "_ctGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eOne or more global secondary indexes (the maximum is five) to be created on the table. Each global secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the global secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the key schema for the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProvisionedThroughput\u003c/i\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[GlobalSecondaryIndex]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndex"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctAttributeDefinitions",
                        "name": "_ctAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "\u003cp\u003eAn array of attributes that describe the key schema for the table and indexes.\u003c/p\u003e",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctGlobalSecondaryIndexes",
                        "name": "_ctGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "\u003cp\u003eOne or more global secondary indexes (the maximum is five) to be created on the table. Each global secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the global secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the key schema for the global secondary index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProvisionedThroughput\u003c/i\u003e - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[GlobalSecondaryIndex]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctKeySchema",
                        "name": "_ctKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "\u003cp\u003eSpecifies the attributes that make up the primary key for a table or an index. The attributes in \u003ci\u003eKeySchema\u003c/i\u003e must also be defined in the \u003ci\u003eAttributeDefinitions\u003c/i\u003e array. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\"\u003eData Model\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eKeySchemaElement\u003c/i\u003e in the array is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeName\u003c/i\u003e - The name of this key attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeyType\u003c/i\u003e - Determines whether the key attribute is \u003ccode\u003eHASH\u003c/code\u003e or \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor a primary key that consists of a hash attribute, you must specify exactly one element with a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eHASH\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor a primary key that consists of hash and range attributes, you must specify exactly two elements, in this order: The first element must have a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eHASH\u003c/code\u003e, and the second element must have a \u003ci\u003eKeyType\u003c/i\u003e of \u003ccode\u003eRANGE\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eFor more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key\"\u003eSpecifying the Primary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ctLocalSecondaryIndexes",
                        "name": "_ctLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "\u003cp\u003eOne or more local secondary indexes (the maximum is five) to be created on the table. Each index is scoped to a given hash key value. There is a 10 GB size limit per hash key; otherwise, the size of a local secondary index is unconstrained.\u003c/p\u003e \u003cp\u003eEach local secondary index in the array includes the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eIndexName\u003c/i\u003e - The name of the local secondary index. Must be unique only for this table.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eKeySchema\u003c/i\u003e - Specifies the key schema for the local secondary index. The key schema must begin with the same hash key attribute as the table.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjection\u003c/i\u003e - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eProjectionType\u003c/i\u003e - One of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eKEYS_ONLY\u003c/code\u003e - Only the index and primary keys are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eINCLUDE\u003c/code\u003e - Only the specified table attributes are projected into the index. The list of projected attributes are in \u003ci\u003eNonKeyAttributes\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL\u003c/code\u003e - All of the table attributes are projected into the index.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eNonKeyAttributes\u003c/i\u003e - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes specified in \u003ci\u003eNonKeyAttributes\u003c/i\u003e, summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "[LocalSecondaryIndex]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctProvisionedThroughput",
                        "name": "_ctProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "ctTableName",
                        "name": "_ctTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to create.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "deleteItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "dirAttributes",
                        "name": "_dirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the item as it appeared before the \u003ci\u003eDeleteItem\u003c/i\u003e operation. This map appears in the response only if \u003ci\u003eReturnValues\u003c/i\u003e was specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dirConsumedCapacity",
                        "name": "_dirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dirItemCollectionMetrics",
                        "name": "_dirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eInformation about item collections, if any, that were affected by the operation. \u003ci\u003eItemCollectionMetrics\u003c/i\u003e is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eItemCollectionMetrics\u003c/i\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "DeleteItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "dirAttributes",
                        "name": "_dirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the item as it appeared before the \u003ci\u003eDeleteItem\u003c/i\u003e operation. This map appears in the response only if \u003ci\u003eReturnValues\u003c/i\u003e was specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dirConsumedCapacity",
                        "name": "_dirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dirItemCollectionMetrics",
                        "name": "_dirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eInformation about item collections, if any, that were affected by the operation. \u003ci\u003eItemCollectionMetrics\u003c/i\u003e is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eItemCollectionMetrics\u003c/i\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "dirAttributes",
                        "name": "_dirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the item as it appeared before the \u003ci\u003eDeleteItem\u003c/i\u003e operation. This map appears in the response only if \u003ci\u003eReturnValues\u003c/i\u003e was specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dirConsumedCapacity",
                        "name": "_dirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dirItemCollectionMetrics",
                        "name": "_dirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eInformation about item collections, if any, that were affected by the operation. \u003ci\u003eItemCollectionMetrics\u003c/i\u003e is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eItemCollectionMetrics\u003c/i\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html",
            "namespace": "Network.AWS.DynamoDB.DeleteItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "DeleteItem",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.\u003c/p\u003e \u003cp\u003eIn addition to deleting an item, you can also return the item's attribute values in the same operation, using the \u003ci\u003eReturnValues\u003c/i\u003e parameter.\u003c/p\u003e \u003cp\u003eUnless you specify conditions, the \u003ci\u003eDeleteItem\u003c/i\u003e is an idempotent operation; running it multiple times on the same item or attribute does \u003ci\u003enot\u003c/i\u003e result in an error response.\u003c/p\u003e \u003cp\u003eConditional deletes are useful for deleting items only if specific conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not deleted. \u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "deleteItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "diTableName",
                        "name": "_diTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table from which to delete the item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diKey",
                        "name": "_diKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the primary key of the item to delete.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpected",
                        "name": "_diExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003eDeleteItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionalOperator",
                        "name": "_diConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnValues",
                        "name": "_diReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared before they were deleted. For \u003ci\u003eDeleteItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - The content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnConsumedCapacity",
                        "name": "_diReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnItemCollectionMetrics",
                        "name": "_diReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionExpression",
                        "name": "_diConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ci\u003eDeleteItem\u003c/i\u003e to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eBoolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeNames",
                        "name": "_diExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeValues",
                        "name": "_diExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "diTableName",
                        "name": "_diTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table from which to delete the item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "DeleteItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diKey",
                        "name": "_diKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the primary key of the item to delete.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpected",
                        "name": "_diExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003eDeleteItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionalOperator",
                        "name": "_diConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnValues",
                        "name": "_diReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared before they were deleted. For \u003ci\u003eDeleteItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - The content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnConsumedCapacity",
                        "name": "_diReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnItemCollectionMetrics",
                        "name": "_diReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionExpression",
                        "name": "_diConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ci\u003eDeleteItem\u003c/i\u003e to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eBoolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeNames",
                        "name": "_diExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeValues",
                        "name": "_diExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionExpression",
                        "name": "_diConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ci\u003eDeleteItem\u003c/i\u003e to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eBoolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionalOperator",
                        "name": "_diConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpected",
                        "name": "_diExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003eDeleteItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeNames",
                        "name": "_diExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeValues",
                        "name": "_diExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "diKey",
                        "name": "_diKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the primary key of the item to delete.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnConsumedCapacity",
                        "name": "_diReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnItemCollectionMetrics",
                        "name": "_diReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnValues",
                        "name": "_diReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared before they were deleted. For \u003ci\u003eDeleteItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - The content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "diTableName",
                        "name": "_diTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table from which to delete the item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "deleteTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "flattened": false,
                    "required": false,
                    "lens": "dtrTableDescription",
                    "name": "_dtrTableDescription",
                    "shape": "TableDescription",
                    "locationName": "TableDescription",
                    "documentation": null,
                    "typeExposed": "Maybe TableDescription",
                    "type": "Maybe TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTableDescription",
                        "name": "_dtrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "DeleteTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTableDescription",
                        "name": "_dtrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTableDescription",
                        "name": "_dtrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteTable.html",
            "namespace": "Network.AWS.DynamoDB.DeleteTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "DeleteTable",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eDeleteTable\u003c/i\u003e operation deletes a table and all of its items. After a \u003ci\u003eDeleteTable\u003c/i\u003e request, the specified table is in the \u003ccode\u003eDELETING\u003c/code\u003e state until DynamoDB completes the deletion. If the table is in the \u003ccode\u003eACTIVE\u003c/code\u003e state, you can delete it. If a table is in \u003ccode\u003eCREATING\u003c/code\u003e or \u003ccode\u003eUPDATING\u003c/code\u003e states, then DynamoDB returns a \u003ci\u003eResourceInUseException\u003c/i\u003e. If the specified table does not exist, DynamoDB returns a \u003ci\u003eResourceNotFoundException\u003c/i\u003e. If table is already in the \u003ccode\u003eDELETING\u003c/code\u003e state, no error is returned. \u003c/p\u003e \u003cp\u003eWhen you delete a table, any indexes on that table are also deleted.\u003c/p\u003e \u003cp\u003eUse the \u003ci\u003eDescribeTable\u003c/i\u003e API to check the status of the table. \u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Monoid",
                    "IsString"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "deleteTable",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "\u003cerror\u003e",
                    "flattened": false,
                    "required": true,
                    "lens": "dtTableName",
                    "name": "_dtTableName",
                    "shape": "TableName",
                    "locationName": "TableName",
                    "documentation": "\u003cp\u003e The name of the table to delete.\u003c/p\u003e",
                    "typeExposed": "Text",
                    "type": "Text"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "dtTableName",
                        "name": "_dtTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003e The name of the table to delete.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "dtTableName",
                        "name": "_dtTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003e The name of the table to delete.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "queryPad": 0,
                "name": "DeleteTable",
                "query": [],
                "locationPad": 0,
                "type": "newtype",
                "queryAll": false,
                "headerAll": false,
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "dtTableName",
                        "name": "_dtTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003e The name of the table to delete.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "describeTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "flattened": false,
                    "required": false,
                    "lens": "dtrTable",
                    "name": "_dtrTable",
                    "shape": "TableDescription",
                    "locationName": "Table",
                    "documentation": null,
                    "typeExposed": "Maybe TableDescription",
                    "type": "Maybe TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTable",
                        "name": "_dtrTable",
                        "shape": "TableDescription",
                        "locationName": "Table",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "DescribeTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTable",
                        "name": "_dtrTable",
                        "shape": "TableDescription",
                        "locationName": "Table",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTable",
                        "name": "_dtrTable",
                        "shape": "TableDescription",
                        "locationName": "Table",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html",
            "namespace": "Network.AWS.DynamoDB.DescribeTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "DescribeTable",
            "method": "post",
            "documentation": "\u003cp\u003eReturns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show",
                    "Monoid",
                    "IsString"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "describeTable",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "\u003cerror\u003e",
                    "flattened": false,
                    "required": true,
                    "lens": "dt1TableName",
                    "name": "_dt1TableName",
                    "shape": "TableName",
                    "locationName": "TableName",
                    "documentation": "\u003cp\u003e The name of the table to describe.\u003c/p\u003e",
                    "typeExposed": "Text",
                    "type": "Text"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "dt1TableName",
                        "name": "_dt1TableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003e The name of the table to describe.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "dt1TableName",
                        "name": "_dt1TableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003e The name of the table to describe.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "queryPad": 0,
                "name": "DescribeTable",
                "query": [],
                "locationPad": 0,
                "type": "newtype",
                "queryAll": false,
                "headerAll": false,
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "dt1TableName",
                        "name": "_dt1TableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003e The name of the table to describe.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 20,
                "ctor": "getItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "girItem",
                        "name": "_girItem",
                        "shape": "AttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, as specified by \u003ci\u003eAttributesToGet\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "girConsumedCapacity",
                        "name": "_girConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "GetItemResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "girItem",
                        "name": "_girItem",
                        "shape": "AttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, as specified by \u003ci\u003eAttributesToGet\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "girConsumedCapacity",
                        "name": "_girConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "girConsumedCapacity",
                        "name": "_girConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "girItem",
                        "name": "_girItem",
                        "shape": "AttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, as specified by \u003ci\u003eAttributesToGet\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html",
            "namespace": "Network.AWS.DynamoDB.GetItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "GetItem",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eGetItem\u003c/i\u003e operation returns a set of attributes for the item with the given primary key. If there is no matching item, \u003ci\u003eGetItem\u003c/i\u003e does not return any data.\u003c/p\u003e \u003cp\u003e\u003ci\u003eGetItem\u003c/i\u003e provides an eventually consistent read by default. If your application requires a strongly consistent read, set \u003ci\u003eConsistentRead\u003c/i\u003e to \u003ccode\u003etrue\u003c/code\u003e. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 27,
                "ctor": "getItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "giTableName",
                        "name": "_giTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "giKey",
                        "name": "_giKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the primary key of the item to retrieve.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "giAttributesToGet",
                        "name": "_giAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giConsistentRead",
                        "name": "_giConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giReturnConsumedCapacity",
                        "name": "_giReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giProjectionExpression",
                        "name": "_giProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "giExpressionAttributeNames",
                        "name": "_giExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "giTableName",
                        "name": "_giTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "giAttributesToGet",
                        "name": "_giAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 25,
                "queryPad": 0,
                "name": "GetItem",
                "query": [],
                "locationPad": 25,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "giKey",
                        "name": "_giKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the primary key of the item to retrieve.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giConsistentRead",
                        "name": "_giConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giReturnConsumedCapacity",
                        "name": "_giReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giProjectionExpression",
                        "name": "_giProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "giExpressionAttributeNames",
                        "name": "_giExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "giAttributesToGet",
                        "name": "_giAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giConsistentRead",
                        "name": "_giConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "giExpressionAttributeNames",
                        "name": "_giExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "giKey",
                        "name": "_giKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eA map of attribute names to \u003ci\u003eAttributeValue\u003c/i\u003e objects, representing the primary key of the item to retrieve.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giProjectionExpression",
                        "name": "_giProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "giReturnConsumedCapacity",
                        "name": "_giReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "giTableName",
                        "name": "_giTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "listTablesResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ltrTableNames",
                        "name": "_ltrTableNames",
                        "shape": "TableNameList",
                        "locationName": "TableNames",
                        "documentation": "\u003cp\u003eThe names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100. \u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e also appears in the output, you can use this value as the \u003ci\u003eExclusiveStartTableName\u003c/i\u003e parameter in a subsequent \u003ci\u003eListTables\u003c/i\u003e request and obtain the next page of results.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"TableNames\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltrLastEvaluatedTableName",
                        "name": "_ltrLastEvaluatedTableName",
                        "shape": "TableName",
                        "locationName": "LastEvaluatedTableName",
                        "documentation": "\u003cp\u003eThe name of the last table in the current page of results. Use this value as the \u003ci\u003eExclusiveStartTableName\u003c/i\u003e in a new request to obtain the next page of results, until all the table names are returned.\u003c/p\u003e \u003cp\u003eIf you do not receive a \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e value in the response, this means that there are no more table names to be retrieved.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 23,
                "name": "ListTablesResponse",
                "resultWrapper": null,
                "locationPad": 23,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ltrTableNames",
                        "name": "_ltrTableNames",
                        "shape": "TableNameList",
                        "locationName": "TableNames",
                        "documentation": "\u003cp\u003eThe names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100. \u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e also appears in the output, you can use this value as the \u003ci\u003eExclusiveStartTableName\u003c/i\u003e parameter in a subsequent \u003ci\u003eListTables\u003c/i\u003e request and obtain the next page of results.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"TableNames\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltrLastEvaluatedTableName",
                        "name": "_ltrLastEvaluatedTableName",
                        "shape": "TableName",
                        "locationName": "LastEvaluatedTableName",
                        "documentation": "\u003cp\u003eThe name of the last table in the current page of results. Use this value as the \u003ci\u003eExclusiveStartTableName\u003c/i\u003e in a new request to obtain the next page of results, until all the table names are returned.\u003c/p\u003e \u003cp\u003eIf you do not receive a \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e value in the response, this means that there are no more table names to be retrieved.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltrLastEvaluatedTableName",
                        "name": "_ltrLastEvaluatedTableName",
                        "shape": "TableName",
                        "locationName": "LastEvaluatedTableName",
                        "documentation": "\u003cp\u003eThe name of the last table in the current page of results. Use this value as the \u003ci\u003eExclusiveStartTableName\u003c/i\u003e in a new request to obtain the next page of results, until all the table names are returned.\u003c/p\u003e \u003cp\u003eIf you do not receive a \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e value in the response, this means that there are no more table names to be retrieved.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "ltrTableNames",
                        "name": "_ltrTableNames",
                        "shape": "TableNameList",
                        "locationName": "TableNames",
                        "documentation": "\u003cp\u003eThe names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100. \u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e also appears in the output, you can use this value as the \u003ci\u003eExclusiveStartTableName\u003c/i\u003e parameter in a subsequent \u003ci\u003eListTables\u003c/i\u003e request and obtain the next page of results.\u003c/p\u003e",
                        "typeExposed": "[Text]",
                        "type": "List \"TableNames\" Text"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ListTables.html",
            "namespace": "Network.AWS.DynamoDB.ListTables",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": {
                "token": {
                    "input": "ltExclusiveStartTableName",
                    "output": "ltrLastEvaluatedTableName"
                },
                "type": "next",
                "resultKey": "ltrTableNames"
            },
            "name": "ListTables",
            "method": "post",
            "documentation": "\u003cp\u003eReturns an array of table names associated with the current account and endpoint. The output from \u003ci\u003eListTables\u003c/i\u003e is paginated, with each page returning a maximum of 100 table names.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "listTables",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltExclusiveStartTableName",
                        "name": "_ltExclusiveStartTableName",
                        "shape": "TableName",
                        "locationName": "ExclusiveStartTableName",
                        "documentation": "\u003cp\u003eThe first table name that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e in a previous operation, so that you can obtain the next page of results.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltLimit",
                        "name": "_ltLimit",
                        "shape": "ListTablesInputLimit",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003e A maximum number of table names to return. If this parameter is not specified, the limit is 100.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 24,
                "queryPad": 0,
                "name": "ListTables",
                "query": [],
                "locationPad": 24,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltExclusiveStartTableName",
                        "name": "_ltExclusiveStartTableName",
                        "shape": "TableName",
                        "locationName": "ExclusiveStartTableName",
                        "documentation": "\u003cp\u003eThe first table name that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e in a previous operation, so that you can obtain the next page of results.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltLimit",
                        "name": "_ltLimit",
                        "shape": "ListTablesInputLimit",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003e A maximum number of table names to return. If this parameter is not specified, the limit is 100.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltExclusiveStartTableName",
                        "name": "_ltExclusiveStartTableName",
                        "shape": "TableName",
                        "locationName": "ExclusiveStartTableName",
                        "documentation": "\u003cp\u003eThe first table name that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedTableName\u003c/i\u003e in a previous operation, so that you can obtain the next page of results.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "ltLimit",
                        "name": "_ltLimit",
                        "shape": "ListTablesInputLimit",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003e A maximum number of table names to return. If this parameter is not specified, the limit is 100.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "putItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "pirAttributes",
                        "name": "_pirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eThe attribute values as they appeared before the \u003ci\u003ePutItem\u003c/i\u003e operation, but only if \u003ci\u003eReturnValues\u003c/i\u003e is specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request. Each element consists of an attribute name and an attribute value.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pirConsumedCapacity",
                        "name": "_pirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pirItemCollectionMetrics",
                        "name": "_pirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eInformation about item collections, if any, that were affected by the operation. \u003ci\u003eItemCollectionMetrics\u003c/i\u003e is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eItemCollectionMetrics\u003c/i\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "PutItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "pirAttributes",
                        "name": "_pirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eThe attribute values as they appeared before the \u003ci\u003ePutItem\u003c/i\u003e operation, but only if \u003ci\u003eReturnValues\u003c/i\u003e is specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request. Each element consists of an attribute name and an attribute value.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pirConsumedCapacity",
                        "name": "_pirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pirItemCollectionMetrics",
                        "name": "_pirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eInformation about item collections, if any, that were affected by the operation. \u003ci\u003eItemCollectionMetrics\u003c/i\u003e is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eItemCollectionMetrics\u003c/i\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "pirAttributes",
                        "name": "_pirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eThe attribute values as they appeared before the \u003ci\u003ePutItem\u003c/i\u003e operation, but only if \u003ci\u003eReturnValues\u003c/i\u003e is specified as \u003ccode\u003eALL_OLD\u003c/code\u003e in the request. Each element consists of an attribute name and an attribute value.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pirConsumedCapacity",
                        "name": "_pirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "pirItemCollectionMetrics",
                        "name": "_pirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "\u003cp\u003eInformation about item collections, if any, that were affected by the operation. \u003ci\u003eItemCollectionMetrics\u003c/i\u003e is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eItemCollectionMetrics\u003c/i\u003e element consists of:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eItemCollectionKey\u003c/i\u003e - The hash key value of the item collection. This is the same as the hash key of the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ci\u003eSizeEstimateRange\u003c/i\u003e - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\u003c/p\u003e \u003cp\u003eThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html",
            "namespace": "Network.AWS.DynamoDB.PutItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "PutItem",
            "method": "post",
            "documentation": "\u003cp\u003eCreates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn't exist), or replace an existing item if it has certain attribute values. \u003c/p\u003e \u003cp\u003eIn addition to putting an item, you can also return the item's attribute values in the same operation, using the \u003ci\u003eReturnValues\u003c/i\u003e parameter.\u003c/p\u003e \u003cp\u003eWhen you add an item, the primary key attribute(s) are the only required attributes. Attribute values cannot be null. String and Binary type attributes must have lengths greater than zero. Set type attributes cannot be empty. Requests with empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eYou can request that \u003ci\u003ePutItem\u003c/i\u003e return either a copy of the original item (before the update) or a copy of the updated item (after the update). For more information, see the \u003ci\u003eReturnValues\u003c/i\u003e description below.\u003c/p\u003e \u003cp\u003eFor more information about using this API, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html\"\u003eWorking with Items\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "putItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "piTableName",
                        "name": "_piTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to contain the item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piItem",
                        "name": "_piItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.\u003c/p\u003e \u003cp\u003eYou must provide all of the attributes for the primary key. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach element in the \u003ci\u003eItem\u003c/i\u003e map is an \u003ci\u003eAttributeValue\u003c/i\u003e object.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpected",
                        "name": "_piExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003ePutItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnValues",
                        "name": "_piReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared before they were updated with the \u003ci\u003ePutItem\u003c/i\u003e request. For \u003ci\u003ePutItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - If \u003ci\u003ePutItem\u003c/i\u003e overwrote an attribute name-value pair, then the content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnConsumedCapacity",
                        "name": "_piReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnItemCollectionMetrics",
                        "name": "_piReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionalOperator",
                        "name": "_piConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionExpression",
                        "name": "_piConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ci\u003ePutItem\u003c/i\u003e operation to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Boolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeNames",
                        "name": "_piExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeValues",
                        "name": "_piExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "piTableName",
                        "name": "_piTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to contain the item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "PutItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piItem",
                        "name": "_piItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.\u003c/p\u003e \u003cp\u003eYou must provide all of the attributes for the primary key. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach element in the \u003ci\u003eItem\u003c/i\u003e map is an \u003ci\u003eAttributeValue\u003c/i\u003e object.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpected",
                        "name": "_piExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003ePutItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnValues",
                        "name": "_piReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared before they were updated with the \u003ci\u003ePutItem\u003c/i\u003e request. For \u003ci\u003ePutItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - If \u003ci\u003ePutItem\u003c/i\u003e overwrote an attribute name-value pair, then the content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnConsumedCapacity",
                        "name": "_piReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnItemCollectionMetrics",
                        "name": "_piReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionalOperator",
                        "name": "_piConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionExpression",
                        "name": "_piConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ci\u003ePutItem\u003c/i\u003e operation to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Boolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeNames",
                        "name": "_piExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeValues",
                        "name": "_piExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionExpression",
                        "name": "_piConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional \u003ci\u003ePutItem\u003c/i\u003e operation to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Boolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionalOperator",
                        "name": "_piConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpected",
                        "name": "_piExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003ePutItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeNames",
                        "name": "_piExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeValues",
                        "name": "_piExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "piItem",
                        "name": "_piItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "\u003cp\u003eA map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.\u003c/p\u003e \u003cp\u003eYou must provide all of the attributes for the primary key. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e \u003cp\u003eFor more information about primary keys, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey\"\u003ePrimary Key\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eEach element in the \u003ci\u003eItem\u003c/i\u003e map is an \u003ci\u003eAttributeValue\u003c/i\u003e object.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnConsumedCapacity",
                        "name": "_piReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnItemCollectionMetrics",
                        "name": "_piReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnValues",
                        "name": "_piReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared before they were updated with the \u003ci\u003ePutItem\u003c/i\u003e request. For \u003ci\u003ePutItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - If \u003ci\u003ePutItem\u003c/i\u003e overwrote an attribute name-value pair, then the content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "piTableName",
                        "name": "_piTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to contain the item.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 19,
                "ctor": "queryResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qrItems",
                        "name": "_qrItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "\u003cp\u003eAn array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.\u003c/p\u003e",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrCount",
                        "name": "_qrCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you used a \u003ci\u003eQueryFilter\u003c/i\u003e in the request, then \u003ci\u003eCount\u003c/i\u003e is the number of items returned after the filter was applied, and \u003ci\u003eScannedCount\u003c/i\u003e is the number of matching items before&gt; the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eCount\u003c/i\u003e and \u003ci\u003eScannedCount\u003c/i\u003e are the same.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrScannedCount",
                        "name": "_qrScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "\u003cp\u003eThe number of items evaluated, before any \u003ci\u003eQueryFilter\u003c/i\u003e is applied. A high \u003ci\u003eScannedCount\u003c/i\u003e value with few, or no, \u003ci\u003eCount\u003c/i\u003e results indicates an inefficient \u003ci\u003eQuery\u003c/i\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eScannedCount\u003c/i\u003e is the same as \u003ci\u003eCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qrLastEvaluatedKey",
                        "name": "_qrLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrConsumedCapacity",
                        "name": "_qrConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "QueryResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qrItems",
                        "name": "_qrItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "\u003cp\u003eAn array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.\u003c/p\u003e",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrCount",
                        "name": "_qrCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you used a \u003ci\u003eQueryFilter\u003c/i\u003e in the request, then \u003ci\u003eCount\u003c/i\u003e is the number of items returned after the filter was applied, and \u003ci\u003eScannedCount\u003c/i\u003e is the number of matching items before&gt; the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eCount\u003c/i\u003e and \u003ci\u003eScannedCount\u003c/i\u003e are the same.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrScannedCount",
                        "name": "_qrScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "\u003cp\u003eThe number of items evaluated, before any \u003ci\u003eQueryFilter\u003c/i\u003e is applied. A high \u003ci\u003eScannedCount\u003c/i\u003e value with few, or no, \u003ci\u003eCount\u003c/i\u003e results indicates an inefficient \u003ci\u003eQuery\u003c/i\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eScannedCount\u003c/i\u003e is the same as \u003ci\u003eCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qrLastEvaluatedKey",
                        "name": "_qrLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrConsumedCapacity",
                        "name": "_qrConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrConsumedCapacity",
                        "name": "_qrConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrCount",
                        "name": "_qrCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you used a \u003ci\u003eQueryFilter\u003c/i\u003e in the request, then \u003ci\u003eCount\u003c/i\u003e is the number of items returned after the filter was applied, and \u003ci\u003eScannedCount\u003c/i\u003e is the number of matching items before&gt; the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eCount\u003c/i\u003e and \u003ci\u003eScannedCount\u003c/i\u003e are the same.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qrItems",
                        "name": "_qrItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "\u003cp\u003eAn array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.\u003c/p\u003e",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qrLastEvaluatedKey",
                        "name": "_qrLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qrScannedCount",
                        "name": "_qrScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "\u003cp\u003eThe number of items evaluated, before any \u003ci\u003eQueryFilter\u003c/i\u003e is applied. A high \u003ci\u003eScannedCount\u003c/i\u003e value with few, or no, \u003ci\u003eCount\u003c/i\u003e results indicates an inefficient \u003ci\u003eQuery\u003c/i\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eScannedCount\u003c/i\u003e is the same as \u003ci\u003eCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html",
            "namespace": "Network.AWS.DynamoDB.Query",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": {
                "token": {
                    "input": "qExclusiveStartKey",
                    "output": "qrLastEvaluatedKey"
                },
                "type": "next",
                "resultKey": "qrItems"
            },
            "name": "Query",
            "method": "post",
            "documentation": "\u003cp\u003eA \u003ci\u003eQuery\u003c/i\u003e operation directly accesses items from a table using the table primary key, or from an index using the index key. You must provide a specific hash key value. You can narrow the scope of the query by using comparison operators on the range key value, or on the index key. You can use the \u003ci\u003eScanIndexForward\u003c/i\u003e parameter to get results in forward or reverse order, by range key or by index key. \u003c/p\u003e \u003cp\u003eQueries that do not return results consume the minimum number of read capacity units for that type of read operation.\u003c/p\u003e \u003cp\u003eIf the total number of items meeting the query criteria exceeds the result set size limit of 1 MB, the query stops and results are returned to the user with \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to continue the query in a subsequent operation. Unlike a \u003ci\u003eScan\u003c/i\u003e operation, a \u003ci\u003eQuery\u003c/i\u003e operation never returns both an empty result set and a \u003ci\u003eLastEvaluatedKey\u003c/i\u003e. The \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is only provided if the results exceed 1 MB, or if you have used \u003ci\u003eLimit\u003c/i\u003e. \u003c/p\u003e \u003cp\u003eYou can query a table, a local secondary index, or a global secondary index. For a query on a table or on a local secondary index, you can set \u003ci\u003eConsistentRead\u003c/i\u003e to true and obtain a strongly consistent result. Global secondary indexes support eventually consistent reads only, so do not specify \u003ci\u003eConsistentRead\u003c/i\u003e when querying a global secondary index.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 27,
                "ctor": "query",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "qTableName",
                        "name": "_qTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested items. \u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qIndexName",
                        "name": "_qIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of an index to query. This index can be any local secondary index or global secondary index on the table.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qSelect",
                        "name": "_qSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ci\u003eAttributesToGet\u003c/i\u003e. This return value is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without specifying any value for \u003ci\u003eSelect\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you query a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ci\u003eSelect\u003c/i\u003e nor \u003ci\u003eAttributesToGet\u003c/i\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e when accessing a table, and \u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e when accessing an index. You cannot use both \u003ci\u003eSelect\u003c/i\u003e and \u003ci\u003eAttributesToGet\u003c/i\u003e together in a single request, unless the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "qAttributesToGet",
                        "name": "_qAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e \u003cp\u003eYou cannot use both \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eSelect\u003c/i\u003e together in a \u003ci\u003eQuery\u003c/i\u003e request, \u003ci\u003eunless\u003c/i\u003e the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e \u003cp\u003eIf you query a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qLimit",
                        "name": "_qLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003eThe maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\" \u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qConsistentRead",
                        "name": "_qConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.\u003c/p\u003e \u003cp\u003eStrongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with \u003ci\u003eConsistentRead\u003c/i\u003e set to \u003ccode\u003etrue\u003c/code\u003e, you will receive an error message.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qKeyConditions",
                        "name": "_qKeyConditions",
                        "shape": "KeyConditions",
                        "locationName": "KeyConditions",
                        "documentation": "\u003cp\u003eThe selection criteria for the query. For a query on a table, you can have conditions only on the table primary key attributes. You must specify the hash key attribute name and value as an \u003ccode\u003eEQ\u003c/code\u003e condition. You can optionally specify a second condition, referring to the range key attribute.\u003c/p\u003e \u003cp\u003eFor a query on an index, you can have conditions only on the index key attributes. You must specify the index hash attribute name and value as an EQ condition. You can optionally specify a second condition, referring to the index key range attribute.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eKeyConditions\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes, for example, equals, greater than, less than, and so on.\u003c/p\u003e \u003cp\u003eFor \u003ci\u003eKeyConditions\u003c/i\u003e, only the following comparison operators are supported:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eEQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThe following are descriptions of these comparison operators.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qQueryFilter",
                        "name": "_qQueryFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "QueryFilter",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eFilterExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eQueryFilter\u003c/i\u003e and \u003ci\u003eFilterExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA condition that evaluates the query results and returns only the desired values.\u003c/p\u003e \u003cp\u003eIf you specify more than one condition in the \u003ci\u003eQueryFilter\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eQueryFilter\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the operator specified in \u003ci\u003eComparisonOperator\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eFor complete descriptions of all comparison operators, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html\"\u003eAPI_Condition.html\u003c/a\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qConditionalOperator",
                        "name": "_qConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eQueryFilter\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qScanIndexForward",
                        "name": "_qScanIndexForward",
                        "shape": "BooleanObject",
                        "locationName": "ScanIndexForward",
                        "documentation": "\u003cp\u003eA value that specifies ascending (true) or descending (false) traversal of the index. DynamoDB returns results reflecting the requested order determined by the range key. If the data type is Number, the results are returned in numeric order. For type String, the results are returned in order of ASCII character code values. For type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eScanIndexForward\u003c/i\u003e is not specified, the results are returned in ascending order.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExclusiveStartKey",
                        "name": "_qExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedKey\u003c/i\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ci\u003eExclusiveStartKey\u003c/i\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qReturnConsumedCapacity",
                        "name": "_qReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qProjectionExpression",
                        "name": "_qProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qFilterExpression",
                        "name": "_qFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "\u003cp\u003eA condition that evaluates the query results and returns only the desired values.\u003c/p\u003e \u003cp\u003eThe condition you specify is applied to the items queried; any items that do not match the expression are not returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeNames",
                        "name": "_qExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeValues",
                        "name": "_qExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "qTableName",
                        "name": "_qTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested items. \u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "qAttributesToGet",
                        "name": "_qAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e \u003cp\u003eYou cannot use both \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eSelect\u003c/i\u003e together in a \u003ci\u003eQuery\u003c/i\u003e request, \u003ci\u003eunless\u003c/i\u003e the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e \u003cp\u003eIf you query a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 26,
                "queryPad": 0,
                "name": "Query",
                "query": [],
                "locationPad": 26,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qIndexName",
                        "name": "_qIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of an index to query. This index can be any local secondary index or global secondary index on the table.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qSelect",
                        "name": "_qSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ci\u003eAttributesToGet\u003c/i\u003e. This return value is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without specifying any value for \u003ci\u003eSelect\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you query a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ci\u003eSelect\u003c/i\u003e nor \u003ci\u003eAttributesToGet\u003c/i\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e when accessing a table, and \u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e when accessing an index. You cannot use both \u003ci\u003eSelect\u003c/i\u003e and \u003ci\u003eAttributesToGet\u003c/i\u003e together in a single request, unless the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qLimit",
                        "name": "_qLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003eThe maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\" \u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qConsistentRead",
                        "name": "_qConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.\u003c/p\u003e \u003cp\u003eStrongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with \u003ci\u003eConsistentRead\u003c/i\u003e set to \u003ccode\u003etrue\u003c/code\u003e, you will receive an error message.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qKeyConditions",
                        "name": "_qKeyConditions",
                        "shape": "KeyConditions",
                        "locationName": "KeyConditions",
                        "documentation": "\u003cp\u003eThe selection criteria for the query. For a query on a table, you can have conditions only on the table primary key attributes. You must specify the hash key attribute name and value as an \u003ccode\u003eEQ\u003c/code\u003e condition. You can optionally specify a second condition, referring to the range key attribute.\u003c/p\u003e \u003cp\u003eFor a query on an index, you can have conditions only on the index key attributes. You must specify the index hash attribute name and value as an EQ condition. You can optionally specify a second condition, referring to the index key range attribute.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eKeyConditions\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes, for example, equals, greater than, less than, and so on.\u003c/p\u003e \u003cp\u003eFor \u003ci\u003eKeyConditions\u003c/i\u003e, only the following comparison operators are supported:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eEQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThe following are descriptions of these comparison operators.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qQueryFilter",
                        "name": "_qQueryFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "QueryFilter",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eFilterExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eQueryFilter\u003c/i\u003e and \u003ci\u003eFilterExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA condition that evaluates the query results and returns only the desired values.\u003c/p\u003e \u003cp\u003eIf you specify more than one condition in the \u003ci\u003eQueryFilter\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eQueryFilter\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the operator specified in \u003ci\u003eComparisonOperator\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eFor complete descriptions of all comparison operators, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html\"\u003eAPI_Condition.html\u003c/a\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qConditionalOperator",
                        "name": "_qConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eQueryFilter\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qScanIndexForward",
                        "name": "_qScanIndexForward",
                        "shape": "BooleanObject",
                        "locationName": "ScanIndexForward",
                        "documentation": "\u003cp\u003eA value that specifies ascending (true) or descending (false) traversal of the index. DynamoDB returns results reflecting the requested order determined by the range key. If the data type is Number, the results are returned in numeric order. For type String, the results are returned in order of ASCII character code values. For type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eScanIndexForward\u003c/i\u003e is not specified, the results are returned in ascending order.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExclusiveStartKey",
                        "name": "_qExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedKey\u003c/i\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ci\u003eExclusiveStartKey\u003c/i\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qReturnConsumedCapacity",
                        "name": "_qReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qProjectionExpression",
                        "name": "_qProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qFilterExpression",
                        "name": "_qFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "\u003cp\u003eA condition that evaluates the query results and returns only the desired values.\u003c/p\u003e \u003cp\u003eThe condition you specify is applied to the items queried; any items that do not match the expression are not returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeNames",
                        "name": "_qExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeValues",
                        "name": "_qExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "qAttributesToGet",
                        "name": "_qAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e \u003cp\u003eYou cannot use both \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eSelect\u003c/i\u003e together in a \u003ci\u003eQuery\u003c/i\u003e request, \u003ci\u003eunless\u003c/i\u003e the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e \u003cp\u003eIf you query a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qConditionalOperator",
                        "name": "_qConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eQueryFilter\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qConsistentRead",
                        "name": "_qConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003etrue\u003c/code\u003e, then the operation uses strongly consistent reads; otherwise, eventually consistent reads are used.\u003c/p\u003e \u003cp\u003eStrongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with \u003ci\u003eConsistentRead\u003c/i\u003e set to \u003ccode\u003etrue\u003c/code\u003e, you will receive an error message.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExclusiveStartKey",
                        "name": "_qExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedKey\u003c/i\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ci\u003eExclusiveStartKey\u003c/i\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeNames",
                        "name": "_qExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeValues",
                        "name": "_qExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qFilterExpression",
                        "name": "_qFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "\u003cp\u003eA condition that evaluates the query results and returns only the desired values.\u003c/p\u003e \u003cp\u003eThe condition you specify is applied to the items queried; any items that do not match the expression are not returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qIndexName",
                        "name": "_qIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "\u003cp\u003eThe name of an index to query. This index can be any local secondary index or global secondary index on the table.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qKeyConditions",
                        "name": "_qKeyConditions",
                        "shape": "KeyConditions",
                        "locationName": "KeyConditions",
                        "documentation": "\u003cp\u003eThe selection criteria for the query. For a query on a table, you can have conditions only on the table primary key attributes. You must specify the hash key attribute name and value as an \u003ccode\u003eEQ\u003c/code\u003e condition. You can optionally specify a second condition, referring to the range key attribute.\u003c/p\u003e \u003cp\u003eFor a query on an index, you can have conditions only on the index key attributes. You must specify the index hash attribute name and value as an EQ condition. You can optionally specify a second condition, referring to the index key range attribute.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eKeyConditions\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes, for example, equals, greater than, less than, and so on.\u003c/p\u003e \u003cp\u003eFor \u003ci\u003eKeyConditions\u003c/i\u003e, only the following comparison operators are supported:\u003c/p\u003e \u003cp\u003e \u003ccode\u003eEQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN\u003c/code\u003e \u003c/p\u003e \u003cp\u003eThe following are descriptions of these comparison operators.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qLimit",
                        "name": "_qLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003eThe maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\" \u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qProjectionExpression",
                        "name": "_qProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "qQueryFilter",
                        "name": "_qQueryFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "QueryFilter",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eFilterExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eQueryFilter\u003c/i\u003e and \u003ci\u003eFilterExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA condition that evaluates the query results and returns only the desired values.\u003c/p\u003e \u003cp\u003eIf you specify more than one condition in the \u003ci\u003eQueryFilter\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eQueryFilter\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the operator specified in \u003ci\u003eComparisonOperator\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eFor complete descriptions of all comparison operators, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html\"\u003eAPI_Condition.html\u003c/a\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qReturnConsumedCapacity",
                        "name": "_qReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qScanIndexForward",
                        "name": "_qScanIndexForward",
                        "shape": "BooleanObject",
                        "locationName": "ScanIndexForward",
                        "documentation": "\u003cp\u003eA value that specifies ascending (true) or descending (false) traversal of the index. DynamoDB returns results reflecting the requested order determined by the range key. If the data type is Number, the results are returned in numeric order. For type String, the results are returned in order of ASCII character code values. For type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eScanIndexForward\u003c/i\u003e is not specified, the results are returned in ascending order.\u003c/p\u003e",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "qSelect",
                        "name": "_qSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ci\u003eAttributesToGet\u003c/i\u003e. This return value is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without specifying any value for \u003ci\u003eSelect\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you query a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB will fetch each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.\u003c/p\u003e \u003cp\u003eIf you query a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ci\u003eSelect\u003c/i\u003e nor \u003ci\u003eAttributesToGet\u003c/i\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e when accessing a table, and \u003ccode\u003eALL_PROJECTED_ATTRIBUTES\u003c/code\u003e when accessing an index. You cannot use both \u003ci\u003eSelect\u003c/i\u003e and \u003ci\u003eAttributesToGet\u003c/i\u003e together in a single request, unless the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "qTableName",
                        "name": "_qTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested items. \u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 19,
                "ctor": "scanResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "srItems",
                        "name": "_srItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "\u003cp\u003eAn array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.\u003c/p\u003e",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srCount",
                        "name": "_srCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you set \u003ci\u003eScanFilter\u003c/i\u003e in the request, then \u003ci\u003eCount\u003c/i\u003e is the number of items returned after the filter was applied, and \u003ci\u003eScannedCount\u003c/i\u003e is the number of matching items before the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eCount\u003c/i\u003e is the same as \u003ci\u003eScannedCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srScannedCount",
                        "name": "_srScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "\u003cp\u003eThe number of items evaluated, before any \u003ci\u003eScanFilter\u003c/i\u003e is applied. A high \u003ci\u003eScannedCount\u003c/i\u003e value with few, or no, \u003ci\u003eCount\u003c/i\u003e results indicates an inefficient \u003ci\u003eScan\u003c/i\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eScannedCount\u003c/i\u003e is the same as \u003ci\u003eCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "srLastEvaluatedKey",
                        "name": "_srLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srConsumedCapacity",
                        "name": "_srConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "ScanResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "srItems",
                        "name": "_srItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "\u003cp\u003eAn array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.\u003c/p\u003e",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srCount",
                        "name": "_srCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you set \u003ci\u003eScanFilter\u003c/i\u003e in the request, then \u003ci\u003eCount\u003c/i\u003e is the number of items returned after the filter was applied, and \u003ci\u003eScannedCount\u003c/i\u003e is the number of matching items before the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eCount\u003c/i\u003e is the same as \u003ci\u003eScannedCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srScannedCount",
                        "name": "_srScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "\u003cp\u003eThe number of items evaluated, before any \u003ci\u003eScanFilter\u003c/i\u003e is applied. A high \u003ci\u003eScannedCount\u003c/i\u003e value with few, or no, \u003ci\u003eCount\u003c/i\u003e results indicates an inefficient \u003ci\u003eScan\u003c/i\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eScannedCount\u003c/i\u003e is the same as \u003ci\u003eCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "srLastEvaluatedKey",
                        "name": "_srLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srConsumedCapacity",
                        "name": "_srConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srConsumedCapacity",
                        "name": "_srConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srCount",
                        "name": "_srCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "\u003cp\u003eThe number of items in the response.\u003c/p\u003e \u003cp\u003eIf you set \u003ci\u003eScanFilter\u003c/i\u003e in the request, then \u003ci\u003eCount\u003c/i\u003e is the number of items returned after the filter was applied, and \u003ci\u003eScannedCount\u003c/i\u003e is the number of matching items before the filter was applied.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eCount\u003c/i\u003e is the same as \u003ci\u003eScannedCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "srItems",
                        "name": "_srItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "\u003cp\u003eAn array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.\u003c/p\u003e",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "srLastEvaluatedKey",
                        "name": "_srLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "\u003cp\u003eThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty, then the \"last page\" of results has been processed and there is no more data to be retrieved.\u003c/p\u003e \u003cp\u003eIf \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when \u003ci\u003eLastEvaluatedKey\u003c/i\u003e is empty.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "srScannedCount",
                        "name": "_srScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "\u003cp\u003eThe number of items evaluated, before any \u003ci\u003eScanFilter\u003c/i\u003e is applied. A high \u003ci\u003eScannedCount\u003c/i\u003e value with few, or no, \u003ci\u003eCount\u003c/i\u003e results indicates an inefficient \u003ci\u003eScan\u003c/i\u003e operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count\"\u003eCount and ScannedCount\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you did not use a filter in the request, then \u003ci\u003eScannedCount\u003c/i\u003e is the same as \u003ci\u003eCount\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html",
            "namespace": "Network.AWS.DynamoDB.Scan",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": {
                "token": {
                    "input": "sExclusiveStartKey",
                    "output": "srLastEvaluatedKey"
                },
                "type": "next",
                "resultKey": "srItems"
            },
            "name": "Scan",
            "method": "post",
            "documentation": "\u003cp\u003eThe \u003ci\u003eScan\u003c/i\u003e operation returns one or more items and item attributes by accessing every item in the table. To have DynamoDB return fewer items, you can provide a \u003ci\u003eScanFilter\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eIf the total number of scanned items exceeds the maximum data set size limit of 1 MB, the scan stops and results are returned to the user as a \u003ci\u003eLastEvaluatedKey\u003c/i\u003e value to continue the scan in a subsequent operation. The results also include the number of items exceeding the limit. A scan can result in no table data meeting the filter criteria. \u003c/p\u003e \u003cp\u003eThe result set is eventually consistent. \u003c/p\u003e \u003cp\u003eBy default, \u003ci\u003eScan\u003c/i\u003e operations proceed sequentially; however, for faster performance on large tables, applications can request a parallel \u003ci\u003eScan\u003c/i\u003e operation by specifying the \u003ci\u003eSegment\u003c/i\u003e and \u003ci\u003eTotalSegments\u003c/i\u003e parameters. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#QueryAndScanParallelScan\"\u003eParallel Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 27,
                "ctor": "scan",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "sTableName",
                        "name": "_sTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested items.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "sAttributesToGet",
                        "name": "_sAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sLimit",
                        "name": "_sLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003eThe maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\" \u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sSelect",
                        "name": "_sSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, or the count of matching items.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ci\u003eAttributesToGet\u003c/i\u003e. This return value is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without specifying any value for \u003ci\u003eSelect\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ci\u003eSelect\u003c/i\u003e nor \u003ci\u003eAttributesToGet\u003c/i\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e. You cannot use both \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eSelect\u003c/i\u003e together in a single request, unless the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sScanFilter",
                        "name": "_sScanFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "ScanFilter",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eFilterExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eScanFilter\u003c/i\u003e and \u003ci\u003eFilterExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA condition that evaluates the scan results and returns only the desired values.\u003c/p\u003e \u003cp\u003eIf you specify more than one condition in the \u003ci\u003eScanFilter\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eScanFilter\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the operator specified in \u003ci\u003eComparisonOperator\u003c/i\u003e .\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eFor complete descriptions of all comparison operators, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html\"\u003eCondition\u003c/a\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sConditionalOperator",
                        "name": "_sConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eScanFilter\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExclusiveStartKey",
                        "name": "_sExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedKey\u003c/i\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ci\u003eExclusiveStartKey\u003c/i\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e \u003cp\u003eIn a parallel scan, a \u003ci\u003eScan\u003c/i\u003e request that includes \u003ci\u003eExclusiveStartKey\u003c/i\u003e must specify the same segment whose previous \u003ci\u003eScan\u003c/i\u003e returned the corresponding value of \u003ci\u003eLastEvaluatedKey\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sReturnConsumedCapacity",
                        "name": "_sReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sTotalSegments",
                        "name": "_sTotalSegments",
                        "shape": "ScanTotalSegments",
                        "locationName": "TotalSegments",
                        "documentation": "\u003cp\u003eFor a parallel \u003ci\u003eScan\u003c/i\u003e request, \u003ci\u003eTotalSegments\u003c/i\u003e represents the total number of segments into which the \u003ci\u003eScan\u003c/i\u003e operation will be divided. The value of \u003ci\u003eTotalSegments\u003c/i\u003e corresponds to the number of application workers that will perform the parallel scan. For example, if you want to scan a table using four application threads, specify a \u003ci\u003eTotalSegments\u003c/i\u003e value of 4.\u003c/p\u003e \u003cp\u003eThe value for \u003ci\u003eTotalSegments\u003c/i\u003e must be greater than or equal to 1, and less than or equal to 1000000. If you specify a \u003ci\u003eTotalSegments\u003c/i\u003e value of 1, the \u003ci\u003eScan\u003c/i\u003e operation will be sequential rather than parallel.\u003c/p\u003e \u003cp\u003eIf you specify \u003ci\u003eTotalSegments\u003c/i\u003e, you must also specify \u003ci\u003eSegment\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sSegment",
                        "name": "_sSegment",
                        "shape": "ScanSegment",
                        "locationName": "Segment",
                        "documentation": "\u003cp\u003eFor a parallel \u003ci\u003eScan\u003c/i\u003e request, \u003ci\u003eSegment\u003c/i\u003e identifies an individual segment to be scanned by an application worker.\u003c/p\u003e \u003cp\u003eSegment IDs are zero-based, so the first segment is always 0. For example, if you want to scan a table using four application threads, the first thread specifies a \u003ci\u003eSegment\u003c/i\u003e value of 0, the second thread specifies 1, and so on.\u003c/p\u003e \u003cp\u003eThe value of \u003ci\u003eLastEvaluatedKey\u003c/i\u003e returned from a parallel \u003ci\u003eScan\u003c/i\u003e request must be used as \u003ci\u003eExclusiveStartKey\u003c/i\u003e with the same segment ID in a subsequent \u003ci\u003eScan\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eThe value for \u003ci\u003eSegment\u003c/i\u003e must be greater than or equal to 0, and less than the value provided for \u003ci\u003eTotalSegments\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you specify \u003ci\u003eSegment\u003c/i\u003e, you must also specify \u003ci\u003eTotalSegments\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sProjectionExpression",
                        "name": "_sProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sFilterExpression",
                        "name": "_sFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "\u003cp\u003eA condition that evaluates the scan results and returns only the desired values.\u003c/p\u003e \u003cp\u003eThe condition you specify is applied to the items scanned; any items that do not match the expression are not returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeNames",
                        "name": "_sExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeValues",
                        "name": "_sExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "sTableName",
                        "name": "_sTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested items.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "sAttributesToGet",
                        "name": "_sAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 26,
                "queryPad": 0,
                "name": "Scan",
                "query": [],
                "locationPad": 26,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sLimit",
                        "name": "_sLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003eThe maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\" \u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sSelect",
                        "name": "_sSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, or the count of matching items.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ci\u003eAttributesToGet\u003c/i\u003e. This return value is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without specifying any value for \u003ci\u003eSelect\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ci\u003eSelect\u003c/i\u003e nor \u003ci\u003eAttributesToGet\u003c/i\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e. You cannot use both \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eSelect\u003c/i\u003e together in a single request, unless the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sScanFilter",
                        "name": "_sScanFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "ScanFilter",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eFilterExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eScanFilter\u003c/i\u003e and \u003ci\u003eFilterExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA condition that evaluates the scan results and returns only the desired values.\u003c/p\u003e \u003cp\u003eIf you specify more than one condition in the \u003ci\u003eScanFilter\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eScanFilter\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the operator specified in \u003ci\u003eComparisonOperator\u003c/i\u003e .\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eFor complete descriptions of all comparison operators, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html\"\u003eCondition\u003c/a\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sConditionalOperator",
                        "name": "_sConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eScanFilter\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExclusiveStartKey",
                        "name": "_sExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedKey\u003c/i\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ci\u003eExclusiveStartKey\u003c/i\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e \u003cp\u003eIn a parallel scan, a \u003ci\u003eScan\u003c/i\u003e request that includes \u003ci\u003eExclusiveStartKey\u003c/i\u003e must specify the same segment whose previous \u003ci\u003eScan\u003c/i\u003e returned the corresponding value of \u003ci\u003eLastEvaluatedKey\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sReturnConsumedCapacity",
                        "name": "_sReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sTotalSegments",
                        "name": "_sTotalSegments",
                        "shape": "ScanTotalSegments",
                        "locationName": "TotalSegments",
                        "documentation": "\u003cp\u003eFor a parallel \u003ci\u003eScan\u003c/i\u003e request, \u003ci\u003eTotalSegments\u003c/i\u003e represents the total number of segments into which the \u003ci\u003eScan\u003c/i\u003e operation will be divided. The value of \u003ci\u003eTotalSegments\u003c/i\u003e corresponds to the number of application workers that will perform the parallel scan. For example, if you want to scan a table using four application threads, specify a \u003ci\u003eTotalSegments\u003c/i\u003e value of 4.\u003c/p\u003e \u003cp\u003eThe value for \u003ci\u003eTotalSegments\u003c/i\u003e must be greater than or equal to 1, and less than or equal to 1000000. If you specify a \u003ci\u003eTotalSegments\u003c/i\u003e value of 1, the \u003ci\u003eScan\u003c/i\u003e operation will be sequential rather than parallel.\u003c/p\u003e \u003cp\u003eIf you specify \u003ci\u003eTotalSegments\u003c/i\u003e, you must also specify \u003ci\u003eSegment\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sSegment",
                        "name": "_sSegment",
                        "shape": "ScanSegment",
                        "locationName": "Segment",
                        "documentation": "\u003cp\u003eFor a parallel \u003ci\u003eScan\u003c/i\u003e request, \u003ci\u003eSegment\u003c/i\u003e identifies an individual segment to be scanned by an application worker.\u003c/p\u003e \u003cp\u003eSegment IDs are zero-based, so the first segment is always 0. For example, if you want to scan a table using four application threads, the first thread specifies a \u003ci\u003eSegment\u003c/i\u003e value of 0, the second thread specifies 1, and so on.\u003c/p\u003e \u003cp\u003eThe value of \u003ci\u003eLastEvaluatedKey\u003c/i\u003e returned from a parallel \u003ci\u003eScan\u003c/i\u003e request must be used as \u003ci\u003eExclusiveStartKey\u003c/i\u003e with the same segment ID in a subsequent \u003ci\u003eScan\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eThe value for \u003ci\u003eSegment\u003c/i\u003e must be greater than or equal to 0, and less than the value provided for \u003ci\u003eTotalSegments\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you specify \u003ci\u003eSegment\u003c/i\u003e, you must also specify \u003ci\u003eTotalSegments\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sProjectionExpression",
                        "name": "_sProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sFilterExpression",
                        "name": "_sFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "\u003cp\u003eA condition that evaluates the scan results and returns only the desired values.\u003c/p\u003e \u003cp\u003eThe condition you specify is applied to the items scanned; any items that do not match the expression are not returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeNames",
                        "name": "_sExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeValues",
                        "name": "_sExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "sAttributesToGet",
                        "name": "_sAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eProjectionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eProjectionExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter allows you to retrieve lists or maps; however, it cannot retrieve individual list or map elements.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eThe names of one or more attributes to retrieve. If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e \u003cp\u003eNote that \u003ci\u003eAttributesToGet\u003c/i\u003e has no effect on provisioned throughput consumption. DynamoDB determines capacity units consumed based on item size, not on the amount of data that is returned to an application.\u003c/p\u003e",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sConditionalOperator",
                        "name": "_sConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e\u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e\u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eScanFilter\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExclusiveStartKey",
                        "name": "_sExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "\u003cp\u003eThe primary key of the first item that this operation will evaluate. Use the value that was returned for \u003ci\u003eLastEvaluatedKey\u003c/i\u003e in the previous operation.\u003c/p\u003e \u003cp\u003eThe data type for \u003ci\u003eExclusiveStartKey\u003c/i\u003e must be String, Number or Binary. No set data types are allowed.\u003c/p\u003e \u003cp\u003eIn a parallel scan, a \u003ci\u003eScan\u003c/i\u003e request that includes \u003ci\u003eExclusiveStartKey\u003c/i\u003e must specify the same segment whose previous \u003ci\u003eScan\u003c/i\u003e returned the corresponding value of \u003ci\u003eLastEvaluatedKey\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeNames",
                        "name": "_sExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeValues",
                        "name": "_sExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sFilterExpression",
                        "name": "_sFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "\u003cp\u003eA condition that evaluates the scan results and returns only the desired values.\u003c/p\u003e \u003cp\u003eThe condition you specify is applied to the items scanned; any items that do not match the expression are not returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sLimit",
                        "name": "_sLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "\u003cp\u003eThe maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed data set size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in \u003ci\u003eLastEvaluatedKey\u003c/i\u003e to apply in a subsequent operation to continue the operation. For more information, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html\" \u003eQuery and Scan\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sProjectionExpression",
                        "name": "_sProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "\u003cp\u003eOne or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\u003c/p\u003e \u003cp\u003eIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sReturnConsumedCapacity",
                        "name": "_sReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "sScanFilter",
                        "name": "_sScanFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "ScanFilter",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eFilterExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eScanFilter\u003c/i\u003e and \u003ci\u003eFilterExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA condition that evaluates the scan results and returns only the desired values.\u003c/p\u003e \u003cp\u003eIf you specify more than one condition in the \u003ci\u003eScanFilter\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eScanFilter\u003c/i\u003e element consists of an attribute name to compare, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the operator specified in \u003ci\u003eComparisonOperator\u003c/i\u003e .\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\"\u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003cp\u003eFor information on specifying data types in JSON, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html\"\u003eJSON Data Format\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes. For example, equals, greater than, less than, etc.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eFor complete descriptions of all comparison operators, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html\"\u003eCondition\u003c/a\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sSegment",
                        "name": "_sSegment",
                        "shape": "ScanSegment",
                        "locationName": "Segment",
                        "documentation": "\u003cp\u003eFor a parallel \u003ci\u003eScan\u003c/i\u003e request, \u003ci\u003eSegment\u003c/i\u003e identifies an individual segment to be scanned by an application worker.\u003c/p\u003e \u003cp\u003eSegment IDs are zero-based, so the first segment is always 0. For example, if you want to scan a table using four application threads, the first thread specifies a \u003ci\u003eSegment\u003c/i\u003e value of 0, the second thread specifies 1, and so on.\u003c/p\u003e \u003cp\u003eThe value of \u003ci\u003eLastEvaluatedKey\u003c/i\u003e returned from a parallel \u003ci\u003eScan\u003c/i\u003e request must be used as \u003ci\u003eExclusiveStartKey\u003c/i\u003e with the same segment ID in a subsequent \u003ci\u003eScan\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eThe value for \u003ci\u003eSegment\u003c/i\u003e must be greater than or equal to 0, and less than the value provided for \u003ci\u003eTotalSegments\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf you specify \u003ci\u003eSegment\u003c/i\u003e, you must also specify \u003ci\u003eTotalSegments\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sSelect",
                        "name": "_sSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "\u003cp\u003eThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, or the count of matching items.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e - Returns all of the item attributes.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCOUNT\u003c/code\u003e - Returns the number of matching items, rather than the matching items themselves.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e - Returns only the attributes listed in \u003ci\u003eAttributesToGet\u003c/i\u003e. This return value is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without specifying any value for \u003ci\u003eSelect\u003c/i\u003e.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf neither \u003ci\u003eSelect\u003c/i\u003e nor \u003ci\u003eAttributesToGet\u003c/i\u003e are specified, DynamoDB defaults to \u003ccode\u003eALL_ATTRIBUTES\u003c/code\u003e. You cannot use both \u003ci\u003eAttributesToGet\u003c/i\u003e and \u003ci\u003eSelect\u003c/i\u003e together in a single request, unless the value for \u003ci\u003eSelect\u003c/i\u003e is \u003ccode\u003eSPECIFIC_ATTRIBUTES\u003c/code\u003e. (This usage is equivalent to specifying \u003ci\u003eAttributesToGet\u003c/i\u003e without any value for \u003ci\u003eSelect\u003c/i\u003e.)\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "sTableName",
                        "name": "_sTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the requested items.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "sTotalSegments",
                        "name": "_sTotalSegments",
                        "shape": "ScanTotalSegments",
                        "locationName": "TotalSegments",
                        "documentation": "\u003cp\u003eFor a parallel \u003ci\u003eScan\u003c/i\u003e request, \u003ci\u003eTotalSegments\u003c/i\u003e represents the total number of segments into which the \u003ci\u003eScan\u003c/i\u003e operation will be divided. The value of \u003ci\u003eTotalSegments\u003c/i\u003e corresponds to the number of application workers that will perform the parallel scan. For example, if you want to scan a table using four application threads, specify a \u003ci\u003eTotalSegments\u003c/i\u003e value of 4.\u003c/p\u003e \u003cp\u003eThe value for \u003ci\u003eTotalSegments\u003c/i\u003e must be greater than or equal to 1, and less than or equal to 1000000. If you specify a \u003ci\u003eTotalSegments\u003c/i\u003e value of 1, the \u003ci\u003eScan\u003c/i\u003e operation will be sequential rather than parallel.\u003c/p\u003e \u003cp\u003eIf you specify \u003ci\u003eTotalSegments\u003c/i\u003e, you must also specify \u003ci\u003eSegment\u003c/i\u003e.\u003c/p\u003e",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "updateItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uirAttributes",
                        "name": "_uirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eA map of attribute values as they appeared before the \u003ci\u003eUpdateItem\u003c/i\u003e operation. This map only appears if \u003ci\u003eReturnValues\u003c/i\u003e was specified as something other than \u003ccode\u003eNONE\u003c/code\u003e in the request. Each element represents one attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uirConsumedCapacity",
                        "name": "_uirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uirItemCollectionMetrics",
                        "name": "_uirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": null,
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "UpdateItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uirAttributes",
                        "name": "_uirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eA map of attribute values as they appeared before the \u003ci\u003eUpdateItem\u003c/i\u003e operation. This map only appears if \u003ci\u003eReturnValues\u003c/i\u003e was specified as something other than \u003ccode\u003eNONE\u003c/code\u003e in the request. Each element represents one attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uirConsumedCapacity",
                        "name": "_uirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uirItemCollectionMetrics",
                        "name": "_uirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": null,
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uirAttributes",
                        "name": "_uirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "\u003cp\u003eA map of attribute values as they appeared before the \u003ci\u003eUpdateItem\u003c/i\u003e operation. This map only appears if \u003ci\u003eReturnValues\u003c/i\u003e was specified as something other than \u003ccode\u003eNONE\u003c/code\u003e in the request. Each element represents one attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uirConsumedCapacity",
                        "name": "_uirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uirItemCollectionMetrics",
                        "name": "_uirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": null,
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html",
            "namespace": "Network.AWS.DynamoDB.UpdateItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "UpdateItem",
            "method": "post",
            "documentation": "\u003cp\u003e Edits an existing item's attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update (insert a new attribute name-value pair if it doesn't exist, or replace an existing name-value pair if it has certain expected attribute values).\u003c/p\u003e \u003cp\u003eYou can also return the item's attribute values in the same \u003ci\u003eUpdateItem\u003c/i\u003e operation using the \u003ci\u003eReturnValues\u003c/i\u003e parameter.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "updateItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "uiTableName",
                        "name": "_uiTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the item to update. \u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiKey",
                        "name": "_uiKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eThe primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiAttributeUpdates",
                        "name": "_uiAttributeUpdates",
                        "shape": "AttributeUpdates",
                        "locationName": "AttributeUpdates",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eUpdateExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributeUpdates\u003c/i\u003e and \u003ci\u003eUpdateExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter can be used for modifying top-level attributes; however, it does not support individual list or map elements.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eThe names of attributes to be modified, the action to perform on each, and the new value for each. If you are updating an attribute that is an index key attribute for any indexes on that table, the attribute type must match the index key type defined in the \u003ci\u003eAttributesDefinition\u003c/i\u003e of the table description. You can use \u003ci\u003eUpdateItem\u003c/i\u003e to update any nonkey attributes.\u003c/p\u003e \u003cp\u003eAttribute values cannot be null. String and Binary type attributes must have lengths greater than zero. Set type attributes must not be empty. Requests with empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eAttributeUpdates\u003c/i\u003e element consists of an attribute name to modify, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - The new value, if applicable, for this attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAction\u003c/i\u003e - A value that specifies how to perform the update. This action is only valid for an existing attribute whose data type is Number or is a set; do not use \u003ccode\u003eADD\u003c/code\u003e for other data types. \u003c/p\u003e \u003cp\u003eIf an item with the specified primary key is found in the table, the following values perform the following actions:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Removes the attribute and its value, if no value is specified for \u003ccode\u003eDELETE\u003c/code\u003e. The data type of the specified value must match the existing value's data type.\u003c/p\u003e \u003cp\u003eIf a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specifies \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set, and if \u003ci\u003eValue\u003c/i\u003e is also a set, then \u003ci\u003eValue\u003c/i\u003e is appended to the existing set. For example, if the attribute value is the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an \u003ccode\u003eADD\u003c/code\u003e action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, \u003ci\u003eValue\u003c/i\u003e must also be a set of strings.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf no item with the specified key is found in the table, the following values perform the following actions: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Causes DynamoDB to create a new item with the specified primary key, and then adds the attribute. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Causes nothing to happen; there is no attribute to delete.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Causes DynamoDB to creat an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are Number and Number Set.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValueUpdate",
                        "type": "Map Text AttributeValueUpdate"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpected",
                        "name": "_uiExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003e ConditionExpression \u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003eUpdateItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionalOperator",
                        "name": "_uiConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnValues",
                        "name": "_uiReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared either before or after they were updated. For \u003ci\u003eUpdateItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - If \u003ci\u003eUpdateItem\u003c/i\u003e overwrote an attribute name-value pair, then the content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eUPDATED_OLD\u003c/code\u003e - The old versions of only the updated attributes are returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_NEW\u003c/code\u003e - All of the attributes of the new version of the item are returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eUPDATED_NEW\u003c/code\u003e - The new versions of only the updated attributes are returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnConsumedCapacity",
                        "name": "_uiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnItemCollectionMetrics",
                        "name": "_uiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiUpdateExpression",
                        "name": "_uiUpdateExpression",
                        "shape": "UpdateExpression",
                        "locationName": "UpdateExpression",
                        "documentation": "\u003cp\u003eAn expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.\u003c/p\u003e \u003cp\u003eThe following action values are available for \u003ci\u003eUpdateExpression\u003c/i\u003e.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eSET\u003c/code\u003e - Adds one or more attributes and values to an item. If any of these attribute already exist, they are replaced by the new values. You can also use \u003ccode\u003eSET\u003c/code\u003e to add or subtract from an attribute that is of type Number.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eSET\u003c/code\u003e supports the following functions:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eif_not_exists (path, operand)\u003c/code\u003e - if the item does not contain an attribute at the specified path, then \u003ccode\u003eif_not_exists\u003c/code\u003e evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003elist_append (operand, operand)\u003c/code\u003e - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThese function names are case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eREMOVE\u003c/code\u003e - Removes one or more attributes from an item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set and if \u003ci\u003eValue\u003c/i\u003e is also a set, then \u003ci\u003eValue\u003c/i\u003e is added to the existing set. For example, if the attribute value is the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an \u003ccode\u003eADD\u003c/code\u003e action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ci\u003eValue\u003c/i\u003e must also be a set of strings.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cimportant\u003e\u003cp\u003eThe \u003ccode\u003eADD\u003c/code\u003e action only supports Number and set data types. In addition, \u003ccode\u003eADD\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Deletes an element from a set.\u003c/p\u003e \u003cp\u003eIf a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specifies \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eThe \u003ccode\u003eDELETE\u003c/code\u003e action only supports Number and set data types. In addition, \u003ccode\u003eDELETE\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou can have many actions in a single expression, such as the following: \u003ccode\u003eSET a=:value1, b=:value2 DELETE :value3, :value4, :value5\u003c/code\u003e\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Boolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Comparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Logical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionExpression",
                        "name": "_uiConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional update to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eBoolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeNames",
                        "name": "_uiExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeValues",
                        "name": "_uiExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "uiTableName",
                        "name": "_uiTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the item to update. \u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "UpdateItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiKey",
                        "name": "_uiKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eThe primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiAttributeUpdates",
                        "name": "_uiAttributeUpdates",
                        "shape": "AttributeUpdates",
                        "locationName": "AttributeUpdates",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eUpdateExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributeUpdates\u003c/i\u003e and \u003ci\u003eUpdateExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter can be used for modifying top-level attributes; however, it does not support individual list or map elements.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eThe names of attributes to be modified, the action to perform on each, and the new value for each. If you are updating an attribute that is an index key attribute for any indexes on that table, the attribute type must match the index key type defined in the \u003ci\u003eAttributesDefinition\u003c/i\u003e of the table description. You can use \u003ci\u003eUpdateItem\u003c/i\u003e to update any nonkey attributes.\u003c/p\u003e \u003cp\u003eAttribute values cannot be null. String and Binary type attributes must have lengths greater than zero. Set type attributes must not be empty. Requests with empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eAttributeUpdates\u003c/i\u003e element consists of an attribute name to modify, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - The new value, if applicable, for this attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAction\u003c/i\u003e - A value that specifies how to perform the update. This action is only valid for an existing attribute whose data type is Number or is a set; do not use \u003ccode\u003eADD\u003c/code\u003e for other data types. \u003c/p\u003e \u003cp\u003eIf an item with the specified primary key is found in the table, the following values perform the following actions:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Removes the attribute and its value, if no value is specified for \u003ccode\u003eDELETE\u003c/code\u003e. The data type of the specified value must match the existing value's data type.\u003c/p\u003e \u003cp\u003eIf a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specifies \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set, and if \u003ci\u003eValue\u003c/i\u003e is also a set, then \u003ci\u003eValue\u003c/i\u003e is appended to the existing set. For example, if the attribute value is the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an \u003ccode\u003eADD\u003c/code\u003e action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, \u003ci\u003eValue\u003c/i\u003e must also be a set of strings.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf no item with the specified key is found in the table, the following values perform the following actions: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Causes DynamoDB to create a new item with the specified primary key, and then adds the attribute. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Causes nothing to happen; there is no attribute to delete.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Causes DynamoDB to creat an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are Number and Number Set.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValueUpdate",
                        "type": "Map Text AttributeValueUpdate"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpected",
                        "name": "_uiExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003e ConditionExpression \u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003eUpdateItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionalOperator",
                        "name": "_uiConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnValues",
                        "name": "_uiReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared either before or after they were updated. For \u003ci\u003eUpdateItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - If \u003ci\u003eUpdateItem\u003c/i\u003e overwrote an attribute name-value pair, then the content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eUPDATED_OLD\u003c/code\u003e - The old versions of only the updated attributes are returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_NEW\u003c/code\u003e - All of the attributes of the new version of the item are returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eUPDATED_NEW\u003c/code\u003e - The new versions of only the updated attributes are returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnConsumedCapacity",
                        "name": "_uiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnItemCollectionMetrics",
                        "name": "_uiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiUpdateExpression",
                        "name": "_uiUpdateExpression",
                        "shape": "UpdateExpression",
                        "locationName": "UpdateExpression",
                        "documentation": "\u003cp\u003eAn expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.\u003c/p\u003e \u003cp\u003eThe following action values are available for \u003ci\u003eUpdateExpression\u003c/i\u003e.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eSET\u003c/code\u003e - Adds one or more attributes and values to an item. If any of these attribute already exist, they are replaced by the new values. You can also use \u003ccode\u003eSET\u003c/code\u003e to add or subtract from an attribute that is of type Number.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eSET\u003c/code\u003e supports the following functions:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eif_not_exists (path, operand)\u003c/code\u003e - if the item does not contain an attribute at the specified path, then \u003ccode\u003eif_not_exists\u003c/code\u003e evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003elist_append (operand, operand)\u003c/code\u003e - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThese function names are case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eREMOVE\u003c/code\u003e - Removes one or more attributes from an item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set and if \u003ci\u003eValue\u003c/i\u003e is also a set, then \u003ci\u003eValue\u003c/i\u003e is added to the existing set. For example, if the attribute value is the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an \u003ccode\u003eADD\u003c/code\u003e action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ci\u003eValue\u003c/i\u003e must also be a set of strings.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cimportant\u003e\u003cp\u003eThe \u003ccode\u003eADD\u003c/code\u003e action only supports Number and set data types. In addition, \u003ccode\u003eADD\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Deletes an element from a set.\u003c/p\u003e \u003cp\u003eIf a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specifies \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eThe \u003ccode\u003eDELETE\u003c/code\u003e action only supports Number and set data types. In addition, \u003ccode\u003eDELETE\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou can have many actions in a single expression, such as the following: \u003ccode\u003eSET a=:value1, b=:value2 DELETE :value3, :value4, :value5\u003c/code\u003e\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Boolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Comparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Logical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionExpression",
                        "name": "_uiConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional update to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eBoolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeNames",
                        "name": "_uiExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeValues",
                        "name": "_uiExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiAttributeUpdates",
                        "name": "_uiAttributeUpdates",
                        "shape": "AttributeUpdates",
                        "locationName": "AttributeUpdates",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eUpdateExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eAttributeUpdates\u003c/i\u003e and \u003ci\u003eUpdateExpression\u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter can be used for modifying top-level attributes; however, it does not support individual list or map elements.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eThe names of attributes to be modified, the action to perform on each, and the new value for each. If you are updating an attribute that is an index key attribute for any indexes on that table, the attribute type must match the index key type defined in the \u003ci\u003eAttributesDefinition\u003c/i\u003e of the table description. You can use \u003ci\u003eUpdateItem\u003c/i\u003e to update any nonkey attributes.\u003c/p\u003e \u003cp\u003eAttribute values cannot be null. String and Binary type attributes must have lengths greater than zero. Set type attributes must not be empty. Requests with empty values will be rejected with a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eEach \u003ci\u003eAttributeUpdates\u003c/i\u003e element consists of an attribute name to modify, along with the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - The new value, if applicable, for this attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAction\u003c/i\u003e - A value that specifies how to perform the update. This action is only valid for an existing attribute whose data type is Number or is a set; do not use \u003ccode\u003eADD\u003c/code\u003e for other data types. \u003c/p\u003e \u003cp\u003eIf an item with the specified primary key is found in the table, the following values perform the following actions:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Removes the attribute and its value, if no value is specified for \u003ccode\u003eDELETE\u003c/code\u003e. The data type of the specified value must match the existing value's data type.\u003c/p\u003e \u003cp\u003eIf a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specifies \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set, and if \u003ci\u003eValue\u003c/i\u003e is also a set, then \u003ci\u003eValue\u003c/i\u003e is appended to the existing set. For example, if the attribute value is the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an \u003ccode\u003eADD\u003c/code\u003e action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, \u003ci\u003eValue\u003c/i\u003e must also be a set of strings.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf no item with the specified key is found in the table, the following values perform the following actions: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003ePUT\u003c/code\u003e - Causes DynamoDB to create a new item with the specified primary key, and then adds the attribute. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Causes nothing to happen; there is no attribute to delete.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Causes DynamoDB to creat an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are Number and Number Set.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValueUpdate",
                        "type": "Map Text AttributeValueUpdate"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionExpression",
                        "name": "_uiConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "\u003cp\u003eA condition that must be satisfied in order for a conditional update to succeed.\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eBoolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eComparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eLogical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionalOperator",
                        "name": "_uiConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003eConditionExpression\u003c/i\u003e instead. Note that if you use \u003ci\u003eConditionalOperator\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA logical operator to apply to the conditions in the \u003ci\u003eExpected\u003c/i\u003e map:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eAND\u003c/code\u003e - If all of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eOR\u003c/code\u003e - If at least one of the conditions evaluate to true, then the entire map evaluates to true.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eIf you omit \u003ci\u003eConditionalOperator\u003c/i\u003e, then \u003ccode\u003eAND\u003c/code\u003e is the default.\u003c/p\u003e \u003cp\u003eThe operation will succeed only if the entire map evaluates to true.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpected",
                        "name": "_uiExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "\u003cimportant\u003e \u003cp\u003eThere is a newer parameter available. Use \u003ci\u003e ConditionExpression \u003c/i\u003e instead. Note that if you use \u003ci\u003eExpected\u003c/i\u003e and \u003ci\u003e ConditionExpression \u003c/i\u003e at the same time, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e \u003cp\u003eThis parameter does not support lists or maps.\u003c/p\u003e \u003c/important\u003e \u003cp\u003eA map of attribute/condition pairs. \u003ci\u003eExpected\u003c/i\u003e provides a conditional block for the \u003ci\u003eUpdateItem\u003c/i\u003e operation.\u003c/p\u003e \u003cp\u003eEach element of \u003ci\u003eExpected\u003c/i\u003e consists of an attribute name, a comparison operator, and one or more values. DynamoDB compares the attribute with the value(s) you supplied, using the comparison operator. For each \u003ci\u003eExpected\u003c/i\u003e element, the result of the evaluation is either true or false.\u003c/p\u003e \u003cp\u003eIf you specify more than one element in the \u003ci\u003eExpected\u003c/i\u003e map, then by default all of the conditions must evaluate to true. In other words, the conditions are ANDed together. (You can use the \u003ci\u003eConditionalOperator\u003c/i\u003e parameter to OR the conditions instead. If you do this, then at least one of the conditions must evaluate to true, rather than all of them.)\u003c/p\u003e \u003cp\u003eIf the \u003ci\u003eExpected\u003c/i\u003e map evaluates to true, then the conditional operation succeeds; otherwise, it fails.\u003c/p\u003e \u003cp\u003e\u003ci\u003eExpected\u003c/i\u003e contains the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e - One or more values to evaluate against the supplied attribute. The number of values in the list depends on the \u003ci\u003eComparisonOperator\u003c/i\u003e being used.\u003c/p\u003e \u003cp\u003eFor type Number, value comparisons are numeric.\u003c/p\u003e \u003cp\u003eString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, \u003ccode\u003ea\u003c/code\u003e is greater than \u003ccode\u003eA\u003c/code\u003e, and \u003ccode\u003eaa\u003c/code\u003e is greater than \u003ccode\u003eB\u003c/code\u003e. For a list of code values, see \u003ca href=\"http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\" \u003ehttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eFor type Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values, for example when evaluating query expressions.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eComparisonOperator\u003c/i\u003e - A comparator for evaluating attributes in the \u003ci\u003eAttributeValueList\u003c/i\u003e. When performing the comparison, DynamoDB uses strongly consistent reads.\u003c/p\u003e \u003cp\u003eThe following comparison operators are available:\u003c/p\u003e \u003cp\u003e\u003ccode\u003eEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\u003c/code\u003e\u003c/p\u003e \u003cp\u003eThe following are descriptions of each comparison operator.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eEQ\u003c/code\u003e : Equal. \u003ccode\u003eEQ\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNE\u003c/code\u003e : Not equal. \u003ccode\u003eNE\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLE\u003c/code\u003e : Less than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eLT\u003c/code\u003e : Less than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGE\u003c/code\u003e : Greater than or equal. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eGT\u003c/code\u003e : Greater than. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not equal \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e.\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_NULL\u003c/code\u003e : The attribute exists. \u003ccode\u003eNOT_NULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNULL\u003c/code\u003e : The attribute does not exist. \u003ccode\u003eNULL\u003c/code\u003e is supported for all datatypes, including lists and maps.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eCONTAINS\u003c/code\u003e : Checks for a subsequence, or value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it finds an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eCONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNOT_CONTAINS\u003c/code\u003e : Checks for absence of a subsequence, or absence of a value in a set.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (\"\u003ccode\u003eSS\u003c/code\u003e\", \"\u003ccode\u003eNS\u003c/code\u003e\", or \"\u003ccode\u003eBS\u003c/code\u003e\"), then the operator evaluates to true if it \u003ci\u003edoes not\u003c/i\u003e find an exact match with any member of the set.\u003c/p\u003e \u003cp\u003eNOT_CONTAINS is supported for lists: When evaluating \"\u003ccode\u003ea NOT CONTAINS b\u003c/code\u003e\", \"\u003ccode\u003ea\u003c/code\u003e\" can be a list; however, \"\u003ccode\u003eb\u003c/code\u003e\" cannot be a set, a map, or a list.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBEGINS_WITH\u003c/code\u003e : Checks for a prefix. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain only one \u003ci\u003eAttributeValue\u003c/i\u003e of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\u003c/p\u003e \u003cp/\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eIN\u003c/code\u003e : Checks for matching elements within two sets.\u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e can contain one or more \u003ci\u003eAttributeValue\u003c/i\u003e elements of type String, Number, or Binary (not a set type). These attributes are compared against an existing set type attribute of an item. If any elements of the input set are present in the item attribute, the expression evaluates to true.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eBETWEEN\u003c/code\u003e : Greater than or equal to the first value, and less than or equal to the second value. \u003c/p\u003e \u003cp\u003e\u003ci\u003eAttributeValueList\u003c/i\u003e must contain two \u003ci\u003eAttributeValue\u003c/i\u003e elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an \u003ci\u003eAttributeValue\u003c/i\u003e element of a different type than the one specified in the request, the value does not match. For example, \u003ccode\u003e{\"S\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e. Also, \u003ccode\u003e{\"N\":\"6\"}\u003c/code\u003e does not compare to \u003ccode\u003e{\"NS\":[\"6\", \"2\", \"1\"]}\u003c/code\u003e\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eFor usage examples of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e, see \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html\"\u003eLegacy Conditional Parameters\u003c/a\u003e in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eFor backward compatibility with previous DynamoDB releases, the following parameters can be used instead of \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eValue\u003c/i\u003e - A value for DynamoDB to compare with an attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ci\u003eExists\u003c/i\u003e - A Boolean value that causes DynamoDB to evaluate the value before attempting the conditional operation:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003etrue\u003c/code\u003e, DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the condition evaluates to true; otherwise the condition evaluate to false.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cp\u003eIf \u003ci\u003eExists\u003c/i\u003e is \u003ccode\u003efalse\u003c/code\u003e, DynamoDB assumes that the attribute value does \u003ci\u003enot\u003c/i\u003e exist in the table. If in fact the value does not exist, then the assumption is valid and the condition evaluates to true. If the value is found, despite the assumption that it does not exist, the condition evaluates to false.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe \u003ci\u003eValue\u003c/i\u003e and \u003ci\u003eExists\u003c/i\u003e parameters are incompatible with \u003ci\u003eAttributeValueList\u003c/i\u003e and \u003ci\u003eComparisonOperator\u003c/i\u003e. Note that if you use both sets of parameters at once, DynamoDB will return a \u003ci\u003eValidationException\u003c/i\u003e exception.\u003c/p\u003e",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeNames",
                        "name": "_uiExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "\u003cp\u003eOne or more substitution tokens for simplifying complex expressions. The following are some use cases for an \u003ci\u003eExpressionAttributeNames\u003c/i\u003e value:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eTo shorten an attribute name that is very long or unwieldy in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo create a placeholder for repeating occurrences of an attribute name in an expression.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo prevent special characters in an attribute name from being misinterpreted in an expression.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eUse the \u003cb\u003e#\u003c/b\u003e character in an expression to dereference an attribute name. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eorder.customerInfo.LastName = \"Smith\" OR order.customerInfo.LastName = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeNames\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{\"n\":\"order.customerInfo.LastName\"}\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e#n = \"Smith\" OR #n = \"Jones\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeValues",
                        "name": "_uiExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "\u003cp\u003eOne or more values that can be substituted in an expression.\u003c/p\u003e \u003cp\u003eUse the \u003cb\u003e:\u003c/b\u003e character in an expression to dereference an attribute value. For example, consider the following expression:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003eProductStatus IN (\"Available\",\"Backordered\",\"Discontinued\")\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eNow suppose that you specified the following for \u003ci\u003eExpressionAttributeValues\u003c/i\u003e:\u003c/p\u003e \u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003e{ \"a\":{\"S\":\"Available\"}, \"b\":{\"S\":\"Backordered\"}, \"d\":{\"S\":\"Discontinued\"} }\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e \u003cp\u003eThe expression can now be simplified as follows:\u003c/p\u003e \u003cul\u003e\u003cli\u003e \u003cp\u003e\u003ccode\u003eProductStatus IN (:a,:b,:c)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "uiKey",
                        "name": "_uiKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "\u003cp\u003eThe primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.\u003c/p\u003e \u003cp\u003eFor the primary key, you must provide all of the attributes. For example, with a hash type primary key, you only need to specify the hash attribute. For a hash-and-range type primary key, you must specify both the hash attribute and the range attribute.\u003c/p\u003e",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnConsumedCapacity",
                        "name": "_uiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnItemCollectionMetrics",
                        "name": "_uiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "\u003cp\u003eA value that if set to \u003ccode\u003eSIZE\u003c/code\u003e, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to \u003ccode\u003eNONE\u003c/code\u003e (the default), no statistics are returned.\u003c/p\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnValues",
                        "name": "_uiReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "\u003cp\u003eUse \u003ci\u003eReturnValues\u003c/i\u003e if you want to get the item attributes as they appeared either before or after they were updated. For \u003ci\u003eUpdateItem\u003c/i\u003e, the valid values are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eNONE\u003c/code\u003e - If \u003ci\u003eReturnValues\u003c/i\u003e is not specified, or if its value is \u003ccode\u003eNONE\u003c/code\u003e, then nothing is returned. (This setting is the default for \u003ci\u003eReturnValues\u003c/i\u003e.)\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_OLD\u003c/code\u003e - If \u003ci\u003eUpdateItem\u003c/i\u003e overwrote an attribute name-value pair, then the content of the old item is returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eUPDATED_OLD\u003c/code\u003e - The old versions of only the updated attributes are returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eALL_NEW\u003c/code\u003e - All of the attributes of the new version of the item are returned.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eUPDATED_NEW\u003c/code\u003e - The new versions of only the updated attributes are returned.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "uiTableName",
                        "name": "_uiTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table containing the item to update. \u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "uiUpdateExpression",
                        "name": "_uiUpdateExpression",
                        "shape": "UpdateExpression",
                        "locationName": "UpdateExpression",
                        "documentation": "\u003cp\u003eAn expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.\u003c/p\u003e \u003cp\u003eThe following action values are available for \u003ci\u003eUpdateExpression\u003c/i\u003e.\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eSET\u003c/code\u003e - Adds one or more attributes and values to an item. If any of these attribute already exist, they are replaced by the new values. You can also use \u003ccode\u003eSET\u003c/code\u003e to add or subtract from an attribute that is of type Number.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eSET\u003c/code\u003e supports the following functions:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eif_not_exists (path, operand)\u003c/code\u003e - if the item does not contain an attribute at the specified path, then \u003ccode\u003eif_not_exists\u003c/code\u003e evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003elist_append (operand, operand)\u003c/code\u003e - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThese function names are case-sensitive.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eREMOVE\u003c/code\u003e - Removes one or more attributes from an item.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eADD\u003c/code\u003e - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of \u003ccode\u003eADD\u003c/code\u003e depends on the data type of the attribute:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eIf the existing attribute is a number, and if \u003ci\u003eValue\u003c/i\u003e is also a number, then \u003ci\u003eValue\u003c/i\u003e is mathematically added to the existing attribute. If \u003ci\u003eValue\u003c/i\u003e is a negative number, then it is subtracted from the existing attribute.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the existing data type is a set and if \u003ci\u003eValue\u003c/i\u003e is also a set, then \u003ci\u003eValue\u003c/i\u003e is added to the existing set. For example, if the attribute value is the set \u003ccode\u003e[1,2]\u003c/code\u003e, and the \u003ccode\u003eADD\u003c/code\u003e action specified \u003ccode\u003e[3]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[1,2,3]\u003c/code\u003e. An error occurs if an \u003ccode\u003eADD\u003c/code\u003e action is specified for a set attribute and the attribute type specified does not match the existing set type. \u003c/p\u003e \u003cp\u003eBoth sets must have the same primitive data type. For example, if the existing data type is a set of strings, the \u003ci\u003eValue\u003c/i\u003e must also be a set of strings.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cimportant\u003e\u003cp\u003eThe \u003ccode\u003eADD\u003c/code\u003e action only supports Number and set data types. In addition, \u003ccode\u003eADD\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e\u003ccode\u003eDELETE\u003c/code\u003e - Deletes an element from a set.\u003c/p\u003e \u003cp\u003eIf a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set \u003ccode\u003e[a,b,c]\u003c/code\u003e and the \u003ccode\u003eDELETE\u003c/code\u003e action specifies \u003ccode\u003e[a,c]\u003c/code\u003e, then the final attribute value is \u003ccode\u003e[b]\u003c/code\u003e. Specifying an empty set is an error.\u003c/p\u003e \u003cimportant\u003e\u003cp\u003eThe \u003ccode\u003eDELETE\u003c/code\u003e action only supports Number and set data types. In addition, \u003ccode\u003eDELETE\u003c/code\u003e can only be used on top-level attributes, not nested attributes.\u003c/p\u003e \u003c/important\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eYou can have many actions in a single expression, such as the following: \u003ccode\u003eSET a=:value1, b=:value2 DELETE :value3, :value4, :value5\u003c/code\u003e\u003c/p\u003e \u003cp\u003eAn expression can contain any of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e Boolean functions: \u003ccode\u003eATTRIBUTE_EXIST | CONTAINS | BEGINS_WITH\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Comparison operators: \u003ccode\u003e = | &#x3C;&#x3E; | &#x3C; | &#x3E; | &#x3C;= | &#x3E;= | BETWEEN | IN\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e Logical operators: \u003ccode\u003eNOT | AND | OR\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "updateTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "flattened": false,
                    "required": false,
                    "lens": "utrTableDescription",
                    "name": "_utrTableDescription",
                    "shape": "TableDescription",
                    "locationName": "TableDescription",
                    "documentation": null,
                    "typeExposed": "Maybe TableDescription",
                    "type": "Maybe TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "utrTableDescription",
                        "name": "_utrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "UpdateTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "utrTableDescription",
                        "name": "_utrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "utrTableDescription",
                        "name": "_utrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateTable.html",
            "namespace": "Network.AWS.DynamoDB.UpdateTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "UpdateTable",
            "method": "post",
            "documentation": "\u003cp\u003eUpdates the provisioned throughput for the given table. Setting the throughput for a table helps you manage performance and is part of the provisioned throughput feature of DynamoDB.\u003c/p\u003e \u003cp\u003eThe provisioned throughput values can be upgraded or downgraded based on the maximums and minimums listed in the \u003ca href=\"http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\"\u003eLimits\u003c/a\u003e section in the \u003ci\u003eAmazon DynamoDB Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eThe table must be in the \u003ccode\u003eACTIVE\u003c/code\u003e state for this operation to succeed. \u003ci\u003eUpdateTable\u003c/i\u003e is an asynchronous operation; while executing the operation, the table is in the \u003ccode\u003eUPDATING\u003c/code\u003e state. While the table is in the \u003ccode\u003eUPDATING\u003c/code\u003e state, the table still has the provisioned throughput from before the call. The new provisioned throughput setting is in effect only when the table returns to the \u003ccode\u003eACTIVE\u003c/code\u003e state after the \u003ci\u003eUpdateTable\u003c/i\u003e operation. \u003c/p\u003e \u003cp\u003eYou cannot add, modify or delete indexes using \u003ci\u003eUpdateTable\u003c/i\u003e. Indexes can only be defined at table creation time.\u003c/p\u003e",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "updateTable",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "utTableName",
                        "name": "_utTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to be updated.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "utProvisionedThroughput",
                        "name": "_utProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughput",
                        "type": "Maybe ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "utGlobalSecondaryIndexUpdates",
                        "name": "_utGlobalSecondaryIndexUpdates",
                        "shape": "GlobalSecondaryIndexUpdateList",
                        "locationName": "GlobalSecondaryIndexUpdates",
                        "documentation": "\u003cp\u003eAn array of one or more global secondary indexes on the table, together with provisioned throughput settings for each index.\u003c/p\u003e",
                        "typeExposed": "[GlobalSecondaryIndexUpdate]",
                        "type": "List \"GlobalSecondaryIndexUpdates\" GlobalSecondaryIndexUpdate"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "utTableName",
                        "name": "_utTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to be updated.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "UpdateTable",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "utProvisionedThroughput",
                        "name": "_utProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughput",
                        "type": "Maybe ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "utGlobalSecondaryIndexUpdates",
                        "name": "_utGlobalSecondaryIndexUpdates",
                        "shape": "GlobalSecondaryIndexUpdateList",
                        "locationName": "GlobalSecondaryIndexUpdates",
                        "documentation": "\u003cp\u003eAn array of one or more global secondary indexes on the table, together with provisioned throughput settings for each index.\u003c/p\u003e",
                        "typeExposed": "[GlobalSecondaryIndexUpdate]",
                        "type": "List \"GlobalSecondaryIndexUpdates\" GlobalSecondaryIndexUpdate"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "flattened": false,
                        "required": true,
                        "lens": "utGlobalSecondaryIndexUpdates",
                        "name": "_utGlobalSecondaryIndexUpdates",
                        "shape": "GlobalSecondaryIndexUpdateList",
                        "locationName": "GlobalSecondaryIndexUpdates",
                        "documentation": "\u003cp\u003eAn array of one or more global secondary indexes on the table, together with provisioned throughput settings for each index.\u003c/p\u003e",
                        "typeExposed": "[GlobalSecondaryIndexUpdate]",
                        "type": "List \"GlobalSecondaryIndexUpdates\" GlobalSecondaryIndexUpdate"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "flattened": false,
                        "required": false,
                        "lens": "utProvisionedThroughput",
                        "name": "_utProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughput",
                        "type": "Maybe ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "\u003cerror\u003e",
                        "flattened": false,
                        "required": true,
                        "lens": "utTableName",
                        "name": "_utTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "\u003cp\u003eThe name of the table to be updated.\u003c/p\u003e",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        }
    ]
}