{
    "service": {
        "signature": "v4",
        "checksum": "sha256",
        "abbrev": "IAM",
        "error": "IAMError",
        "namespace": "Network.AWS.IAM",
        "protocol": "query",
        "imports": [
            "Network.AWS.IAM.AddClientIDToOpenIDConnectProvider",
            "Network.AWS.IAM.AddRoleToInstanceProfile",
            "Network.AWS.IAM.AddUserToGroup",
            "Network.AWS.IAM.ChangePassword",
            "Network.AWS.IAM.CreateAccessKey",
            "Network.AWS.IAM.CreateAccountAlias",
            "Network.AWS.IAM.CreateGroup",
            "Network.AWS.IAM.CreateInstanceProfile",
            "Network.AWS.IAM.CreateLoginProfile",
            "Network.AWS.IAM.CreateOpenIDConnectProvider",
            "Network.AWS.IAM.CreateRole",
            "Network.AWS.IAM.CreateSAMLProvider",
            "Network.AWS.IAM.CreateUser",
            "Network.AWS.IAM.CreateVirtualMFADevice",
            "Network.AWS.IAM.DeactivateMFADevice",
            "Network.AWS.IAM.DeleteAccessKey",
            "Network.AWS.IAM.DeleteAccountAlias",
            "Network.AWS.IAM.DeleteAccountPasswordPolicy",
            "Network.AWS.IAM.DeleteGroup",
            "Network.AWS.IAM.DeleteGroupPolicy",
            "Network.AWS.IAM.DeleteInstanceProfile",
            "Network.AWS.IAM.DeleteLoginProfile",
            "Network.AWS.IAM.DeleteOpenIDConnectProvider",
            "Network.AWS.IAM.DeleteRole",
            "Network.AWS.IAM.DeleteRolePolicy",
            "Network.AWS.IAM.DeleteSAMLProvider",
            "Network.AWS.IAM.DeleteServerCertificate",
            "Network.AWS.IAM.DeleteSigningCertificate",
            "Network.AWS.IAM.DeleteUser",
            "Network.AWS.IAM.DeleteUserPolicy",
            "Network.AWS.IAM.DeleteVirtualMFADevice",
            "Network.AWS.IAM.EnableMFADevice",
            "Network.AWS.IAM.GenerateCredentialReport",
            "Network.AWS.IAM.GetAccountPasswordPolicy",
            "Network.AWS.IAM.GetAccountSummary",
            "Network.AWS.IAM.GetCredentialReport",
            "Network.AWS.IAM.GetGroup",
            "Network.AWS.IAM.GetGroupPolicy",
            "Network.AWS.IAM.GetInstanceProfile",
            "Network.AWS.IAM.GetLoginProfile",
            "Network.AWS.IAM.GetOpenIDConnectProvider",
            "Network.AWS.IAM.GetRole",
            "Network.AWS.IAM.GetRolePolicy",
            "Network.AWS.IAM.GetSAMLProvider",
            "Network.AWS.IAM.GetServerCertificate",
            "Network.AWS.IAM.GetUser",
            "Network.AWS.IAM.GetUserPolicy",
            "Network.AWS.IAM.ListAccessKeys",
            "Network.AWS.IAM.ListAccountAliases",
            "Network.AWS.IAM.ListGroupPolicies",
            "Network.AWS.IAM.ListGroups",
            "Network.AWS.IAM.ListGroupsForUser",
            "Network.AWS.IAM.ListInstanceProfiles",
            "Network.AWS.IAM.ListInstanceProfilesForRole",
            "Network.AWS.IAM.ListMFADevices",
            "Network.AWS.IAM.ListOpenIDConnectProviders",
            "Network.AWS.IAM.ListRolePolicies",
            "Network.AWS.IAM.ListRoles",
            "Network.AWS.IAM.ListSAMLProviders",
            "Network.AWS.IAM.ListServerCertificates",
            "Network.AWS.IAM.ListSigningCertificates",
            "Network.AWS.IAM.ListUserPolicies",
            "Network.AWS.IAM.ListUsers",
            "Network.AWS.IAM.ListVirtualMFADevices",
            "Network.AWS.IAM.PutGroupPolicy",
            "Network.AWS.IAM.PutRolePolicy",
            "Network.AWS.IAM.PutUserPolicy",
            "Network.AWS.IAM.RemoveClientIDFromOpenIDConnectProvider",
            "Network.AWS.IAM.RemoveRoleFromInstanceProfile",
            "Network.AWS.IAM.RemoveUserFromGroup",
            "Network.AWS.IAM.ResyncMFADevice",
            "Network.AWS.IAM.Types",
            "Network.AWS.IAM.UpdateAccessKey",
            "Network.AWS.IAM.UpdateAccountPasswordPolicy",
            "Network.AWS.IAM.UpdateAssumeRolePolicy",
            "Network.AWS.IAM.UpdateGroup",
            "Network.AWS.IAM.UpdateLoginProfile",
            "Network.AWS.IAM.UpdateOpenIDConnectProviderThumbprint",
            "Network.AWS.IAM.UpdateSAMLProvider",
            "Network.AWS.IAM.UpdateServerCertificate",
            "Network.AWS.IAM.UpdateSigningCertificate",
            "Network.AWS.IAM.UpdateUser",
            "Network.AWS.IAM.UploadServerCertificate",
            "Network.AWS.IAM.UploadSigningCertificate"
        ],
        "name": "AWS Identity and Access Management",
        "version": "2010-05-08",
        "documentation": "\u003cfullname\u003eAWS Identity and Access Management\u003c/fullname\u003e \u003cp\u003e AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see \u003ca href=\"http://aws.amazon.com/iam/\"\u003eAWS Identity and Access Management (IAM)\u003c/a\u003e. For the user guide for IAM, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/\"\u003eUsing IAM\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html\"\u003eMaking Query Requests\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. \u003c/p\u003e \u003cp\u003e\u003cb\u003eSigning Requests\u003c/b\u003e\u003c/p\u003e \u003cp\u003e Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests. \u003c/p\u003e \u003cp\u003e To sign requests, we recommend that you use \u003ca href=\"http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\"\u003eSignature Version 4\u003c/a\u003e. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. \u003c/p\u003e \u003cp\u003e\u003cb\u003eRecording API requests\u003c/b\u003e\u003c/p\u003e \u003cp\u003e IAM supports AWS CloudTrail, which is a service that records AWS calls for your AWS account and delivers log files to an Amazon S3 bucket. By using information collected by CloudTrail, you can determine what requests were successfully made to IAM, who made the request, when it was made, and so on. To learn more about CloudTrail, including how to turn it on and find your log files, see the \u003ca href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/whatisawscloudtrail.html\"\u003eAWS CloudTrail User Guide\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e\u003cb\u003eAdditional Resources\u003c/b\u003e\u003c/p\u003e \u003cp\u003eFor more information, see the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003ca href=\"http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\"\u003eAWS Security Credentials\u003c/a\u003e. This topic provides general information about the types of credentials used for accessing AWS. \u003c/li\u003e \u003cli\u003e \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html\"\u003eIAM Best Practices\u003c/a\u003e. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. \u003c/li\u003e \u003cli\u003e \u003ca href=\"http://docs.aws.amazon.com/STS/latest/UsingSTS/\"\u003eAWS Security Token Service\u003c/a\u003e. This guide describes how to create and use temporary security credentials. \u003c/li\u003e \u003cli\u003e \u003ca href=\"http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html\"\u003eSigning AWS API Requests\u003c/a\u003e. This set of topics walk you through the process of signing a request using an access key ID and secret access key. \u003c/li\u003e \u003c/ul\u003e",
        "xmlNamespace": "https://iam.amazonaws.com/doc/2010-05-08/",
        "endpoint": "global",
        "endpointPrefix": "iam"
    },
    "cabal": {
        "library": "amazonka-iam",
        "modules": [
            "Network.AWS.IAM",
            "Network.AWS.IAM.AddClientIDToOpenIDConnectProvider",
            "Network.AWS.IAM.AddRoleToInstanceProfile",
            "Network.AWS.IAM.AddUserToGroup",
            "Network.AWS.IAM.ChangePassword",
            "Network.AWS.IAM.CreateAccessKey",
            "Network.AWS.IAM.CreateAccountAlias",
            "Network.AWS.IAM.CreateGroup",
            "Network.AWS.IAM.CreateInstanceProfile",
            "Network.AWS.IAM.CreateLoginProfile",
            "Network.AWS.IAM.CreateOpenIDConnectProvider",
            "Network.AWS.IAM.CreateRole",
            "Network.AWS.IAM.CreateSAMLProvider",
            "Network.AWS.IAM.CreateUser",
            "Network.AWS.IAM.CreateVirtualMFADevice",
            "Network.AWS.IAM.DeactivateMFADevice",
            "Network.AWS.IAM.DeleteAccessKey",
            "Network.AWS.IAM.DeleteAccountAlias",
            "Network.AWS.IAM.DeleteAccountPasswordPolicy",
            "Network.AWS.IAM.DeleteGroup",
            "Network.AWS.IAM.DeleteGroupPolicy",
            "Network.AWS.IAM.DeleteInstanceProfile",
            "Network.AWS.IAM.DeleteLoginProfile",
            "Network.AWS.IAM.DeleteOpenIDConnectProvider",
            "Network.AWS.IAM.DeleteRole",
            "Network.AWS.IAM.DeleteRolePolicy",
            "Network.AWS.IAM.DeleteSAMLProvider",
            "Network.AWS.IAM.DeleteServerCertificate",
            "Network.AWS.IAM.DeleteSigningCertificate",
            "Network.AWS.IAM.DeleteUser",
            "Network.AWS.IAM.DeleteUserPolicy",
            "Network.AWS.IAM.DeleteVirtualMFADevice",
            "Network.AWS.IAM.EnableMFADevice",
            "Network.AWS.IAM.GenerateCredentialReport",
            "Network.AWS.IAM.GetAccountPasswordPolicy",
            "Network.AWS.IAM.GetAccountSummary",
            "Network.AWS.IAM.GetCredentialReport",
            "Network.AWS.IAM.GetGroup",
            "Network.AWS.IAM.GetGroupPolicy",
            "Network.AWS.IAM.GetInstanceProfile",
            "Network.AWS.IAM.GetLoginProfile",
            "Network.AWS.IAM.GetOpenIDConnectProvider",
            "Network.AWS.IAM.GetRole",
            "Network.AWS.IAM.GetRolePolicy",
            "Network.AWS.IAM.GetSAMLProvider",
            "Network.AWS.IAM.GetServerCertificate",
            "Network.AWS.IAM.GetUser",
            "Network.AWS.IAM.GetUserPolicy",
            "Network.AWS.IAM.ListAccessKeys",
            "Network.AWS.IAM.ListAccountAliases",
            "Network.AWS.IAM.ListGroupPolicies",
            "Network.AWS.IAM.ListGroups",
            "Network.AWS.IAM.ListGroupsForUser",
            "Network.AWS.IAM.ListInstanceProfiles",
            "Network.AWS.IAM.ListInstanceProfilesForRole",
            "Network.AWS.IAM.ListMFADevices",
            "Network.AWS.IAM.ListOpenIDConnectProviders",
            "Network.AWS.IAM.ListRolePolicies",
            "Network.AWS.IAM.ListRoles",
            "Network.AWS.IAM.ListSAMLProviders",
            "Network.AWS.IAM.ListServerCertificates",
            "Network.AWS.IAM.ListSigningCertificates",
            "Network.AWS.IAM.ListUserPolicies",
            "Network.AWS.IAM.ListUsers",
            "Network.AWS.IAM.ListVirtualMFADevices",
            "Network.AWS.IAM.PutGroupPolicy",
            "Network.AWS.IAM.PutRolePolicy",
            "Network.AWS.IAM.PutUserPolicy",
            "Network.AWS.IAM.RemoveClientIDFromOpenIDConnectProvider",
            "Network.AWS.IAM.RemoveRoleFromInstanceProfile",
            "Network.AWS.IAM.RemoveUserFromGroup",
            "Network.AWS.IAM.ResyncMFADevice",
            "Network.AWS.IAM.Types",
            "Network.AWS.IAM.UpdateAccessKey",
            "Network.AWS.IAM.UpdateAccountPasswordPolicy",
            "Network.AWS.IAM.UpdateAssumeRolePolicy",
            "Network.AWS.IAM.UpdateGroup",
            "Network.AWS.IAM.UpdateLoginProfile",
            "Network.AWS.IAM.UpdateOpenIDConnectProviderThumbprint",
            "Network.AWS.IAM.UpdateSAMLProvider",
            "Network.AWS.IAM.UpdateServerCertificate",
            "Network.AWS.IAM.UpdateSigningCertificate",
            "Network.AWS.IAM.UpdateUser",
            "Network.AWS.IAM.UploadServerCertificate",
            "Network.AWS.IAM.UploadSigningCertificate"
        ],
        "dependencies": [],
        "version": "0.0.0",
        "synopsis": "",
        "description": ""
    },
    "types": {
        "CredentialReportNotPresentException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "crnpemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "CredentialReportNotReadyException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "crnremessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "MalformedPolicyDocumentException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "mpdemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "PasswordPolicy": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "enum"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppMinimumPasswordLength",
                    "type": "Maybe Int"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppRequireSymbols",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppRequireNumbers",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppRequireUppercaseCharacters",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppRequireLowercaseCharacters",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppAllowUsersToChangePassword",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppExpirePasswords",
                    "type": "Maybe Bool"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppMaxPasswordAge",
                    "type": "Maybe Int"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppPasswordReusePrevention",
                    "type": "Maybe Int"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ppHardExpiry",
                    "type": "Maybe Bool"
                }
            ]
        },
        "Group": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "groPath",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "groGroupName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "groGroupId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "groArn",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "groCreateDate",
                    "type": "Time RFC822"
                }
            ],
            "type": "record",
            "optional": []
        },
        "EntityAlreadyExistsException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "eaeemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "MFADevice": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfadUserName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfadSerialNumber",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "mfadEnableDate",
                    "type": "Time RFC822"
                }
            ],
            "type": "record",
            "optional": []
        },
        "InstanceProfile": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ipPath",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ipInstanceProfileName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ipInstanceProfileId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ipArn",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ipCreateDate",
                    "type": "Time RFC822"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "ipRoles",
                    "type": "List Role"
                }
            ],
            "type": "record",
            "optional": []
        },
        "MalformedCertificateException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "mcemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "CredentialReportExpiredException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "creemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "DuplicateCertificateException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "dcemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "ServerCertificateMetadata": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scmPath",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scmServerCertificateName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scmServerCertificateId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scmArn",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scmUploadDate",
                    "type": "Maybe (Time RFC822)"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scmExpiration",
                    "type": "Maybe (Time RFC822)"
                }
            ]
        },
        "OpenIDConnectProviderListEntry": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "oidcpleArn",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "LoginProfile": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lpUserName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lpCreateDate",
                    "type": "Time RFC822"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "lpPasswordResetRequired",
                    "type": "Maybe Bool"
                }
            ]
        },
        "DeleteConflictException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "dce1message",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "NoSuchEntityException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "nseemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "InvalidCertificateException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "icemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "namespace": "Network.AWS.IAM.Types",
        "imports": [],
        "User": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "usePath",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "useUserName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "useUserId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "useArn",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "useCreateDate",
                    "type": "Time RFC822"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "usePasswordLastUsed",
                    "type": "Maybe (Time RFC822)"
                }
            ]
        },
        "SAMLProviderListEntry": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "samlpleArn",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "samlpleValidUntil",
                    "type": "Maybe (Time RFC822)"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "samlpleCreateDate",
                    "type": "Maybe (Time RFC822)"
                }
            ]
        },
        "Role": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "rolPath",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "rolRoleName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "rolRoleId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "rolArn",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "rolCreateDate",
                    "type": "Time RFC822"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "rolAssumeRolePolicyDocument",
                    "type": "Maybe Text"
                }
            ]
        },
        "InvalidUserTypeException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "iutemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "InvalidInputException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "iiemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "ServerCertificate": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scServerCertificateMetadata",
                    "type": "ServerCertificateMetadata"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scCertificateBody",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "scCertificateChain",
                    "type": "Maybe Text"
                }
            ]
        },
        "InvalidAuthenticationCodeException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "iacemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "EntityTemporarilyUnmodifiableException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "etuemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "AccessKey": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akUserName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akAccessKeyId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akStatus",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akSecretAccessKey",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akCreateDate",
                    "type": "Maybe (Time RFC822)"
                }
            ]
        },
        "VirtualMFADevice": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "vmfadSerialNumber",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "vmfadBase32StringSeed",
                    "type": "Maybe Blob"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "vmfadQRCodePNG",
                    "type": "Maybe Blob"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "vmfadUser",
                    "type": "Maybe User"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "vmfadEnableDate",
                    "type": "Maybe (Time RFC822)"
                }
            ]
        },
        "SigningCertificate": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sc1UserName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sc1CertificateId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sc1CertificateBody",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sc1Status",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sc1UploadDate",
                    "type": "Maybe (Time RFC822)"
                }
            ]
        },
        "KeyPairMismatchException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "kpmemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "AccessKeyMetadata": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akmUserName",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akmAccessKeyId",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akmStatus",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "akmCreateDate",
                    "type": "Maybe (Time RFC822)"
                }
            ]
        },
        "PasswordPolicyViolationException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "ppvemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "LimitExceededException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "leemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        }
    },
    "operations": [
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipfrrInstanceProfiles",
                        "type": "List InstanceProfile"
                    }
                ],
                "name": "ListInstanceProfilesForRoleResponse",
                "resultWrapper": "ListInstanceProfilesForRoleResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipfrrIsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipfrrMarker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListInstanceProfilesForRole",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListInstanceProfilesForRole",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the instance profiles that have the specified associated role. If there are none, the action returns an empty list. For more information about instance profiles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\"\u003eAbout Instance Profiles\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipfrr1RoleName",
                        "type": "Text"
                    }
                ],
                "name": "ListInstanceProfilesForRoleRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipfrr1Marker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipfrr1MaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "cakrAccessKey",
                    "type": "AccessKey"
                },
                "wrapper": false,
                "name": "CreateAccessKeyResponse",
                "resultWrapper": "CreateAccessKeyResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateAccessKey",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateAccessKey",
            "method": "post",
            "documentation": "\u003cp\u003e Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is \u003ccode\u003eActive\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e \u003cp\u003e For information about limits on the number of keys you can create, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cimportant\u003e To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "cakrUserName",
                    "type": "Maybe Text"
                },
                "name": "CreateAccessKeyRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "loidcprOpenIDConnectProviderList",
                    "type": "List OpenIDConnectProviderListEntry"
                },
                "wrapper": false,
                "name": "ListOpenIDConnectProvidersResponse",
                "resultWrapper": "ListOpenIDConnectProvidersResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.ListOpenIDConnectProviders",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListOpenIDConnectProviders",
            "method": "post",
            "documentation": "\u003cp\u003eLists information about the OpenID Connect providers in the AWS account. \u003c/p\u003e",
            "request": {
                "deriving": [],
                "name": "ListOpenIDConnectProvidersRequest",
                "type": "empty"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "cvmfadrVirtualMFADevice",
                    "type": "VirtualMFADevice"
                },
                "wrapper": false,
                "name": "CreateVirtualMFADeviceResponse",
                "resultWrapper": "CreateVirtualMFADeviceResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateVirtualMFADevice",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateVirtualMFADevice",
            "method": "post",
            "documentation": "\u003cp\u003e Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/APIReference/API_EnableMFADevice.html\"\u003eEnableMFADevice\u003c/a\u003e to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\"\u003eUsing a Virtual MFA Device\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cp\u003e For information about limits on the number of MFA devices you can create, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cimportant\u003e The seed information contained in the QR code and the Base32 string should be treated like any other secret access information, such as your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "cvmfadrVirtualMFADeviceName",
                        "type": "Text"
                    }
                ],
                "name": "CreateVirtualMFADeviceRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "cvmfadrPath",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteAccountPasswordPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteAccountPasswordPolicy",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes the password policy for the AWS account.\u003c/p\u003e",
            "request": {
                "deriving": [],
                "name": "Empty",
                "type": "empty"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateAccountPasswordPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateAccountPasswordPolicy",
            "method": "post",
            "documentation": "\u003cp\u003eUpdates the password policy settings for the AWS account.\u003c/p\u003e \u003cp\u003e For more information about using a password policy, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\"\u003eManaging an IAM Password Policy\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "enum"
                ],
                "payload": null,
                "required": [],
                "name": "UpdateAccountPasswordPolicyRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprMinimumPasswordLength",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprRequireSymbols",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprRequireNumbers",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprRequireUppercaseCharacters",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprRequireLowercaseCharacters",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprAllowUsersToChangePassword",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprMaxPasswordAge",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprPasswordReusePrevention",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uapprHardExpiry",
                        "type": "Maybe Bool"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "guprUserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "guprPolicyName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "guprPolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "GetUserPolicyResponse",
                "resultWrapper": "GetUserPolicyResult",
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.IAM.GetUserPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetUserPolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves the specified policy document for the specified user. The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to \u003ca href=\"http://www.faqs.org/rfcs/rfc3986.html\"\u003ehttp://www.faqs.org/rfcs/rfc3986.html\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gupr1UserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gupr1PolicyName",
                        "type": "Text"
                    }
                ],
                "name": "GetUserPolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "grrRole",
                    "type": "Role"
                },
                "wrapper": false,
                "name": "GetRoleResponse",
                "resultWrapper": "GetRoleResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.GetRole",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetRole",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves information about the specified role, including the role's path, GUID, ARN, and the policy granting permission to assume the role. For more information about ARNs, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#Identifiers_ARNs\"\u003eARNs\u003c/a\u003e. For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to \u003ca href=\"http://www.faqs.org/rfcs/rfc3986.html\"\u003ehttp://www.faqs.org/rfcs/rfc3986.html\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "grrRoleName",
                    "type": "Text"
                },
                "name": "GetRoleRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeactivateMFADevice",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeactivateMFADevice",
            "method": "post",
            "documentation": "\u003cp\u003eDeactivates the specified MFA device and removes it from association with the user name for which it was originally enabled. \u003c/p\u003e \u003cp\u003eFor more information about creating and working with virtual MFA devices, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\"\u003eUsing a Virtual MFA Device\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfadrUserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dmfadrSerialNumber",
                        "type": "Text"
                    }
                ],
                "name": "DeactivateMFADeviceRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "coidcprOpenIDConnectProviderArn",
                    "type": "Maybe Text"
                },
                "wrapper": false,
                "name": "CreateOpenIDConnectProviderResponse",
                "resultWrapper": "CreateOpenIDConnectProviderResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateOpenIDConnectProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateOpenIDConnectProvider",
            "method": "post",
            "documentation": "\u003cp\u003eCreates an IAM entity to describe an identity provider (IdP) that supports \u003ca href=\"http://openid.net/connect/\"\u003eOpenID Connect (OIDC)\u003c/a\u003e. \u003c/p\u003e \u003cp\u003eThe OIDC provider that you create with this operation can be used as a principal in a role's trust policy to establish a trust relationship between AWS and the OIDC provider. \u003c/p\u003e \u003cp\u003eWhen you create the IAM OIDC provider, you specify the URL of the OIDC identity provider (IdP) to trust, a list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider, and a list of thumbprints of the server certificate(s) that the IdP uses. You get all of this information from the OIDC IdP that you want to use for access to AWS. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "coidcprUrl",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "coidcprClientIDList",
                        "type": "List Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "coidcprThumbprintList",
                        "type": "List Text"
                    }
                ],
                "name": "CreateOpenIDConnectProviderRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteVirtualMFADevice",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteVirtualMFADevice",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes a virtual MFA device.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dvmfadrSerialNumber",
                    "type": "Text"
                },
                "name": "DeleteVirtualMFADeviceRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrr1Roles",
                        "type": "List Role"
                    }
                ],
                "name": "ListRolesResponse",
                "resultWrapper": "ListRolesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListRoles",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListRoles",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the roles that have the specified path prefix. If there are none, the action returns an empty list. For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e \u003cp\u003e The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to \u003ca href=\"http://www.faqs.org/rfcs/rfc3986.html\"\u003ehttp://www.faqs.org/rfcs/rfc3986.html\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListRolesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrrPathPrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrrMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrrMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lupr1PolicyNames",
                        "type": "List Text"
                    }
                ],
                "name": "ListUserPoliciesResponse",
                "resultWrapper": "ListUserPoliciesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lupr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lupr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListUserPolicies",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListUserPolicies",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the names of the policies associated with the specified user. If there are none, the action returns an empty list. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "luprUserName",
                        "type": "Text"
                    }
                ],
                "name": "ListUserPoliciesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "luprMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "luprMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteRole",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteRole",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the specified role. The role must not have any policies attached. For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. \u003c/p\u003e \u003cimportant\u003e Make sure you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "drrRoleName",
                    "type": "Text"
                },
                "name": "DeleteRoleRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lurUsers",
                        "type": "List User"
                    }
                ],
                "name": "ListUsersResponse",
                "resultWrapper": "ListUsersResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lurIsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lurMarker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListUsers",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListUsers",
            "method": "post",
            "documentation": "\u003cp\u003eLists the IAM users that have the specified path prefix. If no path prefix is specified, the action returns all users in the AWS account. If there are none, the action returns an empty list. \u003c/p\u003e \u003cp\u003eYou can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListUsersRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lur1PathPrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lur1Marker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lur1MaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateOpenIDConnectProviderThumbprint",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateOpenIDConnectProviderThumbprint",
            "method": "post",
            "documentation": "\u003cp\u003eReplaces the existing list of server certificate thumbprints with a new list. \u003c/p\u003e \u003cp\u003eThe list that you pass with this action completely replaces the existing list of thumbprints. (The lists are not merged.)\u003c/p\u003e \u003cp\u003eTypically, you need to update a thumbprint only when the identity provider's certificate changes, which occurs rarely. However, if the provider's certificate \u003ci\u003edoes\u003c/i\u003e change, any attempt to assume an IAM role that specifies the IAM provider as a principal will fail until the certificate thumbprint is updated.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uoidcptrOpenIDConnectProviderArn",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uoidcptrThumbprintList",
                        "type": "List Text"
                    }
                ],
                "name": "UpdateOpenIDConnectProviderThumbprintRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.PutUserPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "PutUserPolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Adds (or updates) a policy document associated with the specified user. For information about policies, refer to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\"\u003eOverview of Policies\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cp\u003e For information about limits on the number of policies you can associate with a user, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "puprUserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "puprPolicyName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "puprPolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "PutUserPolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "goidcprClientIDList",
                        "type": "List Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "goidcprThumbprintList",
                        "type": "List Text"
                    }
                ],
                "name": "GetOpenIDConnectProviderResponse",
                "resultWrapper": "GetOpenIDConnectProviderResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "goidcprUrl",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "goidcprCreateDate",
                        "type": "Maybe (Time RFC822)"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.GetOpenIDConnectProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetOpenIDConnectProvider",
            "method": "post",
            "documentation": "\u003cp\u003eReturns information about the specified OpenID Connect provider.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "goidcprOpenIDConnectProviderArn",
                    "type": "Text"
                },
                "name": "GetOpenIDConnectProviderRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteUserPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteUserPolicy",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes the specified policy associated with the specified user.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "duprUserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "duprPolicyName",
                        "type": "Text"
                    }
                ],
                "name": "DeleteUserPolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "crrRole",
                    "type": "Role"
                },
                "wrapper": false,
                "name": "CreateRoleResponse",
                "resultWrapper": "CreateRoleResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateRole",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateRole",
            "method": "post",
            "documentation": "\u003cp\u003e Creates a new role for your AWS account. For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. For information about limitations on role names and the number of roles you can create, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cp\u003e The example policy grants permission to an EC2 instance to assume the role. The policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to \u003ca href=\"http://www.faqs.org/rfcs/rfc3986.html\"\u003ehttp://www.faqs.org/rfcs/rfc3986.html\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "crrRoleName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "crrAssumeRolePolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "CreateRoleRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "crrPath",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [],
                "name": "GetCredentialReportResponse",
                "resultWrapper": "GetCredentialReportResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gcrrContent",
                        "type": "Maybe Blob"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gcrrReportFormat",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gcrrGeneratedTime",
                        "type": "Maybe (Time RFC822)"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.GetCredentialReport",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetCredentialReport",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves a credential report for the AWS account. For more information about the credential report, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\"\u003eGetting Credential Reports\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [],
                "name": "Empty",
                "type": "empty"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gasrSummaryMap",
                    "type": "Map Text Int"
                },
                "wrapper": false,
                "name": "GetAccountSummaryResponse",
                "resultWrapper": "GetAccountSummaryResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.GetAccountSummary",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetAccountSummary",
            "method": "post",
            "documentation": "\u003cp\u003eRetrieves account level information about account entity usage and IAM quotas.\u003c/p\u003e \u003cp\u003e For information about limitations on IAM entities, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [],
                "name": "Empty",
                "type": "empty"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgpr1PolicyNames",
                        "type": "List Text"
                    }
                ],
                "name": "ListGroupPoliciesResponse",
                "resultWrapper": "ListGroupPoliciesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgpr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgpr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListGroupPolicies",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListGroupPolicies",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the names of the policies associated with the specified group. If there are none, the action returns an empty list. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgprGroupName",
                        "type": "Text"
                    }
                ],
                "name": "ListGroupPoliciesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgprMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgprMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteInstanceProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteInstanceProfile",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the specified instance profile. The instance profile must not have an associated role. \u003c/p\u003e \u003cimportant\u003e Make sure you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance. \u003c/important\u003e \u003cp\u003e For more information about instance profiles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\"\u003eAbout Instance Profiles\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "diprInstanceProfileName",
                    "type": "Text"
                },
                "name": "DeleteInstanceProfileRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.RemoveRoleFromInstanceProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "RemoveRoleFromInstanceProfile",
            "method": "post",
            "documentation": "\u003cp\u003eRemoves the specified role from the specified instance profile.\u003c/p\u003e \u003cimportant\u003e Make sure you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance will break any applications running on the instance. \u003c/important\u003e \u003cp\u003e For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. For more information about instance profiles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\"\u003eAbout Instance Profiles\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rrfiprInstanceProfileName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rrfiprRoleName",
                        "type": "Text"
                    }
                ],
                "name": "RemoveRoleFromInstanceProfileRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "ciprInstanceProfile",
                    "type": "InstanceProfile"
                },
                "wrapper": false,
                "name": "CreateInstanceProfileResponse",
                "resultWrapper": "CreateInstanceProfileResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateInstanceProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateInstanceProfile",
            "method": "post",
            "documentation": "\u003cp\u003e Creates a new instance profile. For information about instance profiles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\"\u003eAbout Instance Profiles\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e For information about the number of instance profiles you can create, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ciprInstanceProfileName",
                        "type": "Text"
                    }
                ],
                "name": "CreateInstanceProfileRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ciprPath",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "csamlprSAMLProviderArn",
                    "type": "Maybe Text"
                },
                "wrapper": false,
                "name": "CreateSAMLProviderResponse",
                "resultWrapper": "CreateSAMLProviderResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateSAMLProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateSAMLProvider",
            "method": "post",
            "documentation": "\u003cp\u003eCreates an IAM entity to describe an identity provider (IdP) that supports SAML 2.0.\u003c/p\u003e \u003cp\u003e The SAML provider that you create with this operation can be used as a principal in a role's trust policy to establish a trust relationship between AWS and a SAML identity provider. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS. \u003c/p\u003e \u003cp\u003e When you create the SAML provider, you upload an a SAML metadata document that you get from your IdP and that includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP. \u003c/p\u003e \u003cp\u003e For more information, see \u003ca href=\"http://docs.aws.amazon.com/STS/latest/UsingSTS/STSMgmtConsole-SAML.html\"\u003eGiving Console Access Using SAML\u003c/a\u003e and \u003ca href=\"http://docs.aws.amazon.com/STS/latest/UsingSTS/CreatingSAML.html\"\u003eCreating Temporary Security Credentials for SAML Federation\u003c/a\u003e in the \u003ci\u003eUsing Temporary Credentials\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "csamlprSAMLMetadataDocument",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "csamlprName",
                        "type": "Text"
                    }
                ],
                "name": "CreateSAMLProviderRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteAccountAlias",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteAccountAlias",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the specified AWS account alias. For information about using an AWS account alias, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\"\u003eUsing an Alias for Your AWS Account ID\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "daarAccountAlias",
                    "type": "Text"
                },
                "name": "DeleteAccountAliasRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.RemoveUserFromGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "RemoveUserFromGroup",
            "method": "post",
            "documentation": "\u003cp\u003eRemoves the specified user from the specified group.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rufgrGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rufgrUserName",
                        "type": "Text"
                    }
                ],
                "name": "RemoveUserFromGroupRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteGroupPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteGroupPolicy",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes the specified policy that is associated with the specified group.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dgprGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dgprPolicyName",
                        "type": "Text"
                    }
                ],
                "name": "DeleteGroupPolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.PutGroupPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "PutGroupPolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Adds (or updates) a policy document associated with the specified group. For information about policies, refer to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\"\u003eOverview of Policies\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cp\u003e For information about limits on the number of policies you can associate with a group, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pgprGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pgprPolicyName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "pgprPolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "PutGroupPolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "glprLoginProfile",
                    "type": "LoginProfile"
                },
                "wrapper": false,
                "name": "GetLoginProfileResponse",
                "resultWrapper": "GetLoginProfileResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.GetLoginProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetLoginProfile",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves the user name and password-creation date for the specified user. If the user has not been assigned a password, the action returns a 404 (\u003ccode\u003eNoSuchEntity\u003c/code\u003e) error. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "glprUserName",
                    "type": "Text"
                },
                "name": "GetLoginProfileRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggprGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggprPolicyName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggprPolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "GetGroupPolicyResponse",
                "resultWrapper": "GetGroupPolicyResult",
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.IAM.GetGroupPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetGroupPolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves the specified policy document for the specified group. The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to \u003ca href=\"http://www.faqs.org/rfcs/rfc3986.html\"\u003ehttp://www.faqs.org/rfcs/rfc3986.html\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggpr1GroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggpr1PolicyName",
                        "type": "Text"
                    }
                ],
                "name": "GetGroupPolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.ChangePassword",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ChangePassword",
            "method": "post",
            "documentation": "\u003cp\u003eChanges the password of the IAM user who is calling this action. The root account password is not affected by this action. \u003c/p\u003e \u003cp\u003eTo change the password for a different user, see \u003ca\u003eUpdateLoginProfile\u003c/a\u003e. For more information about modifying passwords, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\"\u003eManaging Passwords\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "cprOldPassword",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "cprNewPassword",
                        "type": "Text"
                    }
                ],
                "name": "ChangePasswordRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscrServerCertificateMetadataList",
                        "type": "List ServerCertificateMetadata"
                    }
                ],
                "name": "ListServerCertificatesResponse",
                "resultWrapper": "ListServerCertificatesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscrIsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscrMarker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListServerCertificates",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListServerCertificates",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the server certificates that have the specified path prefix. If none exist, the action returns an empty list. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListServerCertificatesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr1PathPrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr1Marker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr1MaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateAssumeRolePolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateAssumeRolePolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Updates the policy that grants an entity permission to assume a role. For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uarprRoleName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uarprPolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "UpdateAssumeRolePolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "giprInstanceProfile",
                    "type": "InstanceProfile"
                },
                "wrapper": false,
                "name": "GetInstanceProfileResponse",
                "resultWrapper": "GetInstanceProfileResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.GetInstanceProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetInstanceProfile",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\"\u003eAbout Instance Profiles\u003c/a\u003e. For more information about ARNs, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#Identifiers_ARNs\"\u003eARNs\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "giprInstanceProfileName",
                    "type": "Text"
                },
                "name": "GetInstanceProfileRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "clprLoginProfile",
                    "type": "LoginProfile"
                },
                "wrapper": false,
                "name": "CreateLoginProfileResponse",
                "resultWrapper": "CreateLoginProfileResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateLoginProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateLoginProfile",
            "method": "post",
            "documentation": "\u003cp\u003e Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\"\u003eManaging Passwords\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "clprUserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "clprPassword",
                        "type": "Text"
                    }
                ],
                "name": "CreateLoginProfileRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "clprPasswordResetRequired",
                        "type": "Maybe Bool"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [],
                "name": "GetSAMLProviderResponse",
                "resultWrapper": "GetSAMLProviderResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gsamlprSAMLMetadataDocument",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gsamlprCreateDate",
                        "type": "Maybe (Time RFC822)"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gsamlprValidUntil",
                        "type": "Maybe (Time RFC822)"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.GetSAMLProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetSAMLProvider",
            "method": "post",
            "documentation": "\u003cp\u003e Returns the SAML provider metadocument that was uploaded when the provider was created or updated. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gsamlprSAMLProviderArn",
                    "type": "Text"
                },
                "name": "GetSAMLProviderRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.AddRoleToInstanceProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "AddRoleToInstanceProfile",
            "method": "post",
            "documentation": "\u003cp\u003eAdds the specified role to the specified instance profile. For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. For more information about instance profiles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\"\u003eAbout Instance Profiles\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "artiprInstanceProfileName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "artiprRoleName",
                        "type": "Text"
                    }
                ],
                "name": "AddRoleToInstanceProfileRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgfur1Groups",
                        "type": "List Group"
                    }
                ],
                "name": "ListGroupsForUserResponse",
                "resultWrapper": "ListGroupsForUserResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgfur1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgfur1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListGroupsForUser",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListGroupsForUser",
            "method": "post",
            "documentation": "\u003cp\u003eLists the groups the specified user belongs to.\u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgfurUserName",
                        "type": "Text"
                    }
                ],
                "name": "ListGroupsForUserRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgfurMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgfurMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.AddUserToGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "AddUserToGroup",
            "method": "post",
            "documentation": "\u003cp\u003eAdds the specified user to the specified group.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "autgrGroupName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "autgrUserName",
                        "type": "Text"
                    }
                ],
                "name": "AddUserToGroupRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteOpenIDConnectProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteOpenIDConnectProvider",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes an IAM OpenID Connect identity provider.\u003c/p\u003e \u003cp\u003eDeleting an OIDC provider does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a provider that has been deleted will fail. \u003c/p\u003e \u003cp\u003eThis action is idempotent; it does not fail or return an error if you call the action for a provider that was already deleted.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "doidcprOpenIDConnectProviderArn",
                    "type": "Text"
                },
                "name": "DeleteOpenIDConnectProviderRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gurUser",
                    "type": "User"
                },
                "wrapper": false,
                "name": "GetUserResponse",
                "resultWrapper": "GetUserResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.GetUser",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetUser",
            "method": "post",
            "documentation": "\u003cp\u003eRetrieves information about the specified user, including the user's creation date, path, unique ID, and ARN. \u003c/p\u003e \u003cp\u003eIf you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gurUserName",
                    "type": "Maybe Text"
                },
                "name": "GetUserRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr3Certificates",
                        "type": "List SigningCertificate"
                    }
                ],
                "name": "ListSigningCertificatesResponse",
                "resultWrapper": "ListSigningCertificatesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr3IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr3Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListSigningCertificates",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListSigningCertificates",
            "method": "post",
            "documentation": "\u003cp\u003e Returns information about the signing certificates associated with the specified user. If there are none, the action returns an empty list. \u003c/p\u003e \u003cp\u003e Although each user is limited to a small number of signing certificates, you can still paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e \u003cp\u003e If the \u003ccode\u003eUserName\u003c/code\u003e field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListSigningCertificatesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr2UserName",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr2Marker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lscr2MaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteSigningCertificate",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteSigningCertificate",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes the specified signing certificate associated with the specified user.\u003c/p\u003e \u003cp\u003e If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dscrCertificateId",
                        "type": "Text"
                    }
                ],
                "name": "DeleteSigningCertificateRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dscrUserName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateSigningCertificate",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateSigningCertificate",
            "method": "post",
            "documentation": "\u003cp\u003e Changes the status of the specified signing certificate from active to disabled, or vice versa. This action can be used to disable a user's signing certificate as part of a certificate rotation work flow. \u003c/p\u003e \u003cp\u003e If the \u003ccode\u003eUserName\u003c/code\u003e field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e \u003cp\u003e For information about rotating certificates, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html\"\u003eManaging Keys and Certificates\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrCertificateId",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrStatus",
                        "type": "Text"
                    }
                ],
                "name": "UpdateSigningCertificateRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrUserName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.RemoveClientIDFromOpenIDConnectProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "RemoveClientIDFromOpenIDConnectProvider",
            "method": "post",
            "documentation": "\u003cp\u003eRemoves the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect provider.\u003c/p\u003e \u003cp\u003eThis action is idempotent; it does not fail or return an error if you try to remove a client ID that was removed previously.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rcidfoidcprOpenIDConnectProviderArn",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rcidfoidcprClientID",
                        "type": "Text"
                    }
                ],
                "name": "RemoveClientIDFromOpenIDConnectProviderRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lvmfadr1VirtualMFADevices",
                        "type": "List VirtualMFADevice"
                    }
                ],
                "name": "ListVirtualMFADevicesResponse",
                "resultWrapper": "ListVirtualMFADevicesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lvmfadr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lvmfadr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListVirtualMFADevices",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListVirtualMFADevices",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the virtual MFA devices under the AWS account by assignment status. If you do not specify an assignment status, the action returns a list of all virtual MFA devices. Assignment status can be \u003ccode\u003eAssigned\u003c/code\u003e, \u003ccode\u003eUnassigned\u003c/code\u003e, or \u003ccode\u003eAny\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListVirtualMFADevicesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lvmfadrAssignmentStatus",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lvmfadrMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lvmfadrMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.ResyncMFADevice",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ResyncMFADevice",
            "method": "post",
            "documentation": "\u003cp\u003eSynchronizes the specified MFA device with AWS servers.\u003c/p\u003e \u003cp\u003eFor more information about creating and working with virtual MFA devices, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html\"\u003eUsing a Virtual MFA Device\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rmfadrUserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rmfadrSerialNumber",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rmfadrAuthenticationCode1",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rmfadrAuthenticationCode2",
                        "type": "Text"
                    }
                ],
                "name": "ResyncMFADeviceRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteAccessKey",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteAccessKey",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes the access key associated with the specified user.\u003c/p\u003e \u003cp\u003e If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dakrAccessKeyId",
                        "type": "Text"
                    }
                ],
                "name": "DeleteAccessKeyRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dakrUserName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateAccessKey",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateAccessKey",
            "method": "post",
            "documentation": "\u003cp\u003e Changes the status of the specified access key from Active to Inactive, or vice versa. This action can be used to disable a user's key as part of a key rotation work flow. \u003c/p\u003e \u003cp\u003e If the \u003ccode\u003eUserName\u003c/code\u003e field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e \u003cp\u003e For information about rotating keys, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html\"\u003eManaging Keys and Certificates\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uakrAccessKeyId",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uakrStatus",
                        "type": "Text"
                    }
                ],
                "name": "UpdateAccessKeyRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uakrUserName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lakr1AccessKeyMetadata",
                        "type": "List AccessKeyMetadata"
                    }
                ],
                "name": "ListAccessKeysResponse",
                "resultWrapper": "ListAccessKeysResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lakr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lakr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListAccessKeys",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListAccessKeys",
            "method": "post",
            "documentation": "\u003cp\u003e Returns information about the access key IDs associated with the specified user. If there are none, the action returns an empty list. \u003c/p\u003e \u003cp\u003e Although each user is limited to a small number of keys, you can still paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e \u003cp\u003e If the \u003ccode\u003eUserName\u003c/code\u003e field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListAccessKeysRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lakrUserName",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lakrMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lakrMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "grpr1RoleName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "grpr1PolicyName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "grpr1PolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "GetRolePolicyResponse",
                "resultWrapper": "GetRolePolicyResult",
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.IAM.GetRolePolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetRolePolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves the specified policy document for the specified role. For more information about roles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html\"\u003eWorking with Roles\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e The returned policy is URL-encoded according to RFC 3986. For more information about RFC 3986, go to \u003ca href=\"http://www.faqs.org/rfcs/rfc3986.html\"\u003ehttp://www.faqs.org/rfcs/rfc3986.html\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "grprRoleName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "grprPolicyName",
                        "type": "Text"
                    }
                ],
                "name": "GetRolePolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "curUser",
                    "type": "Maybe User"
                },
                "wrapper": false,
                "name": "CreateUserResponse",
                "resultWrapper": "CreateUserResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateUser",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateUser",
            "method": "post",
            "documentation": "\u003cp\u003eCreates a new user for your AWS account.\u003c/p\u003e \u003cp\u003e For information about limitations on the number of users you can create, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "curUserName",
                        "type": "Text"
                    }
                ],
                "name": "CreateUserRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "curPath",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.PutRolePolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "PutRolePolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Adds (or updates) a policy document associated with the specified role. For information about policies, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html\"\u003eOverview of Policies\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cp\u003e For information about limits on the policies you can associate with a role, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "prprRoleName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "prprPolicyName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "prprPolicyDocument",
                        "type": "Text"
                    }
                ],
                "name": "PutRolePolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "uscrCertificate",
                    "type": "SigningCertificate"
                },
                "wrapper": false,
                "name": "UploadSigningCertificateResponse",
                "resultWrapper": "UploadSigningCertificateResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.UploadSigningCertificate",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UploadSigningCertificate",
            "method": "post",
            "documentation": "\u003cp\u003e Uploads an X.509 signing certificate and associates it with the specified user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is \u003ccode\u003eActive\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e If the \u003ccode\u003eUserName\u003c/code\u003e field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscr1CertificateBody",
                        "type": "Text"
                    }
                ],
                "name": "UploadSigningCertificateRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscr1UserName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteRolePolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteRolePolicy",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes the specified policy associated with the specified role.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "drprRoleName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "drprPolicyName",
                        "type": "Text"
                    }
                ],
                "name": "DeleteRolePolicyRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gapprPasswordPolicy",
                    "type": "PasswordPolicy"
                },
                "wrapper": false,
                "name": "GetAccountPasswordPolicyResponse",
                "resultWrapper": "GetAccountPasswordPolicyResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.GetAccountPasswordPolicy",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetAccountPasswordPolicy",
            "method": "post",
            "documentation": "\u003cp\u003e Retrieves the password policy for the AWS account. For more information about using a password policy, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html\"\u003eManaging an IAM Password Policy\u003c/a\u003e. \u003c/p\u003e",
            "request": {
                "deriving": [],
                "name": "Empty",
                "type": "empty"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateUser",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateUser",
            "method": "post",
            "documentation": "\u003cp\u003eUpdates the name and/or the path of the specified user.\u003c/p\u003e \u003cimportant\u003e You should understand the implications of changing a user's path or name. For more information, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html\"\u003eRenaming Users and Groups\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uurUserName",
                        "type": "Text"
                    }
                ],
                "name": "UpdateUserRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uurNewPath",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uurNewUserName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteUser",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteUser",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the specified user. The user must not belong to any groups, have any keys or signing certificates, or have any attached policies. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "durUserName",
                    "type": "Text"
                },
                "name": "DeleteUserRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.AddClientIDToOpenIDConnectProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "AddClientIDToOpenIDConnectProvider",
            "method": "post",
            "documentation": "\u003cp\u003eAdds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect provider.\u003c/p\u003e \u003cp\u003eThis action is idempotent; it does not fail or return an error if you add an existing client ID to the provider.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "acidtoidcprOpenIDConnectProviderArn",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "acidtoidcprClientID",
                        "type": "Text"
                    }
                ],
                "name": "AddClientIDToOpenIDConnectProviderRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrpr1PolicyNames",
                        "type": "List Text"
                    }
                ],
                "name": "ListRolePoliciesResponse",
                "resultWrapper": "ListRolePoliciesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrpr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrpr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListRolePolicies",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListRolePolicies",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the names of the policies associated with the specified role. If there are none, the action returns an empty list. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrprRoleName",
                        "type": "Text"
                    }
                ],
                "name": "ListRolePoliciesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrprMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lrprMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.CreateAccountAlias",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateAccountAlias",
            "method": "post",
            "documentation": "\u003cp\u003eCreates an alias for your AWS account. For information about using an AWS account alias, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\"\u003eUsing an Alias for Your AWS Account ID\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "caarAccountAlias",
                    "type": "Text"
                },
                "name": "CreateAccountAliasRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipr1InstanceProfiles",
                        "type": "List InstanceProfile"
                    }
                ],
                "name": "ListInstanceProfilesResponse",
                "resultWrapper": "ListInstanceProfilesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lipr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListInstanceProfiles",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListInstanceProfiles",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the instance profiles that have the specified path prefix. If there are none, the action returns an empty list. For more information about instance profiles, go to \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html\"\u003eAbout Instance Profiles\u003c/a\u003e. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListInstanceProfilesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "liprPathPrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "liprMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "liprMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.EnableMFADevice",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "EnableMFADevice",
            "method": "post",
            "documentation": "\u003cp\u003e Enables the specified MFA device and associates it with the specified user name. When enabled, the MFA device is required for every subsequent login by the user name associated with the device. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "emfadrUserName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "emfadrSerialNumber",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "emfadrAuthenticationCode1",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "emfadrAuthenticationCode2",
                        "type": "Text"
                    }
                ],
                "name": "EnableMFADeviceRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "laar1AccountAliases",
                        "type": "List Text"
                    }
                ],
                "name": "ListAccountAliasesResponse",
                "resultWrapper": "ListAccountAliasesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "laar1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "laar1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListAccountAliases",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListAccountAliases",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the account aliases associated with the account. For information about using an AWS account alias, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html\"\u003eUsing an Alias for Your AWS Account ID\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListAccountAliasesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "laarMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "laarMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteSAMLProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteSAMLProvider",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes a SAML provider.\u003c/p\u003e \u003cp\u003e Deleting the provider does not update any roles that reference the SAML provider as a principal in their trust policies. Any attempt to assume a role that references a SAML provider that has been deleted will fail. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dsamlprSAMLProviderArn",
                    "type": "Text"
                },
                "name": "DeleteSAMLProviderRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "usamlpr1SAMLProviderArn",
                    "type": "Maybe Text"
                },
                "wrapper": false,
                "name": "UpdateSAMLProviderResponse",
                "resultWrapper": "UpdateSAMLProviderResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.UpdateSAMLProvider",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateSAMLProvider",
            "method": "post",
            "documentation": "\u003cp\u003eUpdates the metadata document for an existing SAML provider.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "usamlprSAMLMetadataDocument",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "usamlprSAMLProviderArn",
                        "type": "Text"
                    }
                ],
                "name": "UpdateSAMLProviderRequest",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "cgrGroup",
                    "type": "Group"
                },
                "wrapper": false,
                "name": "CreateGroupResponse",
                "resultWrapper": "CreateGroupResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.CreateGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "CreateGroup",
            "method": "post",
            "documentation": "\u003cp\u003eCreates a new group.\u003c/p\u003e \u003cp\u003e For information about the number of groups you can create, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "cgrGroupName",
                        "type": "Text"
                    }
                ],
                "name": "CreateGroupRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "cgrPath",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lmfadr1MFADevices",
                        "type": "List MFADevice"
                    }
                ],
                "name": "ListMFADevicesResponse",
                "resultWrapper": "ListMFADevicesResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lmfadr1IsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lmfadr1Marker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListMFADevices",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListMFADevices",
            "method": "post",
            "documentation": "\u003cp\u003e Lists the MFA devices. If the request includes the user name, then this action lists all the MFA devices associated with the specified user name. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. \u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListMFADevicesRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lmfadrUserName",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lmfadrMarker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lmfadrMaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "uscrServerCertificateMetadata",
                    "type": "Maybe ServerCertificateMetadata"
                },
                "wrapper": false,
                "name": "UploadServerCertificateResponse",
                "resultWrapper": "UploadServerCertificateResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.UploadServerCertificate",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UploadServerCertificate",
            "method": "post",
            "documentation": "\u003cp\u003e Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded. \u003c/p\u003e \u003cp\u003e For information about the number of server certificates you can upload, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html\"\u003eLimitations on IAM Entities\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrServerCertificateName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrCertificateBody",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrPrivateKey",
                        "type": "Text"
                    }
                ],
                "name": "UploadServerCertificateRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrPath",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscrCertificateChain",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "lsamlprSAMLProviderList",
                    "type": "List SAMLProviderListEntry"
                },
                "wrapper": false,
                "name": "ListSAMLProvidersResponse",
                "resultWrapper": "ListSAMLProvidersResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.ListSAMLProviders",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListSAMLProviders",
            "method": "post",
            "documentation": "\u003cp\u003eLists the SAML providers in the account.\u003c/p\u003e",
            "request": {
                "deriving": [],
                "name": "ListSAMLProvidersRequest",
                "type": "empty"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gscrServerCertificate",
                    "type": "ServerCertificate"
                },
                "wrapper": false,
                "name": "GetServerCertificateResponse",
                "resultWrapper": "GetServerCertificateResult",
                "type": "newtype"
            },
            "namespace": "Network.AWS.IAM.GetServerCertificate",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetServerCertificate",
            "method": "post",
            "documentation": "\u003cp\u003eRetrieves information about the specified server certificate.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gscrServerCertificateName",
                    "type": "Text"
                },
                "name": "GetServerCertificateRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteGroup",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the specified group. The group must not contain any users or have any attached policies. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dgrGroupName",
                    "type": "Text"
                },
                "name": "DeleteGroupRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateGroup",
            "method": "post",
            "documentation": "\u003cp\u003eUpdates the name and/or the path of the specified group.\u003c/p\u003e \u003cimportant\u003e You should understand the implications of changing a group's path or name. For more information, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html\"\u003eRenaming Users and Groups\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ugrGroupName",
                        "type": "Text"
                    }
                ],
                "name": "UpdateGroupRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ugrNewPath",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ugrNewGroupName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgrGroups",
                        "type": "List Group"
                    }
                ],
                "name": "ListGroupsResponse",
                "resultWrapper": "ListGroupsResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgrIsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgrMarker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.ListGroups",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "ListGroups",
            "method": "post",
            "documentation": "\u003cp\u003eLists the groups that have the specified path prefix.\u003c/p\u003e \u003cp\u003e You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListGroupsRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgr1PathPrefix",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgr1Marker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lgr1MaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [],
                "name": "GenerateCredentialReportResponse",
                "resultWrapper": "GenerateCredentialReportResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gcrrState",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gcrrDescription",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.GenerateCredentialReport",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GenerateCredentialReport",
            "method": "post",
            "documentation": "\u003cp\u003e Generates a credential report for the AWS account. For more information about the credential report, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html\"\u003eGetting Credential Reports\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [],
                "name": "Empty",
                "type": "empty"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateLoginProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateLoginProfile",
            "method": "post",
            "documentation": "\u003cp\u003eChanges the password for the specified user.\u003c/p\u003e \u003cp\u003eUsers can change their own passwords by calling \u003ca\u003eChangePassword\u003c/a\u003e. For more information about modifying passwords, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html\"\u003eManaging Passwords\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ulprUserName",
                        "type": "Text"
                    }
                ],
                "name": "UpdateLoginProfileRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ulprPassword",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ulprPasswordResetRequired",
                        "type": "Maybe Bool"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteLoginProfile",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteLoginProfile",
            "method": "post",
            "documentation": "\u003cp\u003e Deletes the password for the specified user, which terminates the user's ability to access AWS services through the AWS Management Console. \u003c/p\u003e \u003cimportant\u003e Deleting a user's password does not prevent a user from accessing IAM through the command line interface or the API. To prevent all user access you must also either make the access key inactive or delete it. For more information about making keys inactive or deleting them, see \u003ca\u003eUpdateAccessKey\u003c/a\u003e and \u003ca\u003eDeleteAccessKey\u003c/a\u003e. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dlprUserName",
                    "type": "Text"
                },
                "name": "DeleteLoginProfileRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggrGroup",
                        "type": "Group"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggrUsers",
                        "type": "List User"
                    }
                ],
                "name": "GetGroupResponse",
                "resultWrapper": "GetGroupResult",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggrIsTruncated",
                        "type": "Maybe Bool"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggrMarker",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.IAM.GetGroup",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "GetGroup",
            "method": "post",
            "documentation": "\u003cp\u003e Returns a list of users that are in the specified group. You can paginate the results using the \u003ccode\u003eMaxItems\u003c/code\u003e and \u003ccode\u003eMarker\u003c/code\u003e parameters. \u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggr1GroupName",
                        "type": "Text"
                    }
                ],
                "name": "GetGroupRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggr1Marker",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ggr1MaxItems",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.DeleteServerCertificate",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "DeleteServerCertificate",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes the specified server certificate.\u003c/p\u003e \u003cimportant\u003e If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to \u003ca href=\"http://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html\" target=\"blank\"\u003eDeleteLoadBalancerListeners\u003c/a\u003e in the \u003ci\u003eElastic Load Balancing API Reference\u003c/i\u003e. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dscrServerCertificateName",
                    "type": "Text"
                },
                "name": "DeleteServerCertificateRequest",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.IAM.UpdateServerCertificate",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.Query",
                "Network.AWS.IAM.Types"
            ],
            "name": "UpdateServerCertificate",
            "method": "post",
            "documentation": "\u003cp\u003eUpdates the name and/or the path of the specified server certificate.\u003c/p\u003e \u003cimportant\u003e You should understand the implications of changing a server certificate's path or name. For more information, see \u003ca href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingServerCerts.html\"\u003eManaging Server Certificates\u003c/a\u003e in the \u003ci\u003eUsing IAM\u003c/i\u003e guide. \u003c/important\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscr1ServerCertificateName",
                        "type": "Text"
                    }
                ],
                "name": "UpdateServerCertificateRequest",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscr1NewPath",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "uscr1NewServerCertificateName",
                        "type": "Maybe Text"
                    }
                ]
            }
        }
    ]
}