{
    "service": {
        "signature": "v4",
        "checksum": "sha256",
        "abbrev": "Kinesis",
        "error": "KinesisError",
        "namespace": "Network.AWS.Kinesis",
        "protocol": "json",
        "imports": [
            "Network.AWS.Kinesis.AddTagsToStream",
            "Network.AWS.Kinesis.CreateStream",
            "Network.AWS.Kinesis.DeleteStream",
            "Network.AWS.Kinesis.DescribeStream",
            "Network.AWS.Kinesis.GetRecords",
            "Network.AWS.Kinesis.GetShardIterator",
            "Network.AWS.Kinesis.ListStreams",
            "Network.AWS.Kinesis.ListTagsForStream",
            "Network.AWS.Kinesis.MergeShards",
            "Network.AWS.Kinesis.PutRecord",
            "Network.AWS.Kinesis.RemoveTagsFromStream",
            "Network.AWS.Kinesis.SplitShard",
            "Network.AWS.Kinesis.Types"
        ],
        "name": "Amazon Kinesis",
        "version": "2013-12-02",
        "documentation": "\u003cfullname\u003eAmazon Kinesis Service API Reference\u003c/fullname\u003e \u003cp\u003eAmazon Kinesis is a managed service that scales elastically for real time processing of streaming big data.\u003c/p\u003e",
        "xmlNamespace": "https://kinesis.amazonaws.com/doc/2013-12-02/",
        "endpoint": "regional",
        "endpointPrefix": "kinesis",
        "targetPrefix": "Kinesis_20131202"
    },
    "cabal": {
        "library": "amazonka-kinesis",
        "modules": [
            "Network.AWS.Kinesis",
            "Network.AWS.Kinesis.AddTagsToStream",
            "Network.AWS.Kinesis.CreateStream",
            "Network.AWS.Kinesis.DeleteStream",
            "Network.AWS.Kinesis.DescribeStream",
            "Network.AWS.Kinesis.GetRecords",
            "Network.AWS.Kinesis.GetShardIterator",
            "Network.AWS.Kinesis.ListStreams",
            "Network.AWS.Kinesis.ListTagsForStream",
            "Network.AWS.Kinesis.MergeShards",
            "Network.AWS.Kinesis.PutRecord",
            "Network.AWS.Kinesis.RemoveTagsFromStream",
            "Network.AWS.Kinesis.SplitShard",
            "Network.AWS.Kinesis.Types"
        ],
        "dependencies": [],
        "version": "0.0.0",
        "synopsis": "",
        "description": ""
    },
    "types": {
        "Shard": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "shaShardId",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "shaHashKeyRange",
                    "type": "HashKeyRange"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "shaSequenceNumberRange",
                    "type": "SequenceNumberRange"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "shaParentShardId",
                    "type": "Maybe Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "shaAdjacentParentShardId",
                    "type": "Maybe Text"
                }
            ]
        },
        "Tag": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tagKey",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "tagValue",
                    "type": "Maybe Text"
                }
            ]
        },
        "ExpiredIteratorException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "eiemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "StreamDescription": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sdStreamName",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sdStreamARN",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sdStreamStatus",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sdShards",
                    "type": "List Shard"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "sdHasMoreShards",
                    "type": "Bool"
                }
            ],
            "type": "record",
            "optional": []
        },
        "InvalidArgumentException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "iaemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "namespace": "Network.AWS.Kinesis.Types",
        "ProvisionedThroughputExceededException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "pteemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "imports": [],
        "HashKeyRange": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "hkrStartingHashKey",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "hkrEndingHashKey",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": []
        },
        "Record": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "recSequenceNumber",
                    "type": "Text"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "recData",
                    "type": "Blob"
                },
                {
                    "streaming": false,
                    "payload": false,
                    "name": "recPartitionKey",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": []
        },
        "SequenceNumberRange": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic"
            ],
            "payload": null,
            "required": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "snrStartingSequenceNumber",
                    "type": "Text"
                }
            ],
            "type": "record",
            "optional": [
                {
                    "streaming": false,
                    "payload": false,
                    "name": "snrEndingSequenceNumber",
                    "type": "Maybe Text"
                }
            ]
        },
        "ResourceNotFoundException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "rnfemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "LimitExceededException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "leemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        },
        "ResourceInUseException": {
            "deriving": [
                "eq",
                "ord",
                "show",
                "generic",
                "monoid"
            ],
            "field": {
                "streaming": false,
                "payload": false,
                "name": "riuemessage",
                "type": "Maybe Text"
            },
            "type": "newtype"
        }
    },
    "operations": [
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "proShardId",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "proSequenceNumber",
                        "type": "Text"
                    }
                ],
                "name": "PutRecordOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.Kinesis.PutRecord",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "PutRecord",
            "method": "post",
            "documentation": "\u003cp\u003ePuts a data record from a producer into an Amazon Kinesis stream. You must call \u003ccode\u003ePutRecord\u003c/code\u003e to send data from the producer into the Amazon Kinesis stream for real-time ingestion and subsequent processing. You must specify the name of the stream that captures, stores, and transports the data; a partition key; and the data blob itself. The data blob could be a segment from a log file, geographic/location data, website clickstream data, or any other data type.\u003c/p\u003e \u003cp\u003eThe partition key is used to distribute data across shards. Amazon Kinesis segregates the data records that belong to a data stream into multiple shards, using the partition key associated with each data record to determine which shard a given data record belongs to. \u003c/p\u003e \u003cp\u003ePartition keys are Unicode strings, with a maximum length limit of 256 bytes. An MD5 hash function is used to map partition keys to 128-bit integer values and to map associated data records to shards using the hash key ranges of the shards. You can override hashing the partition key to determine the shard by explicitly specifying a hash value using the \u003ccode\u003eExplicitHashKey\u003c/code\u003e parameter. For more information, see \u003ca href=\"http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-api-java.html#kinesis-using-api-defn-partition-key\"\u003ePartition Key\u003c/a\u003e in the \u003ci\u003eAmazon Kinesis Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003e\u003ccode\u003ePutRecord\u003c/code\u003e returns the shard ID of where the data record was placed and the sequence number that was assigned to the data record.\u003c/p\u003e \u003cp\u003eSequence numbers generally increase over time. To guarantee strictly increasing ordering, use the \u003ccode\u003eSequenceNumberForOrdering\u003c/code\u003e parameter. For more information, see \u003ca href=\"http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-api-java.html#kinesis-using-api-defn-sequence-number\"\u003eSequence Number\u003c/a\u003e in the \u003ci\u003eAmazon Kinesis Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf a \u003ccode\u003ePutRecord\u003c/code\u003e request cannot be processed because of insufficient provisioned throughput on the shard involved in the request, \u003ccode\u003ePutRecord\u003c/code\u003e throws \u003ccode\u003eProvisionedThroughputExceededException\u003c/code\u003e. \u003c/p\u003e \u003cp\u003eData records are accessible for only 24 hours from the time that they are added to an Amazon Kinesis stream.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "priStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "priData",
                        "type": "Blob"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "priPartitionKey",
                        "type": "Text"
                    }
                ],
                "name": "PutRecordInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "priExplicitHashKey",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "priSequenceNumberForOrdering",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.Kinesis.MergeShards",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "MergeShards",
            "method": "post",
            "documentation": "\u003cp\u003eMerges two adjacent shards in a stream and combines them into a single shard to reduce the stream's capacity to ingest and transport data. Two shards are considered adjacent if the union of the hash key ranges for the two shards form a contiguous set with no gaps. For example, if you have two shards, one with a hash key range of 276...381 and the other with a hash key range of 382...454, then you could merge these two shards into a single shard that would have a hash key range of 276...454. After the merge, the single child shard receives data for all hash key values covered by the two parent shards.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eMergeShards\u003c/code\u003e is called when there is a need to reduce the overall capacity of a stream because of excess capacity that is not being used. You must specify the shard to be merged and the adjacent shard for a stream. For more information about merging shards, see \u003ca href=\"http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-api-java.html#kinesis-using-api-java-resharding-merge\"\u003eMerge Two Shards\u003c/a\u003e in the \u003ci\u003eAmazon Kinesis Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eIf the stream is in the \u003ccode\u003eACTIVE\u003c/code\u003e state, you can call \u003ccode\u003eMergeShards\u003c/code\u003e. If a stream is in the \u003ccode\u003eCREATING\u003c/code\u003e, \u003ccode\u003eUPDATING\u003c/code\u003e, or \u003ccode\u003eDELETING\u003c/code\u003e state, \u003ccode\u003eMergeShards\u003c/code\u003e returns a \u003ccode\u003eResourceInUseException\u003c/code\u003e. If the specified stream does not exist, \u003ccode\u003eMergeShards\u003c/code\u003e returns a \u003ccode\u003eResourceNotFoundException\u003c/code\u003e. \u003c/p\u003e \u003cp\u003eYou can use \u003ca\u003eDescribeStream\u003c/a\u003e to check the state of the stream, which is returned in \u003ccode\u003eStreamStatus\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eMergeShards\u003c/code\u003e is an asynchronous operation. Upon receiving a \u003ccode\u003eMergeShards\u003c/code\u003e request, Amazon Kinesis immediately returns a response and sets the \u003ccode\u003eStreamStatus\u003c/code\u003e to \u003ccode\u003eUPDATING\u003c/code\u003e. After the operation is completed, Amazon Kinesis sets the \u003ccode\u003eStreamStatus\u003c/code\u003e to \u003ccode\u003eACTIVE\u003c/code\u003e. Read and write operations continue to work while the stream is in the \u003ccode\u003eUPDATING\u003c/code\u003e state. \u003c/p\u003e \u003cp\u003eYou use \u003ca\u003eDescribeStream\u003c/a\u003e to determine the shard IDs that are specified in the \u003ccode\u003eMergeShards\u003c/code\u003e request. \u003c/p\u003e \u003cp\u003eIf you try to operate on too many streams in parallel using \u003ca\u003eCreateStream\u003c/a\u003e, \u003ca\u003eDeleteStream\u003c/a\u003e, \u003ccode\u003eMergeShards\u003c/code\u003e or \u003ca\u003eSplitShard\u003c/a\u003e, you will receive a \u003ccode\u003eLimitExceededException\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e\u003ccode\u003eMergeShards\u003c/code\u003e has limit of 5 transactions per second per account.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "msiStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "msiShardToMerge",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "msiAdjacentShardToMerge",
                        "type": "Text"
                    }
                ],
                "name": "MergeShardsInput",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "gsioShardIterator",
                    "type": "Maybe Text"
                },
                "wrapper": false,
                "name": "GetShardIteratorOutput",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.Kinesis.GetShardIterator",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "GetShardIterator",
            "method": "post",
            "documentation": "\u003cp\u003eGets a shard iterator. A shard iterator expires five minutes after it is returned to the requester.\u003c/p\u003e \u003cp\u003eA shard iterator specifies the position in the shard from which to start reading data records sequentially. A shard iterator specifies this position using the sequence number of a data record in a shard. A sequence number is the identifier associated with every record ingested in the Amazon Kinesis stream. The sequence number is assigned when a record is put into the stream. \u003c/p\u003e \u003cp\u003eYou must specify the shard iterator type. For example, you can set the \u003ccode\u003eShardIteratorType\u003c/code\u003e parameter to read exactly from the position denoted by a specific sequence number by using the \u003ccode\u003eAT_SEQUENCE_NUMBER\u003c/code\u003e shard iterator type, or right after the sequence number by using the \u003ccode\u003eAFTER_SEQUENCE_NUMBER\u003c/code\u003e shard iterator type, using sequence numbers returned by earlier calls to \u003ca\u003ePutRecord\u003c/a\u003e, \u003ca\u003eGetRecords\u003c/a\u003e, or \u003ca\u003eDescribeStream\u003c/a\u003e. You can specify the shard iterator type \u003ccode\u003eTRIM_HORIZON\u003c/code\u003e in the request to cause \u003ccode\u003eShardIterator\u003c/code\u003e to point to the last untrimmed record in the shard in the system, which is the oldest data record in the shard. Or you can point to just after the most recent record in the shard, by using the shard iterator type \u003ccode\u003eLATEST\u003c/code\u003e, so that you always read the most recent data in the shard. \u003c/p\u003e \u003cp\u003eWhen you repeatedly read from an Amazon Kinesis stream use a \u003ca\u003eGetShardIterator\u003c/a\u003e request to get the first shard iterator to to use in your first \u003ccode\u003eGetRecords\u003c/code\u003e request and then use the shard iterator returned by the \u003ccode\u003eGetRecords\u003c/code\u003e request in \u003ccode\u003eNextShardIterator\u003c/code\u003e for subsequent reads. A new shard iterator is returned by every \u003ccode\u003eGetRecords\u003c/code\u003e request in \u003ccode\u003eNextShardIterator\u003c/code\u003e, which you use in the \u003ccode\u003eShardIterator\u003c/code\u003e parameter of the next \u003ccode\u003eGetRecords\u003c/code\u003e request. \u003c/p\u003e \u003cp\u003eIf a \u003ccode\u003eGetShardIterator\u003c/code\u003e request is made too often, you receive a \u003ccode\u003eProvisionedThroughputExceededException\u003c/code\u003e. For more information about throughput limits, see \u003ca\u003eGetRecords\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eIf the shard is closed, the iterator can't return more data, and \u003ccode\u003eGetShardIterator\u003c/code\u003e returns \u003ccode\u003enull\u003c/code\u003e for its \u003ccode\u003eShardIterator\u003c/code\u003e. A shard can be closed using \u003ca\u003eSplitShard\u003c/a\u003e or \u003ca\u003eMergeShards\u003c/a\u003e.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eGetShardIterator\u003c/code\u003e has a limit of 5 transactions per second per account per open shard.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gsiiStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gsiiShardId",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gsiiShardIteratorType",
                        "type": "Text"
                    }
                ],
                "name": "GetShardIteratorInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "gsiiStartingSequenceNumber",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "groRecords",
                        "type": "List Record"
                    }
                ],
                "name": "GetRecordsOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "groNextShardIterator",
                        "type": "Maybe Text"
                    }
                ]
            },
            "namespace": "Network.AWS.Kinesis.GetRecords",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "GetRecords",
            "method": "post",
            "documentation": "\u003cp\u003eGets data records from a shard.\u003c/p\u003e \u003cp\u003eSpecify a shard iterator using the \u003ccode\u003eShardIterator\u003c/code\u003e parameter. The shard iterator specifies the position in the shard from which you want to start reading data records sequentially. If there are no records available in the portion of the shard that the iterator points to, \u003ccode\u003eGetRecords\u003c/code\u003e returns an empty list. Note that it might take multiple calls to get to a portion of the shard that contains records.\u003c/p\u003e \u003cp\u003eYou can scale by provisioning multiple shards. Your application should have one thread per shard, each reading continuously from its stream. To read from a stream continually, call \u003ccode\u003eGetRecords\u003c/code\u003e in a loop. Use \u003ca\u003eGetShardIterator\u003c/a\u003e to get the shard iterator to specify in the first \u003ccode\u003eGetRecords\u003c/code\u003e call. \u003ccode\u003eGetRecords\u003c/code\u003e returns a new shard iterator in \u003ccode\u003eNextShardIterator\u003c/code\u003e. Specify the shard iterator returned in \u003ccode\u003eNextShardIterator\u003c/code\u003e in subsequent calls to \u003ccode\u003eGetRecords\u003c/code\u003e. Note that if the shard has been closed, the shard iterator can't return more data and \u003ccode\u003eGetRecords\u003c/code\u003e returns \u003ccode\u003enull\u003c/code\u003e in \u003ccode\u003eNextShardIterator\u003c/code\u003e. You can terminate the loop when the shard is closed, or when the shard iterator reaches the record with the sequence number or other attribute that marks it as the last record to process.\u003c/p\u003e \u003cp\u003eEach data record can be up to 50 KB in size, and each shard can read up to 2 MB per second. You can ensure that your calls don't exceed the maximum supported size or throughput by specifying the maximum number of records that \u003ccode\u003eGetRecords\u003c/code\u003e can return in the \u003ccode\u003eLimit\u003c/code\u003e parameter. Consider your average record size when determining this limit. For example, if your average record size is 40 KB, you can limit the data returned to about 1 MB per call by specifying 25 as the limit.\u003c/p\u003e \u003cp\u003eThe size of the data returned by \u003ccode\u003eGetRecords\u003c/code\u003e will vary depending on the utilization of the shard. The maximum size of data that \u003ccode\u003eGetRecords\u003c/code\u003e can return is 10 MB. If a call returns 10 MB of data, subsequent calls made within the next 5 seconds throw \u003ccode\u003eProvisionedThroughputExceededException\u003c/code\u003e. If there is insufficient provisioned throughput on the shard, subsequent calls made within the next 1 second throw \u003ccode\u003eProvisionedThroughputExceededException\u003c/code\u003e. Note that \u003ccode\u003eGetRecords\u003c/code\u003e won't return any data when it throws an exception. For this reason, we recommend that you wait one second between calls to \u003ccode\u003eGetRecords\u003c/code\u003e; however, it's possible that the application will get exceptions for longer than 1 second.\u003c/p\u003e \u003cp\u003eTo detect whether the application is falling behind in processing, add a timestamp to your records and note how long it takes to process them. You can also monitor how much data is in a stream using the CloudWatch metrics for \u003ccode\u003ePutRecord\u003c/code\u003e. For more information, see \u003ca href=\"http://docs.aws.amazon.com/kinesis/latest/dev/monitoring_with_cloudwatch.html\"\u003eMonitoring Amazon Kinesis with Amazon CloudWatch\u003c/a\u003e in the \u003ci\u003eAmazon Kinesis Developer Guide\u003c/i\u003e.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "griShardIterator",
                        "type": "Text"
                    }
                ],
                "name": "GetRecordsInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "griLimit",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltfsoTags",
                        "type": "List Tag"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltfsoHasMoreTags",
                        "type": "Bool"
                    }
                ],
                "name": "ListTagsForStreamOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.Kinesis.ListTagsForStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "ListTagsForStream",
            "method": "post",
            "documentation": "\u003cp\u003eLists the tags for the specified Amazon Kinesis stream.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltfsiStreamName",
                        "type": "Text"
                    }
                ],
                "name": "ListTagsForStreamInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltfsiExclusiveStartTagKey",
                        "type": "Maybe Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ltfsiLimit",
                        "type": "Maybe Int"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.Kinesis.AddTagsToStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "AddTagsToStream",
            "method": "post",
            "documentation": "\u003cp\u003eAdds or updates tags for the specified Amazon Kinesis stream. Each stream can have up to 10 tags. \u003c/p\u003e \u003cp\u003eIf tags have already been assigned to the stream, \u003ccode\u003eAddTagsToStream\u003c/code\u003e overwrites any existing tags that correspond to the specified tag keys.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "attsiStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "attsiTags",
                        "type": "Map Text Text"
                    }
                ],
                "name": "AddTagsToStreamInput",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.Kinesis.DeleteStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "DeleteStream",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes a stream and all its shards and data. You must shut down any applications that are operating on the stream before you delete the stream. If an application attempts to operate on a deleted stream, it will receive the exception \u003ccode\u003eResourceNotFoundException\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf the stream is in the \u003ccode\u003eACTIVE\u003c/code\u003e state, you can delete it. After a \u003ccode\u003eDeleteStream\u003c/code\u003e request, the specified stream is in the \u003ccode\u003eDELETING\u003c/code\u003e state until Amazon Kinesis completes the deletion.\u003c/p\u003e \u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e Amazon Kinesis might continue to accept data read and write operations, such as \u003ca\u003ePutRecord\u003c/a\u003e and \u003ca\u003eGetRecords\u003c/a\u003e, on a stream in the \u003ccode\u003eDELETING\u003c/code\u003e state until the stream deletion is complete.\u003c/p\u003e \u003cp\u003eWhen you delete a stream, any shards in that stream are also deleted, and any tags are dissociated from the stream.\u003c/p\u003e \u003cp\u003eYou can use the \u003ca\u003eDescribeStream\u003c/a\u003e operation to check the state of the stream, which is returned in \u003ccode\u003eStreamStatus\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eDeleteStream\u003c/code\u003e has a limit of 5 transactions per second per account.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic",
                    "monoid"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dsi1StreamName",
                    "type": "Text"
                },
                "name": "DeleteStreamInput",
                "type": "newtype"
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.Kinesis.RemoveTagsFromStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "RemoveTagsFromStream",
            "method": "post",
            "documentation": "\u003cp\u003eDeletes tags from the specified Amazon Kinesis stream.\u003c/p\u003e \u003cp\u003eIf you specify a tag that does not exist, it is ignored.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rtfsiStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "rtfsiTagKeys",
                        "type": "List1 Text"
                    }
                ],
                "name": "RemoveTagsFromStreamInput",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "wrapper": false,
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lsoStreamNames",
                        "type": "List Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lsoHasMoreStreams",
                        "type": "Bool"
                    }
                ],
                "name": "ListStreamsOutput",
                "resultWrapper": null,
                "type": "record",
                "optional": []
            },
            "namespace": "Network.AWS.Kinesis.ListStreams",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "ListStreams",
            "method": "post",
            "documentation": "\u003cp\u003e Lists your streams.\u003c/p\u003e \u003cp\u003e The number of streams may be too large to return from a single call to \u003ccode\u003eListStreams\u003c/code\u003e. You can limit the number of returned streams using the \u003ccode\u003eLimit\u003c/code\u003e parameter. If you do not specify a value for the \u003ccode\u003eLimit\u003c/code\u003e parameter, Amazon Kinesis uses the default limit, which is currently 10.\u003c/p\u003e \u003cp\u003e You can detect if there are more streams available to list by using the \u003ccode\u003eHasMoreStreams\u003c/code\u003e flag from the returned output. If there are more streams available, you can request more streams by using the name of the last stream returned by the \u003ccode\u003eListStreams\u003c/code\u003e request in the \u003ccode\u003eExclusiveStartStreamName\u003c/code\u003e parameter in a subsequent request to \u003ccode\u003eListStreams\u003c/code\u003e. The group of stream names returned by the subsequent request is then added to the list. You can continue this process until all the stream names have been collected in the list. \u003c/p\u003e \u003cp\u003e\u003ccode\u003eListStreams\u003c/code\u003e has a limit of 5 transactions per second per account.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [],
                "name": "ListStreamsInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lsiLimit",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "lsiExclusiveStartStreamName",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.Kinesis.CreateStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "CreateStream",
            "method": "post",
            "documentation": "\u003cp\u003eCreates a Amazon Kinesis stream. A stream captures and transports data records that are continuously emitted from different data sources or \u003ci\u003eproducers\u003c/i\u003e. Scale-out within an Amazon Kinesis stream is explicitly supported by means of shards, which are uniquely identified groups of data records in an Amazon Kinesis stream.\u003c/p\u003e \u003cp\u003eYou specify and control the number of shards that a stream is composed of. Each open shard can support up to 5 read transactions per second, up to a maximum total of 2 MB of data read per second. Each shard can support up to 1000 write transactions per second, up to a maximum total of 1 MB data written per second. You can add shards to a stream if the amount of data input increases and you can remove shards if the amount of data input decreases.\u003c/p\u003e \u003cp\u003eThe stream name identifies the stream. The name is scoped to the AWS account used by the application. It is also scoped by region. That is, two streams in two different accounts can have the same name, and two streams in the same account, but in two different regions, can have the same name. \u003c/p\u003e \u003cp\u003e\u003ccode\u003eCreateStream\u003c/code\u003e is an asynchronous operation. Upon receiving a \u003ccode\u003eCreateStream\u003c/code\u003e request, Amazon Kinesis immediately returns and sets the stream status to \u003ccode\u003eCREATING\u003c/code\u003e. After the stream is created, Amazon Kinesis sets the stream status to \u003ccode\u003eACTIVE\u003c/code\u003e. You should perform read and write operations only on an \u003ccode\u003eACTIVE\u003c/code\u003e stream. \u003c/p\u003e \u003cp\u003eYou receive a \u003ccode\u003eLimitExceededException\u003c/code\u003e when making a \u003ccode\u003eCreateStream\u003c/code\u003e request if you try to do one of the following:\u003c/p\u003e \u003cul\u003e \u003cli\u003eHave more than five streams in the \u003ccode\u003eCREATING\u003c/code\u003e state at any point in time.\u003c/li\u003e \u003cli\u003eCreate more shards than are authorized for your account.\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThe default limit for an AWS account is 10 shards per stream. If you need to create a stream with more than 10 shards, \u003ca href=\"http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\"\u003econtact AWS Support\u003c/a\u003e to increase the limit on your account.\u003c/p\u003e \u003cp\u003eYou can use \u003ccode\u003eDescribeStream\u003c/code\u003e to check the stream status, which is returned in \u003ccode\u003eStreamStatus\u003c/code\u003e.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eCreateStream\u003c/code\u003e has a limit of 5 transactions per second per account.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "csiStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "csiShardCount",
                        "type": "Int"
                    }
                ],
                "name": "CreateStreamInput",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [],
                "wrapper": false,
                "name": "Empty",
                "resultWrapper": null,
                "type": "empty"
            },
            "namespace": "Network.AWS.Kinesis.SplitShard",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "SplitShard",
            "method": "post",
            "documentation": "\u003cp\u003eSplits a shard into two new shards in the stream, to increase the stream's capacity to ingest and transport data. \u003ccode\u003eSplitShard\u003c/code\u003e is called when there is a need to increase the overall capacity of stream because of an expected increase in the volume of data records being ingested. \u003c/p\u003e \u003cp\u003eYou can also use \u003ccode\u003eSplitShard\u003c/code\u003e when a shard appears to be approaching its maximum utilization, for example, when the set of producers sending data into the specific shard are suddenly sending more than previously anticipated. You can also call \u003ccode\u003eSplitShard\u003c/code\u003e to increase stream capacity, so that more Amazon Kinesis applications can simultaneously read data from the stream for real-time processing. \u003c/p\u003e \u003cp\u003eYou must specify the shard to be split and the new hash key, which is the position in the shard where the shard gets split in two. In many cases, the new hash key might simply be the average of the beginning and ending hash key, but it can be any hash key value in the range being mapped into the shard. For more information about splitting shards, see \u003ca href=\"http://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-api-java.html#kinesis-using-api-java-resharding-split\"\u003eSplit a Shard\u003c/a\u003e in the \u003ci\u003eAmazon Kinesis Developer Guide\u003c/i\u003e.\u003c/p\u003e \u003cp\u003eYou can use \u003ca\u003eDescribeStream\u003c/a\u003e to determine the shard ID and hash key values for the \u003ccode\u003eShardToSplit\u003c/code\u003e and \u003ccode\u003eNewStartingHashKey\u003c/code\u003e parameters that are specified in the \u003ccode\u003eSplitShard\u003c/code\u003e request.\u003c/p\u003e \u003cp\u003e\u003ccode\u003eSplitShard\u003c/code\u003e is an asynchronous operation. Upon receiving a \u003ccode\u003eSplitShard\u003c/code\u003e request, Amazon Kinesis immediately returns a response and sets the stream status to \u003ccode\u003eUPDATING\u003c/code\u003e. After the operation is completed, Amazon Kinesis sets the stream status to \u003ccode\u003eACTIVE\u003c/code\u003e. Read and write operations continue to work while the stream is in the \u003ccode\u003eUPDATING\u003c/code\u003e state. \u003c/p\u003e \u003cp\u003eYou can use \u003ccode\u003eDescribeStream\u003c/code\u003e to check the status of the stream, which is returned in \u003ccode\u003eStreamStatus\u003c/code\u003e. If the stream is in the \u003ccode\u003eACTIVE\u003c/code\u003e state, you can call \u003ccode\u003eSplitShard\u003c/code\u003e. If a stream is in \u003ccode\u003eCREATING\u003c/code\u003e or \u003ccode\u003eUPDATING\u003c/code\u003e or \u003ccode\u003eDELETING\u003c/code\u003e states, \u003ccode\u003eDescribeStream\u003c/code\u003e returns a \u003ccode\u003eResourceInUseException\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eIf the specified stream does not exist, \u003ccode\u003eDescribeStream\u003c/code\u003e returns a \u003ccode\u003eResourceNotFoundException\u003c/code\u003e. If you try to create more shards than are authorized for your account, you receive a \u003ccode\u003eLimitExceededException\u003c/code\u003e. \u003c/p\u003e \u003cp\u003eThe default limit for an AWS account is 10 shards per stream. If you need to create a stream with more than 10 shards, \u003ca href=\"http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\"\u003econtact AWS Support\u003c/a\u003e to increase the limit on your account.\u003c/p\u003e \u003cp\u003eIf you try to operate on too many streams in parallel using \u003ca\u003eCreateStream\u003c/a\u003e, \u003ca\u003eDeleteStream\u003c/a\u003e, \u003ca\u003eMergeShards\u003c/a\u003e or \u003ca\u003eSplitShard\u003c/a\u003e, you receive a \u003ccode\u003eLimitExceededException\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e\u003ccode\u003eSplitShard\u003c/code\u003e has limit of 5 transactions per second per account.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ssiStreamName",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ssiShardToSplit",
                        "type": "Text"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "ssiNewStartingHashKey",
                        "type": "Text"
                    }
                ],
                "name": "SplitShardInput",
                "type": "record",
                "optional": []
            }
        },
        {
            "response": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "field": {
                    "streaming": false,
                    "payload": false,
                    "name": "dsoStreamDescription",
                    "type": "StreamDescription"
                },
                "wrapper": false,
                "name": "DescribeStreamOutput",
                "resultWrapper": null,
                "type": "newtype"
            },
            "namespace": "Network.AWS.Kinesis.DescribeStream",
            "uri": {
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "query": []
            },
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.Kinesis.Types"
            ],
            "name": "DescribeStream",
            "method": "post",
            "documentation": "\u003cp\u003eDescribes the specified stream.\u003c/p\u003e \u003cp\u003eThe information about the stream includes its current status, its Amazon Resource Name (ARN), and an array of shard objects. For each shard object, there is information about the hash key and sequence number ranges that the shard spans, and the IDs of any earlier shards that played in a role in creating the shard. A sequence number is the identifier associated with every record ingested in the Amazon Kinesis stream. The sequence number is assigned when a record is put into the stream.\u003c/p\u003e \u003cp\u003eYou can limit the number of returned shards using the \u003ccode\u003eLimit\u003c/code\u003e parameter. The number of shards in a stream may be too large to return from a single call to \u003ccode\u003eDescribeStream\u003c/code\u003e. You can detect this by using the \u003ccode\u003eHasMoreShards\u003c/code\u003e flag in the returned output. \u003ccode\u003eHasMoreShards\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e when there is more data available. \u003c/p\u003e \u003cp\u003e\u003ccode\u003eDescribeStream\u003c/code\u003e is a paginated operation. If there are more shards available, you can request them using the shard ID of the last shard returned. Specify this ID in the \u003ccode\u003eExclusiveStartShardId\u003c/code\u003e parameter in a subsequent request to \u003ccode\u003eDescribeStream\u003c/code\u003e. \u003c/p\u003e \u003cp\u003e\u003ccode\u003eDescribeStream\u003c/code\u003e has a limit of 10 transactions per second per account.\u003c/p\u003e",
            "request": {
                "deriving": [
                    "eq",
                    "ord",
                    "show",
                    "generic"
                ],
                "payload": null,
                "required": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dsiStreamName",
                        "type": "Text"
                    }
                ],
                "name": "DescribeStreamInput",
                "type": "record",
                "optional": [
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dsiLimit",
                        "type": "Maybe Int"
                    },
                    {
                        "streaming": false,
                        "payload": false,
                        "name": "dsiExclusiveStartShardId",
                        "type": "Maybe Text"
                    }
                ]
            }
        }
    ]
}