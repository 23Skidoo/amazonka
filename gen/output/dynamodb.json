{
    "waiters": {
        "waiters": {
            "TableNotExists": {
                "operation": "DescribeTable",
                "acceptors": [
                    {
                        "matcher": "matchError",
                        "state": "success",
                        "argument": null,
                        "expected": "\"ResourceNotFoundException\""
                    }
                ],
                "maxAttempts": 25,
                "delay": 20
            },
            "TableExists": {
                "operation": "DescribeTable",
                "acceptors": [
                    {
                        "matcher": "matchAll",
                        "state": "success",
                        "argument": "dtrTable . tdTableStatus",
                        "expected": "TSActive"
                    },
                    {
                        "matcher": "matchError",
                        "state": "retry",
                        "argument": null,
                        "expected": "\"ResourceNotFoundException\""
                    }
                ],
                "maxAttempts": 25,
                "delay": 20
            }
        },
        "namespace": "Network.AWS.DynamoDB.Waiters",
        "imports": [
            "Network.AWS.DynamoDB.DescribeTable",
            "Network.AWS.DynamoDB.Types"
        ]
    },
    "service": {
        "signature": "V4",
        "checksum": "sha256",
        "abbrev": "DynamoDB",
        "error": "JSONError",
        "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/Welcome.html",
        "namespace": "Network.AWS.DynamoDB",
        "protocol": "json",
        "imports": [
            "Network.AWS.DynamoDB.BatchGetItem",
            "Network.AWS.DynamoDB.BatchWriteItem",
            "Network.AWS.DynamoDB.CreateTable",
            "Network.AWS.DynamoDB.DeleteItem",
            "Network.AWS.DynamoDB.DeleteTable",
            "Network.AWS.DynamoDB.DescribeTable",
            "Network.AWS.DynamoDB.GetItem",
            "Network.AWS.DynamoDB.ListTables",
            "Network.AWS.DynamoDB.PutItem",
            "Network.AWS.DynamoDB.Query",
            "Network.AWS.DynamoDB.Scan",
            "Network.AWS.DynamoDB.Types",
            "Network.AWS.DynamoDB.UpdateItem",
            "Network.AWS.DynamoDB.UpdateTable",
            "Network.AWS.DynamoDB.Waiters"
        ],
        "name": "Amazon DynamoDB",
        "version": "2012-08-10",
        "documentation": "-- | Amazon DynamoDB is a fully managed NoSQL database service that provides fast\n-- and predictable performance with seamless scalability. You can use Amazon\n-- DynamoDB to create a database table that can store and retrieve any amount of\n-- data, and serve any level of request traffic. Amazon DynamoDB automatically\n-- spreads the data and traffic for the table over a sufficient number of\n-- servers to handle the request capacity specified by the customer and the\n-- amount of data stored, while maintaining consistent and fast performance.",
        "xmlNamespace": null,
        "jsonVersion": "1.0",
        "retryDelay": {
            "base": 5.0e-2,
            "attempts": 10,
            "growth": 2
        },
        "endpointPrefix": "dynamodb",
        "retryPolicies": {
            "throttling": {
                "error": "ThrottlingException",
                "code": 400
            },
            "throughput_exceeded": {
                "error": "ProvisionedThroughputExceededException",
                "code": 400
            },
            "service_unavailable": {
                "error": null,
                "code": 503
            },
            "general_server_error": {
                "error": null,
                "code": 500
            },
            "limit_exceeded": {
                "error": null,
                "code": 509
            }
        },
        "targetPrefix": "DynamoDB_20120810"
    },
    "cabal": {
        "other": [],
        "library": "amazonka-dynamodb",
        "abbrev": "DynamoDB",
        "exposed": [
            "Network.AWS.DynamoDB",
            "Network.AWS.DynamoDB.BatchGetItem",
            "Network.AWS.DynamoDB.BatchWriteItem",
            "Network.AWS.DynamoDB.CreateTable",
            "Network.AWS.DynamoDB.DeleteItem",
            "Network.AWS.DynamoDB.DeleteTable",
            "Network.AWS.DynamoDB.DescribeTable",
            "Network.AWS.DynamoDB.GetItem",
            "Network.AWS.DynamoDB.ListTables",
            "Network.AWS.DynamoDB.PutItem",
            "Network.AWS.DynamoDB.Query",
            "Network.AWS.DynamoDB.Scan",
            "Network.AWS.DynamoDB.Types",
            "Network.AWS.DynamoDB.UpdateItem",
            "Network.AWS.DynamoDB.UpdateTable",
            "Network.AWS.DynamoDB.Waiters"
        ],
        "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/Welcome.html",
        "protocol": "json",
        "name": "Amazon DynamoDB",
        "version": "0.3.0",
        "description": "Amazon DynamoDB is a fully managed NoSQL database service that provides fast\nand predictable performance with seamless scalability. You can use Amazon\nDynamoDB to create a database table that can store and retrieve any amount of\ndata, and serve any level of request traffic. Amazon DynamoDB automatically\nspreads the data and traffic for the table over a sufficient number of\nservers to handle the request capacity specified by the customer and the\namount of data stored, while maintaining consistent and fast performance."
    },
    "types": {
        "namespace": "Network.AWS.DynamoDB.Types",
        "types": [
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 15,
                "ctor": "writeRequest",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "wPutRequest",
                        "name": "_wPutRequest",
                        "shape": "PutRequest",
                        "locationName": "PutRequest",
                        "documentation": "-- | A request to perform a /PutItem/ operation.",
                        "typeExposed": "Maybe PutRequest",
                        "type": "Maybe PutRequest"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "wDeleteRequest",
                        "name": "_wDeleteRequest",
                        "shape": "DeleteRequest",
                        "locationName": "DeleteRequest",
                        "documentation": "-- | A request to perform a /DeleteItem/ operation.",
                        "typeExposed": "Maybe DeleteRequest",
                        "type": "Maybe DeleteRequest"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 14,
                "name": "WriteRequest",
                "locationPad": 14,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "wPutRequest",
                        "name": "_wPutRequest",
                        "shape": "PutRequest",
                        "locationName": "PutRequest",
                        "documentation": "-- | A request to perform a /PutItem/ operation.",
                        "typeExposed": "Maybe PutRequest",
                        "type": "Maybe PutRequest"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "wDeleteRequest",
                        "name": "_wDeleteRequest",
                        "shape": "DeleteRequest",
                        "locationName": "DeleteRequest",
                        "documentation": "-- | A request to perform a /DeleteItem/ operation.",
                        "typeExposed": "Maybe DeleteRequest",
                        "type": "Maybe DeleteRequest"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "wDeleteRequest",
                        "name": "_wDeleteRequest",
                        "shape": "DeleteRequest",
                        "locationName": "DeleteRequest",
                        "documentation": "-- | A request to perform a /DeleteItem/ operation.",
                        "typeExposed": "Maybe DeleteRequest",
                        "type": "Maybe DeleteRequest"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "wPutRequest",
                        "name": "_wPutRequest",
                        "shape": "PutRequest",
                        "locationName": "PutRequest",
                        "documentation": "-- | A request to perform a /PutItem/ operation.",
                        "typeExposed": "Maybe PutRequest",
                        "type": "Maybe PutRequest"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show"
                ],
                "fieldPad": 26,
                "ctor": "provisionedThroughputDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastIncreaseDateTime",
                        "name": "_ptdLastIncreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastIncreaseDateTime",
                        "documentation": "-- | The date and time of the last provisioned throughput increase for this table.",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastDecreaseDateTime",
                        "name": "_ptdLastDecreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastDecreaseDateTime",
                        "documentation": "-- | The date and time of the last provisioned throughput decrease for this table.",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdNumberOfDecreasesToday",
                        "name": "_ptdNumberOfDecreasesToday",
                        "shape": "PositiveLongObject",
                        "locationName": "NumberOfDecreasesToday",
                        "documentation": "-- | The number of provisioned throughput decreases for this table during this UTC\n-- calendar day. For current maximums on provisioned throughput decreases, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html Limits\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdReadCapacityUnits",
                        "name": "_ptdReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "-- | The maximum number of strongly consistent reads consumed per second before\n-- DynamoDB returns a /ThrottlingException/. Eventually consistent reads require\n-- less effort than strongly consistent reads, so a setting of 50 /ReadCapacityUnits/ per second provides 100 eventually consistent /ReadCapacityUnits/ per second.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdWriteCapacityUnits",
                        "name": "_ptdWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "-- | The maximum number of writes consumed per second before DynamoDB returns a /ThrottlingException/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 23,
                "name": "ProvisionedThroughputDescription",
                "locationPad": 23,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastIncreaseDateTime",
                        "name": "_ptdLastIncreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastIncreaseDateTime",
                        "documentation": "-- | The date and time of the last provisioned throughput increase for this table.",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastDecreaseDateTime",
                        "name": "_ptdLastDecreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastDecreaseDateTime",
                        "documentation": "-- | The date and time of the last provisioned throughput decrease for this table.",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdNumberOfDecreasesToday",
                        "name": "_ptdNumberOfDecreasesToday",
                        "shape": "PositiveLongObject",
                        "locationName": "NumberOfDecreasesToday",
                        "documentation": "-- | The number of provisioned throughput decreases for this table during this UTC\n-- calendar day. For current maximums on provisioned throughput decreases, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html Limits\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdReadCapacityUnits",
                        "name": "_ptdReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "-- | The maximum number of strongly consistent reads consumed per second before\n-- DynamoDB returns a /ThrottlingException/. Eventually consistent reads require\n-- less effort than strongly consistent reads, so a setting of 50 /ReadCapacityUnits/ per second provides 100 eventually consistent /ReadCapacityUnits/ per second.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdWriteCapacityUnits",
                        "name": "_ptdWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "-- | The maximum number of writes consumed per second before DynamoDB returns a /ThrottlingException/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastDecreaseDateTime",
                        "name": "_ptdLastDecreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastDecreaseDateTime",
                        "documentation": "-- | The date and time of the last provisioned throughput decrease for this table.",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Time",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdLastIncreaseDateTime",
                        "name": "_ptdLastIncreaseDateTime",
                        "shape": "Date",
                        "locationName": "LastIncreaseDateTime",
                        "documentation": "-- | The date and time of the last provisioned throughput increase for this table.",
                        "typeExposed": "Maybe UTCTime",
                        "type": "Maybe POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdNumberOfDecreasesToday",
                        "name": "_ptdNumberOfDecreasesToday",
                        "shape": "PositiveLongObject",
                        "locationName": "NumberOfDecreasesToday",
                        "documentation": "-- | The number of provisioned throughput decreases for this table during this UTC\n-- calendar day. For current maximums on provisioned throughput decreases, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html Limits\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdReadCapacityUnits",
                        "name": "_ptdReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "-- | The maximum number of strongly consistent reads consumed per second before\n-- DynamoDB returns a /ThrottlingException/. Eventually consistent reads require\n-- less effort than strongly consistent reads, so a setting of 50 /ReadCapacityUnits/ per second provides 100 eventually consistent /ReadCapacityUnits/ per second.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ptdWriteCapacityUnits",
                        "name": "_ptdWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "-- | The maximum number of writes consumed per second before DynamoDB returns a /ThrottlingException/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Hash": "HASH",
                    "Range": "RANGE"
                },
                "valuePad": 6,
                "name": "KeyType",
                "type": "nullary",
                "branchPad": 5
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 7,
                "ctor": "attributeValue",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avS",
                        "name": "_avS",
                        "shape": "StringAttributeValue",
                        "locationName": "S",
                        "documentation": "-- | A String data type.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avN",
                        "name": "_avN",
                        "shape": "NumberAttributeValue",
                        "locationName": "N",
                        "documentation": "-- | A Number data type.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avB",
                        "name": "_avB",
                        "shape": "BinaryAttributeValue",
                        "locationName": "B",
                        "documentation": "-- | A Binary data type.",
                        "typeExposed": "Maybe Base64",
                        "type": "Maybe Base64"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avSS",
                        "name": "_avSS",
                        "shape": "StringSetAttributeValue",
                        "locationName": "SS",
                        "documentation": "-- | A String Set data type.",
                        "typeExposed": "[Text]",
                        "type": "List \"SS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avNS",
                        "name": "_avNS",
                        "shape": "NumberSetAttributeValue",
                        "locationName": "NS",
                        "documentation": "-- | A Number Set data type.",
                        "typeExposed": "[Text]",
                        "type": "List \"NS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avBS",
                        "name": "_avBS",
                        "shape": "BinarySetAttributeValue",
                        "locationName": "BS",
                        "documentation": "-- | A Binary Set data type.",
                        "typeExposed": "[Base64]",
                        "type": "List \"BS\" Base64"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avM",
                        "name": "_avM",
                        "shape": "MapAttributeValue",
                        "locationName": "M",
                        "documentation": "-- | A Map of attribute values.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avL",
                        "name": "_avL",
                        "shape": "ListAttributeValue",
                        "locationName": "L",
                        "documentation": "-- | A List of attribute values.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"L\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avNULL",
                        "name": "_avNULL",
                        "shape": "NullAttributeValue",
                        "locationName": "NULL",
                        "documentation": "-- | A Null data type.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avBOOL",
                        "name": "_avBOOL",
                        "shape": "BooleanAttributeValue",
                        "locationName": "BOOL",
                        "documentation": "-- | A Boolean data type.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 5,
                "name": "AttributeValue",
                "locationPad": 5,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avS",
                        "name": "_avS",
                        "shape": "StringAttributeValue",
                        "locationName": "S",
                        "documentation": "-- | A String data type.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avN",
                        "name": "_avN",
                        "shape": "NumberAttributeValue",
                        "locationName": "N",
                        "documentation": "-- | A Number data type.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avB",
                        "name": "_avB",
                        "shape": "BinaryAttributeValue",
                        "locationName": "B",
                        "documentation": "-- | A Binary data type.",
                        "typeExposed": "Maybe Base64",
                        "type": "Maybe Base64"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avSS",
                        "name": "_avSS",
                        "shape": "StringSetAttributeValue",
                        "locationName": "SS",
                        "documentation": "-- | A String Set data type.",
                        "typeExposed": "[Text]",
                        "type": "List \"SS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avNS",
                        "name": "_avNS",
                        "shape": "NumberSetAttributeValue",
                        "locationName": "NS",
                        "documentation": "-- | A Number Set data type.",
                        "typeExposed": "[Text]",
                        "type": "List \"NS\" Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avBS",
                        "name": "_avBS",
                        "shape": "BinarySetAttributeValue",
                        "locationName": "BS",
                        "documentation": "-- | A Binary Set data type.",
                        "typeExposed": "[Base64]",
                        "type": "List \"BS\" Base64"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avM",
                        "name": "_avM",
                        "shape": "MapAttributeValue",
                        "locationName": "M",
                        "documentation": "-- | A Map of attribute values.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avL",
                        "name": "_avL",
                        "shape": "ListAttributeValue",
                        "locationName": "L",
                        "documentation": "-- | A List of attribute values.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"L\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avNULL",
                        "name": "_avNULL",
                        "shape": "NullAttributeValue",
                        "locationName": "NULL",
                        "documentation": "-- | A Null data type.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avBOOL",
                        "name": "_avBOOL",
                        "shape": "BooleanAttributeValue",
                        "locationName": "BOOL",
                        "documentation": "-- | A Boolean data type.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avB",
                        "name": "_avB",
                        "shape": "BinaryAttributeValue",
                        "locationName": "B",
                        "documentation": "-- | A Binary data type.",
                        "typeExposed": "Maybe Base64",
                        "type": "Maybe Base64"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avBOOL",
                        "name": "_avBOOL",
                        "shape": "BooleanAttributeValue",
                        "locationName": "BOOL",
                        "documentation": "-- | A Boolean data type.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avBS",
                        "name": "_avBS",
                        "shape": "BinarySetAttributeValue",
                        "locationName": "BS",
                        "documentation": "-- | A Binary Set data type.",
                        "typeExposed": "[Base64]",
                        "type": "List \"BS\" Base64"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avL",
                        "name": "_avL",
                        "shape": "ListAttributeValue",
                        "locationName": "L",
                        "documentation": "-- | A List of attribute values.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"L\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avM",
                        "name": "_avM",
                        "shape": "MapAttributeValue",
                        "locationName": "M",
                        "documentation": "-- | A Map of attribute values.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avN",
                        "name": "_avN",
                        "shape": "NumberAttributeValue",
                        "locationName": "N",
                        "documentation": "-- | A Number data type.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avNS",
                        "name": "_avNS",
                        "shape": "NumberSetAttributeValue",
                        "locationName": "NS",
                        "documentation": "-- | A Number Set data type.",
                        "typeExposed": "[Text]",
                        "type": "List \"NS\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avNULL",
                        "name": "_avNULL",
                        "shape": "NullAttributeValue",
                        "locationName": "NULL",
                        "documentation": "-- | A Null data type.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avS",
                        "name": "_avS",
                        "shape": "StringAttributeValue",
                        "locationName": "S",
                        "documentation": "-- | A String data type.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "avSS",
                        "name": "_avSS",
                        "shape": "StringSetAttributeValue",
                        "locationName": "SS",
                        "documentation": "-- | A String Set data type.",
                        "typeExposed": "[Text]",
                        "type": "List \"SS\" Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Deleting": "DELETING",
                    "Updating": "UPDATING",
                    "Creating": "CREATING",
                    "Active": "ACTIVE"
                },
                "valuePad": 9,
                "name": "IndexStatus",
                "type": "nullary",
                "branchPad": 8
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show"
                ],
                "fieldPad": 21,
                "ctor": "provisionedThroughput",
                "contents": [
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ptReadCapacityUnits",
                        "name": "_ptReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "-- | The maximum number of strongly consistent reads consumed per second before\n-- DynamoDB returns a /ThrottlingException/. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput SpecifyingRead and Write Requirements\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    },
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ptWriteCapacityUnits",
                        "name": "_ptWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "-- | The maximum number of writes consumed per second before DynamoDB returns a /ThrottlingException/. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput Specifying Read and Write Requirements\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ptReadCapacityUnits",
                        "name": "_ptReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "-- | The maximum number of strongly consistent reads consumed per second before\n-- DynamoDB returns a /ThrottlingException/. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput SpecifyingRead and Write Requirements\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    },
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ptWriteCapacityUnits",
                        "name": "_ptWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "-- | The maximum number of writes consumed per second before DynamoDB returns a /ThrottlingException/. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput Specifying Read and Write Requirements\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    }
                ],
                "contentPad": 19,
                "name": "ProvisionedThroughput",
                "locationPad": 19,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ptReadCapacityUnits",
                        "name": "_ptReadCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "ReadCapacityUnits",
                        "documentation": "-- | The maximum number of strongly consistent reads consumed per second before\n-- DynamoDB returns a /ThrottlingException/. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput SpecifyingRead and Write Requirements\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    },
                    {
                        "location": null,
                        "iso": "_Nat",
                        "lensMapping": "_Nat",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ptWriteCapacityUnits",
                        "name": "_ptWriteCapacityUnits",
                        "shape": "PositiveLongObject",
                        "locationName": "WriteCapacityUnits",
                        "documentation": "-- | The maximum number of writes consumed per second before DynamoDB returns a /ThrottlingException/. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput Specifying Read and Write Requirements\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Natural",
                        "type": "Nat"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "TSUpdating": "UPDATING",
                    "TSDeleting": "DELETING",
                    "TSActive": "ACTIVE",
                    "TSCreating": "CREATING"
                },
                "valuePad": 9,
                "name": "TableStatus",
                "type": "nullary",
                "branchPad": 10
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Include": "INCLUDE",
                    "All": "ALL",
                    "KeysOnly": "KEYS_ONLY"
                },
                "valuePad": 10,
                "name": "ProjectionType",
                "type": "nullary",
                "branchPad": 8
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 25,
                "ctor": "tableDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdAttributeDefinitions",
                        "name": "_tdAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of /AttributeDefinition/ objects. Each of these objects describes one\n-- attribute in the table and index key schema.\n--\n-- Each /AttributeDefinition/ object in this array is composed of:\n--\n-- /AttributeName/ - The name of the attribute.\n--\n-- /AttributeType/ - The data type for the attribute.\n--\n--",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableName",
                        "name": "_tdTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdKeySchema",
                        "name": "_tdKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The primary key structure for the table. Each /KeySchemaElement/ consists of:\n--\n-- /AttributeName/ - The name of the attribute.\n--\n-- /KeyType/ - The key type for the attribute. Can be either 'HASH' or 'RANGE'.\n--\n-- For more information about primary keys, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey Primary Key\u003e in the /AmazonDynamoDB Developer Guide/.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableStatus",
                        "name": "_tdTableStatus",
                        "shape": "TableStatus",
                        "locationName": "TableStatus",
                        "documentation": "-- | The current state of the table:\n--\n-- /CREATING/ - The table is being created.\n--\n-- /UPDATING/ - The table is being updated.\n--\n-- /DELETING/ - The table is being deleted.\n--\n-- /ACTIVE/ - The table is ready for use.\n--\n--",
                        "typeExposed": "TableStatus",
                        "type": "TableStatus"
                    },
                    {
                        "location": null,
                        "iso": "_Time",
                        "lensMapping": "_Time",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdCreationDateTime",
                        "name": "_tdCreationDateTime",
                        "shape": "Date",
                        "locationName": "CreationDateTime",
                        "documentation": "-- | The date and time when the table was created, in \u003chttp://www.epochconverter.com/ UNIX epoch time\u003e format.",
                        "typeExposed": "UTCTime",
                        "type": "POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdProvisionedThroughput",
                        "name": "_tdProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": "-- | The provisioned throughput settings for the table, consisting of read and\n-- write capacity units, along with data about increases and decreases.",
                        "typeExposed": "ProvisionedThroughputDescription",
                        "type": "ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableSizeBytes",
                        "name": "_tdTableSizeBytes",
                        "shape": "Long",
                        "locationName": "TableSizeBytes",
                        "documentation": "-- | The total size of the specified table, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Integer",
                        "type": "Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdItemCount",
                        "name": "_tdItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified table. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Integer",
                        "type": "Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdLocalSecondaryIndexes",
                        "name": "_tdLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexDescriptionList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | Represents one or more local secondary indexes on the table. Each index is\n-- scoped to a given hash key value. Tables with one or more local secondary\n-- indexes are subject to an item collection size limit, where the amount of\n-- data within a given item collection cannot exceed 10 GB. Each element is\n-- composed of:\n--\n-- /IndexName/ - The name of the local secondary index.\n--\n-- /KeySchema/ - Specifies the complete index key schema. The attribute names\n-- in the key schema must be between 1 and 255 characters (inclusive). The key\n-- schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /IndexSizeBytes/ - Represents the total size of the index, in bytes.\n-- DynamoDB updates this value approximately every six hours. Recent changes\n-- might not be reflected in this value.\n--\n-- /ItemCount/ - Represents the number of items in the index. DynamoDB updates\n-- this value approximately every six hours. Recent changes might not be\n-- reflected in this value.\n--\n-- If the table is in the 'DELETING' state, no information about indexes will\n-- be returned.",
                        "typeExposed": "[LocalSecondaryIndexDescription]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdGlobalSecondaryIndexes",
                        "name": "_tdGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexDescriptionList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | The global secondary indexes, if any, on the table. Each index is scoped to a\n-- given hash key value. Each element is composed of:\n--\n-- /Backfilling/ - If true, then the index is currently in the backfilling\n-- phase. Backfilling occurs only when a new global secondary index is added to\n-- the table; it is the process by which DynamoDB populates the new index with\n-- data from the table. (This attribute does not appear for indexes that were\n-- created during a /CreateTable/ operation.)\n--\n-- /IndexName/ - The name of the global secondary index.\n--\n-- /IndexSizeBytes/ - The total size of the global secondary index, in bytes.\n-- DynamoDB updates this value approximately every six hours. Recent changes\n-- might not be reflected in this value.\n--\n-- /IndexStatus/ - The current status of the global secondary index:\n--\n-- /CREATING/ - The index is being created.\n--\n-- /UPDATING/ - The index is being updated.\n--\n-- /DELETING/ - The index is being deleted.\n--\n-- /ACTIVE/ - The index is ready for use.\n--\n-- /ItemCount/ - The number of items in the global secondary index. DynamoDB\n-- updates this value approximately every six hours. Recent changes might not be\n-- reflected in this value.\n--\n-- /KeySchema/ - Specifies the complete index key schema. The attribute names\n-- in the key schema must be between 1 and 255 characters (inclusive). The key\n-- schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /ProvisionedThroughput/ - The provisioned throughput settings for the\n-- global secondary index, consisting of read and write capacity units, along\n-- with data about increases and decreases.\n--\n-- If the table is in the 'DELETING' state, no information about indexes will\n-- be returned.",
                        "typeExposed": "[GlobalSecondaryIndexDescription]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndexDescription"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableName",
                        "name": "_tdTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdKeySchema",
                        "name": "_tdKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The primary key structure for the table. Each /KeySchemaElement/ consists of:\n--\n-- /AttributeName/ - The name of the attribute.\n--\n-- /KeyType/ - The key type for the attribute. Can be either 'HASH' or 'RANGE'.\n--\n-- For more information about primary keys, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey Primary Key\u003e in the /AmazonDynamoDB Developer Guide/.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableStatus",
                        "name": "_tdTableStatus",
                        "shape": "TableStatus",
                        "locationName": "TableStatus",
                        "documentation": "-- | The current state of the table:\n--\n-- /CREATING/ - The table is being created.\n--\n-- /UPDATING/ - The table is being updated.\n--\n-- /DELETING/ - The table is being deleted.\n--\n-- /ACTIVE/ - The table is ready for use.\n--\n--",
                        "typeExposed": "TableStatus",
                        "type": "TableStatus"
                    },
                    {
                        "location": null,
                        "iso": "_Time",
                        "lensMapping": "_Time",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdCreationDateTime",
                        "name": "_tdCreationDateTime",
                        "shape": "Date",
                        "locationName": "CreationDateTime",
                        "documentation": "-- | The date and time when the table was created, in \u003chttp://www.epochconverter.com/ UNIX epoch time\u003e format.",
                        "typeExposed": "UTCTime",
                        "type": "POSIX"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdProvisionedThroughput",
                        "name": "_tdProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": "-- | The provisioned throughput settings for the table, consisting of read and\n-- write capacity units, along with data about increases and decreases.",
                        "typeExposed": "ProvisionedThroughputDescription",
                        "type": "ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableSizeBytes",
                        "name": "_tdTableSizeBytes",
                        "shape": "Long",
                        "locationName": "TableSizeBytes",
                        "documentation": "-- | The total size of the specified table, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Integer",
                        "type": "Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdItemCount",
                        "name": "_tdItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified table. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Integer",
                        "type": "Integer"
                    }
                ],
                "contentPad": 23,
                "name": "TableDescription",
                "locationPad": 23,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdAttributeDefinitions",
                        "name": "_tdAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of /AttributeDefinition/ objects. Each of these objects describes one\n-- attribute in the table and index key schema.\n--\n-- Each /AttributeDefinition/ object in this array is composed of:\n--\n-- /AttributeName/ - The name of the attribute.\n--\n-- /AttributeType/ - The data type for the attribute.\n--\n--",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdLocalSecondaryIndexes",
                        "name": "_tdLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexDescriptionList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | Represents one or more local secondary indexes on the table. Each index is\n-- scoped to a given hash key value. Tables with one or more local secondary\n-- indexes are subject to an item collection size limit, where the amount of\n-- data within a given item collection cannot exceed 10 GB. Each element is\n-- composed of:\n--\n-- /IndexName/ - The name of the local secondary index.\n--\n-- /KeySchema/ - Specifies the complete index key schema. The attribute names\n-- in the key schema must be between 1 and 255 characters (inclusive). The key\n-- schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /IndexSizeBytes/ - Represents the total size of the index, in bytes.\n-- DynamoDB updates this value approximately every six hours. Recent changes\n-- might not be reflected in this value.\n--\n-- /ItemCount/ - Represents the number of items in the index. DynamoDB updates\n-- this value approximately every six hours. Recent changes might not be\n-- reflected in this value.\n--\n-- If the table is in the 'DELETING' state, no information about indexes will\n-- be returned.",
                        "typeExposed": "[LocalSecondaryIndexDescription]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdGlobalSecondaryIndexes",
                        "name": "_tdGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexDescriptionList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | The global secondary indexes, if any, on the table. Each index is scoped to a\n-- given hash key value. Each element is composed of:\n--\n-- /Backfilling/ - If true, then the index is currently in the backfilling\n-- phase. Backfilling occurs only when a new global secondary index is added to\n-- the table; it is the process by which DynamoDB populates the new index with\n-- data from the table. (This attribute does not appear for indexes that were\n-- created during a /CreateTable/ operation.)\n--\n-- /IndexName/ - The name of the global secondary index.\n--\n-- /IndexSizeBytes/ - The total size of the global secondary index, in bytes.\n-- DynamoDB updates this value approximately every six hours. Recent changes\n-- might not be reflected in this value.\n--\n-- /IndexStatus/ - The current status of the global secondary index:\n--\n-- /CREATING/ - The index is being created.\n--\n-- /UPDATING/ - The index is being updated.\n--\n-- /DELETING/ - The index is being deleted.\n--\n-- /ACTIVE/ - The index is ready for use.\n--\n-- /ItemCount/ - The number of items in the global secondary index. DynamoDB\n-- updates this value approximately every six hours. Recent changes might not be\n-- reflected in this value.\n--\n-- /KeySchema/ - Specifies the complete index key schema. The attribute names\n-- in the key schema must be between 1 and 255 characters (inclusive). The key\n-- schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /ProvisionedThroughput/ - The provisioned throughput settings for the\n-- global secondary index, consisting of read and write capacity units, along\n-- with data about increases and decreases.\n--\n-- If the table is in the 'DELETING' state, no information about indexes will\n-- be returned.",
                        "typeExposed": "[GlobalSecondaryIndexDescription]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndexDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdAttributeDefinitions",
                        "name": "_tdAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of /AttributeDefinition/ objects. Each of these objects describes one\n-- attribute in the table and index key schema.\n--\n-- Each /AttributeDefinition/ object in this array is composed of:\n--\n-- /AttributeName/ - The name of the attribute.\n--\n-- /AttributeType/ - The data type for the attribute.\n--\n--",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": "_Time",
                        "lensMapping": "_Time",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdCreationDateTime",
                        "name": "_tdCreationDateTime",
                        "shape": "Date",
                        "locationName": "CreationDateTime",
                        "documentation": "-- | The date and time when the table was created, in \u003chttp://www.epochconverter.com/ UNIX epoch time\u003e format.",
                        "typeExposed": "UTCTime",
                        "type": "POSIX"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdGlobalSecondaryIndexes",
                        "name": "_tdGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexDescriptionList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | The global secondary indexes, if any, on the table. Each index is scoped to a\n-- given hash key value. Each element is composed of:\n--\n-- /Backfilling/ - If true, then the index is currently in the backfilling\n-- phase. Backfilling occurs only when a new global secondary index is added to\n-- the table; it is the process by which DynamoDB populates the new index with\n-- data from the table. (This attribute does not appear for indexes that were\n-- created during a /CreateTable/ operation.)\n--\n-- /IndexName/ - The name of the global secondary index.\n--\n-- /IndexSizeBytes/ - The total size of the global secondary index, in bytes.\n-- DynamoDB updates this value approximately every six hours. Recent changes\n-- might not be reflected in this value.\n--\n-- /IndexStatus/ - The current status of the global secondary index:\n--\n-- /CREATING/ - The index is being created.\n--\n-- /UPDATING/ - The index is being updated.\n--\n-- /DELETING/ - The index is being deleted.\n--\n-- /ACTIVE/ - The index is ready for use.\n--\n-- /ItemCount/ - The number of items in the global secondary index. DynamoDB\n-- updates this value approximately every six hours. Recent changes might not be\n-- reflected in this value.\n--\n-- /KeySchema/ - Specifies the complete index key schema. The attribute names\n-- in the key schema must be between 1 and 255 characters (inclusive). The key\n-- schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /ProvisionedThroughput/ - The provisioned throughput settings for the\n-- global secondary index, consisting of read and write capacity units, along\n-- with data about increases and decreases.\n--\n-- If the table is in the 'DELETING' state, no information about indexes will\n-- be returned.",
                        "typeExposed": "[GlobalSecondaryIndexDescription]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdItemCount",
                        "name": "_tdItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified table. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Integer",
                        "type": "Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdKeySchema",
                        "name": "_tdKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The primary key structure for the table. Each /KeySchemaElement/ consists of:\n--\n-- /AttributeName/ - The name of the attribute.\n--\n-- /KeyType/ - The key type for the attribute. Can be either 'HASH' or 'RANGE'.\n--\n-- For more information about primary keys, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey Primary Key\u003e in the /AmazonDynamoDB Developer Guide/.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdLocalSecondaryIndexes",
                        "name": "_tdLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexDescriptionList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | Represents one or more local secondary indexes on the table. Each index is\n-- scoped to a given hash key value. Tables with one or more local secondary\n-- indexes are subject to an item collection size limit, where the amount of\n-- data within a given item collection cannot exceed 10 GB. Each element is\n-- composed of:\n--\n-- /IndexName/ - The name of the local secondary index.\n--\n-- /KeySchema/ - Specifies the complete index key schema. The attribute names\n-- in the key schema must be between 1 and 255 characters (inclusive). The key\n-- schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /IndexSizeBytes/ - Represents the total size of the index, in bytes.\n-- DynamoDB updates this value approximately every six hours. Recent changes\n-- might not be reflected in this value.\n--\n-- /ItemCount/ - Represents the number of items in the index. DynamoDB updates\n-- this value approximately every six hours. Recent changes might not be\n-- reflected in this value.\n--\n-- If the table is in the 'DELETING' state, no information about indexes will\n-- be returned.",
                        "typeExposed": "[LocalSecondaryIndexDescription]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndexDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdProvisionedThroughput",
                        "name": "_tdProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": "-- | The provisioned throughput settings for the table, consisting of read and\n-- write capacity units, along with data about increases and decreases.",
                        "typeExposed": "ProvisionedThroughputDescription",
                        "type": "ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableName",
                        "name": "_tdTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableSizeBytes",
                        "name": "_tdTableSizeBytes",
                        "shape": "Long",
                        "locationName": "TableSizeBytes",
                        "documentation": "-- | The total size of the specified table, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Integer",
                        "type": "Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "tdTableStatus",
                        "name": "_tdTableStatus",
                        "shape": "TableStatus",
                        "locationName": "TableStatus",
                        "documentation": "-- | The current state of the table:\n--\n-- /CREATING/ - The table is being created.\n--\n-- /UPDATING/ - The table is being updated.\n--\n-- /DELETING/ - The table is being deleted.\n--\n-- /ACTIVE/ - The table is ready for use.\n--\n--",
                        "typeExposed": "TableStatus",
                        "type": "TableStatus"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 28,
                "ctor": "keysAndAttributes",
                "contents": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaKeys",
                        "name": "_kaaKeys",
                        "shape": "KeyList",
                        "locationName": "Keys",
                        "documentation": "-- | The primary key attribute values that define the items and the attributes\n-- associated with the items.",
                        "typeExposed": "NonEmpty (HashMap Text AttributeValue)",
                        "type": "List1 \"Keys\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaAttributesToGet",
                        "name": "_kaaAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | One or more attributes to retrieve from the table or index. If no attribute\n-- names are specified then all attributes will be returned. If any of the\n-- specified attributes are not found, they will not appear in the result.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaConsistentRead",
                        "name": "_kaaConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | The consistency of a read operation. If set to 'true', then a strongly\n-- consistent read is used; otherwise, an eventually consistent read is used.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaProjectionExpression",
                        "name": "_kaaProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the /ProjectionExpression/ must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaExpressionAttributeNames",
                        "name": "_kaaExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaKeys",
                        "name": "_kaaKeys",
                        "shape": "KeyList",
                        "locationName": "Keys",
                        "documentation": "-- | The primary key attribute values that define the items and the attributes\n-- associated with the items.",
                        "typeExposed": "NonEmpty (HashMap Text AttributeValue)",
                        "type": "List1 \"Keys\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaAttributesToGet",
                        "name": "_kaaAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | One or more attributes to retrieve from the table or index. If no attribute\n-- names are specified then all attributes will be returned. If any of the\n-- specified attributes are not found, they will not appear in the result.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "contentPad": 25,
                "name": "KeysAndAttributes",
                "locationPad": 25,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaConsistentRead",
                        "name": "_kaaConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | The consistency of a read operation. If set to 'true', then a strongly\n-- consistent read is used; otherwise, an eventually consistent read is used.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaProjectionExpression",
                        "name": "_kaaProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the /ProjectionExpression/ must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaExpressionAttributeNames",
                        "name": "_kaaExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaAttributesToGet",
                        "name": "_kaaAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | One or more attributes to retrieve from the table or index. If no attribute\n-- names are specified then all attributes will be returned. If any of the\n-- specified attributes are not found, they will not appear in the result.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaConsistentRead",
                        "name": "_kaaConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | The consistency of a read operation. If set to 'true', then a strongly\n-- consistent read is used; otherwise, an eventually consistent read is used.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaExpressionAttributeNames",
                        "name": "_kaaExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kaaKeys",
                        "name": "_kaaKeys",
                        "shape": "KeyList",
                        "locationName": "Keys",
                        "documentation": "-- | The primary key attribute values that define the items and the attributes\n-- associated with the items.",
                        "typeExposed": "NonEmpty (HashMap Text AttributeValue)",
                        "type": "List1 \"Keys\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "kaaProjectionExpression",
                        "name": "_kaaProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the /ProjectionExpression/ must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "None": "NONE",
                    "Total": "TOTAL",
                    "Indexes": "INDEXES"
                },
                "valuePad": 8,
                "name": "ReturnConsumedCapacity",
                "type": "nullary",
                "branchPad": 7
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "RICMNone": "NONE",
                    "RICMSize": "SIZE"
                },
                "valuePad": 5,
                "name": "ReturnItemCollectionMetrics",
                "type": "nullary",
                "branchPad": 8
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 10,
                "ctor": "attributeValueUpdate",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avuValue",
                        "name": "_avuValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avuAction",
                        "name": "_avuAction",
                        "shape": "AttributeAction",
                        "locationName": "Action",
                        "documentation": "-- | Specifies how to perform the update. Valid values are 'PUT' (default), 'DELETE',\n-- and 'ADD'. The behavior depends on whether the specified primary key already\n-- exists in the table.\n--\n-- If an item with the specified /Key/ is found in the table:\n--\n-- 'PUT' - Adds the specified attribute to the item. If the attribute already\n-- exists, it is replaced by the new value.\n--\n-- 'DELETE' - If no value is specified, the attribute and its value are removed\n-- from the item. The data type of the specified value must match the existing\n-- value's data type.\n--\n-- If a /set/ of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the /DELETE/ action specified '[a,c]', then the final attribute value would be '[b]'.\n-- Specifying an empty set is an error.\n--\n-- 'ADD' - If the attribute does not already exist, then the attribute and its\n-- values are added to the item. If the attribute does exist, then the behavior\n-- of 'ADD' depends on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then\n-- the /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses 0 as the initial value.\n--\n-- In addition, if you use 'ADD' to update an existing item, and intend to\n-- increment or decrement an attribute value which does not yet exist, DynamoDB\n-- uses '0' as the initial value. For example, suppose that the item you want to\n-- update does not yet have an attribute named /itemcount/, but you decide to 'ADD'\n-- the number '3' to this attribute anyway, even though it currently does not\n-- exist. DynamoDB will create the /itemcount/ attribute, set its initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute in\n-- the item, with a value of '3'.\n--\n-- If the existing data type is a set, and if the /Value/ is also a set, then\n-- the /Value/ is added to the existing set. (This is a /set/ operation, not\n-- mathematical addition.) For example, if the attribute value was the set '[1,2]', and the\n-- 'ADD' action specified '[3]', then the final attribute value would be '[1,2,3]'. An\n-- error occurs if an Add action is specified for a set attribute and the\n-- attribute type specified does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, the /Value/ must also be a set of\n-- strings. The same holds true for number sets and binary sets.\n--\n-- This action is only valid for an existing attribute whose data type is\n-- number or is a set. Do not use 'ADD' for any other data types.\n--\n-- If no item with the specified /Key/ is found:\n--\n-- 'PUT' - DynamoDB creates a new item with the specified primary key, and then\n-- adds the attribute.\n--\n-- 'DELETE' - Nothing happens; there is no attribute to delete.\n--\n-- 'ADD' - DynamoDB creates an item with the supplied primary key and number\n-- (or set of numbers) for the attribute value. The only data types allowed are\n-- number and number set; no other data types can be specified.\n--\n--",
                        "typeExposed": "Maybe AttributeAction",
                        "type": "Maybe AttributeAction"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 7,
                "name": "AttributeValueUpdate",
                "locationPad": 7,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avuValue",
                        "name": "_avuValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avuAction",
                        "name": "_avuAction",
                        "shape": "AttributeAction",
                        "locationName": "Action",
                        "documentation": "-- | Specifies how to perform the update. Valid values are 'PUT' (default), 'DELETE',\n-- and 'ADD'. The behavior depends on whether the specified primary key already\n-- exists in the table.\n--\n-- If an item with the specified /Key/ is found in the table:\n--\n-- 'PUT' - Adds the specified attribute to the item. If the attribute already\n-- exists, it is replaced by the new value.\n--\n-- 'DELETE' - If no value is specified, the attribute and its value are removed\n-- from the item. The data type of the specified value must match the existing\n-- value's data type.\n--\n-- If a /set/ of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the /DELETE/ action specified '[a,c]', then the final attribute value would be '[b]'.\n-- Specifying an empty set is an error.\n--\n-- 'ADD' - If the attribute does not already exist, then the attribute and its\n-- values are added to the item. If the attribute does exist, then the behavior\n-- of 'ADD' depends on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then\n-- the /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses 0 as the initial value.\n--\n-- In addition, if you use 'ADD' to update an existing item, and intend to\n-- increment or decrement an attribute value which does not yet exist, DynamoDB\n-- uses '0' as the initial value. For example, suppose that the item you want to\n-- update does not yet have an attribute named /itemcount/, but you decide to 'ADD'\n-- the number '3' to this attribute anyway, even though it currently does not\n-- exist. DynamoDB will create the /itemcount/ attribute, set its initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute in\n-- the item, with a value of '3'.\n--\n-- If the existing data type is a set, and if the /Value/ is also a set, then\n-- the /Value/ is added to the existing set. (This is a /set/ operation, not\n-- mathematical addition.) For example, if the attribute value was the set '[1,2]', and the\n-- 'ADD' action specified '[3]', then the final attribute value would be '[1,2,3]'. An\n-- error occurs if an Add action is specified for a set attribute and the\n-- attribute type specified does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, the /Value/ must also be a set of\n-- strings. The same holds true for number sets and binary sets.\n--\n-- This action is only valid for an existing attribute whose data type is\n-- number or is a set. Do not use 'ADD' for any other data types.\n--\n-- If no item with the specified /Key/ is found:\n--\n-- 'PUT' - DynamoDB creates a new item with the specified primary key, and then\n-- adds the attribute.\n--\n-- 'DELETE' - Nothing happens; there is no attribute to delete.\n--\n-- 'ADD' - DynamoDB creates an item with the supplied primary key and number\n-- (or set of numbers) for the attribute value. The only data types allowed are\n-- number and number set; no other data types can be specified.\n--\n--",
                        "typeExposed": "Maybe AttributeAction",
                        "type": "Maybe AttributeAction"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avuAction",
                        "name": "_avuAction",
                        "shape": "AttributeAction",
                        "locationName": "Action",
                        "documentation": "-- | Specifies how to perform the update. Valid values are 'PUT' (default), 'DELETE',\n-- and 'ADD'. The behavior depends on whether the specified primary key already\n-- exists in the table.\n--\n-- If an item with the specified /Key/ is found in the table:\n--\n-- 'PUT' - Adds the specified attribute to the item. If the attribute already\n-- exists, it is replaced by the new value.\n--\n-- 'DELETE' - If no value is specified, the attribute and its value are removed\n-- from the item. The data type of the specified value must match the existing\n-- value's data type.\n--\n-- If a /set/ of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the /DELETE/ action specified '[a,c]', then the final attribute value would be '[b]'.\n-- Specifying an empty set is an error.\n--\n-- 'ADD' - If the attribute does not already exist, then the attribute and its\n-- values are added to the item. If the attribute does exist, then the behavior\n-- of 'ADD' depends on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then\n-- the /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses 0 as the initial value.\n--\n-- In addition, if you use 'ADD' to update an existing item, and intend to\n-- increment or decrement an attribute value which does not yet exist, DynamoDB\n-- uses '0' as the initial value. For example, suppose that the item you want to\n-- update does not yet have an attribute named /itemcount/, but you decide to 'ADD'\n-- the number '3' to this attribute anyway, even though it currently does not\n-- exist. DynamoDB will create the /itemcount/ attribute, set its initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute in\n-- the item, with a value of '3'.\n--\n-- If the existing data type is a set, and if the /Value/ is also a set, then\n-- the /Value/ is added to the existing set. (This is a /set/ operation, not\n-- mathematical addition.) For example, if the attribute value was the set '[1,2]', and the\n-- 'ADD' action specified '[3]', then the final attribute value would be '[1,2,3]'. An\n-- error occurs if an Add action is specified for a set attribute and the\n-- attribute type specified does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, the /Value/ must also be a set of\n-- strings. The same holds true for number sets and binary sets.\n--\n-- This action is only valid for an existing attribute whose data type is\n-- number or is a set. Do not use 'ADD' for any other data types.\n--\n-- If no item with the specified /Key/ is found:\n--\n-- 'PUT' - DynamoDB creates a new item with the specified primary key, and then\n-- adds the attribute.\n--\n-- 'DELETE' - Nothing happens; there is no attribute to delete.\n--\n-- 'ADD' - DynamoDB creates an item with the supplied primary key and number\n-- (or set of numbers) for the attribute value. The only data types allowed are\n-- number and number set; no other data types can be specified.\n--\n--",
                        "typeExposed": "Maybe AttributeAction",
                        "type": "Maybe AttributeAction"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "avuValue",
                        "name": "_avuValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 22,
                "ctor": "expectedAttributeValue",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavValue",
                        "name": "_eavValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavExists",
                        "name": "_eavExists",
                        "shape": "BooleanObject",
                        "locationName": "Exists",
                        "documentation": "-- | Causes DynamoDB to evaluate the value before attempting a conditional\n-- operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the operation succeeds. If\n-- it is not found, the operation fails with a /ConditionalCheckFailedException/.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does not\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the operation succeeds. If the value is found, despite the\n-- assumption that it does not exist, the operation fails with a /ConditionalCheckFailedException/.\n--\n-- The default setting for /Exists/ is 'true'. If you supply a /Value/ all by\n-- itself, DynamoDB assumes the attribute exists: You don't have to set /Exists/\n-- to 'true', because it is implied.\n--\n-- DynamoDB returns a /ValidationException/ if:\n--\n-- /Exists/ is 'true' but there is no /Value/ to check. (You expect a value to\n-- exist, but don't specify what that value is.)\n--\n-- /Exists/ is 'false' but you also provide a /Value/. (You cannot expect an\n-- attribute to have a value, while also expecting it not to exist.)\n--\n--",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavComparisonOperator",
                        "name": "_eavComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "-- | A comparator for evaluating attributes in the /AttributeValueList/. For\n-- example, equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n--",
                        "typeExposed": "Maybe ComparisonOperator",
                        "type": "Maybe ComparisonOperator"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "eavAttributeValueList",
                        "name": "_eavAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "-- | One or more values to evaluate against the supplied attribute. The number of\n-- values in the list depends on the /ComparisonOperator/ being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 19,
                "name": "ExpectedAttributeValue",
                "locationPad": 19,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavValue",
                        "name": "_eavValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavExists",
                        "name": "_eavExists",
                        "shape": "BooleanObject",
                        "locationName": "Exists",
                        "documentation": "-- | Causes DynamoDB to evaluate the value before attempting a conditional\n-- operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the operation succeeds. If\n-- it is not found, the operation fails with a /ConditionalCheckFailedException/.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does not\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the operation succeeds. If the value is found, despite the\n-- assumption that it does not exist, the operation fails with a /ConditionalCheckFailedException/.\n--\n-- The default setting for /Exists/ is 'true'. If you supply a /Value/ all by\n-- itself, DynamoDB assumes the attribute exists: You don't have to set /Exists/\n-- to 'true', because it is implied.\n--\n-- DynamoDB returns a /ValidationException/ if:\n--\n-- /Exists/ is 'true' but there is no /Value/ to check. (You expect a value to\n-- exist, but don't specify what that value is.)\n--\n-- /Exists/ is 'false' but you also provide a /Value/. (You cannot expect an\n-- attribute to have a value, while also expecting it not to exist.)\n--\n--",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavComparisonOperator",
                        "name": "_eavComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "-- | A comparator for evaluating attributes in the /AttributeValueList/. For\n-- example, equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n--",
                        "typeExposed": "Maybe ComparisonOperator",
                        "type": "Maybe ComparisonOperator"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "eavAttributeValueList",
                        "name": "_eavAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "-- | One or more values to evaluate against the supplied attribute. The number of\n-- values in the list depends on the /ComparisonOperator/ being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "eavAttributeValueList",
                        "name": "_eavAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "-- | One or more values to evaluate against the supplied attribute. The number of\n-- values in the list depends on the /ComparisonOperator/ being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavComparisonOperator",
                        "name": "_eavComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "-- | A comparator for evaluating attributes in the /AttributeValueList/. For\n-- example, equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n--",
                        "typeExposed": "Maybe ComparisonOperator",
                        "type": "Maybe ComparisonOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavExists",
                        "name": "_eavExists",
                        "shape": "BooleanObject",
                        "locationName": "Exists",
                        "documentation": "-- | Causes DynamoDB to evaluate the value before attempting a conditional\n-- operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the operation succeeds. If\n-- it is not found, the operation fails with a /ConditionalCheckFailedException/.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does not\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the operation succeeds. If the value is found, despite the\n-- assumption that it does not exist, the operation fails with a /ConditionalCheckFailedException/.\n--\n-- The default setting for /Exists/ is 'true'. If you supply a /Value/ all by\n-- itself, DynamoDB assumes the attribute exists: You don't have to set /Exists/\n-- to 'true', because it is implied.\n--\n-- DynamoDB returns a /ValidationException/ if:\n--\n-- /Exists/ is 'true' but there is no /Value/ to check. (You expect a value to\n-- exist, but don't specify what that value is.)\n--\n-- /Exists/ is 'false' but you also provide a /Value/. (You cannot expect an\n-- attribute to have a value, while also expecting it not to exist.)\n--\n--",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "eavValue",
                        "name": "_eavValue",
                        "shape": "AttributeValue",
                        "locationName": "Value",
                        "documentation": null,
                        "typeExposed": "Maybe AttributeValue",
                        "type": "Maybe AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 16,
                "ctor": "attributeDefinition",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeName",
                        "name": "_adAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "-- | A name for the attribute.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeType",
                        "name": "_adAttributeType",
                        "shape": "ScalarAttributeType",
                        "locationName": "AttributeType",
                        "documentation": "-- | The data type for the attribute.",
                        "typeExposed": "ScalarAttributeType",
                        "type": "ScalarAttributeType"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeName",
                        "name": "_adAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "-- | A name for the attribute.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeType",
                        "name": "_adAttributeType",
                        "shape": "ScalarAttributeType",
                        "locationName": "AttributeType",
                        "documentation": "-- | The data type for the attribute.",
                        "typeExposed": "ScalarAttributeType",
                        "type": "ScalarAttributeType"
                    }
                ],
                "contentPad": 14,
                "name": "AttributeDefinition",
                "locationPad": 14,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeName",
                        "name": "_adAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "-- | A name for the attribute.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "adAttributeType",
                        "name": "_adAttributeType",
                        "shape": "ScalarAttributeType",
                        "locationName": "AttributeType",
                        "documentation": "-- | The data type for the attribute.",
                        "typeExposed": "ScalarAttributeType",
                        "type": "ScalarAttributeType"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Eq": "EQ",
                    "Ge": "GE",
                    "In'": "IN",
                    "Gt": "GT",
                    "Null": "NULL",
                    "Ne": "NE",
                    "NotContains": "NOT_CONTAINS",
                    "Between": "BETWEEN",
                    "Lt": "LT",
                    "Contains": "CONTAINS",
                    "BeginsWith": "BEGINS_WITH",
                    "NotNull": "NOT_NULL",
                    "Le": "LE"
                },
                "valuePad": 13,
                "name": "ComparisonOperator",
                "type": "nullary",
                "branchPad": 11
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "RVAllOld": "ALL_OLD",
                    "RVUpdatedNew": "UPDATED_NEW",
                    "RVUpdatedOld": "UPDATED_OLD",
                    "RVNone": "NONE",
                    "RVAllNew": "ALL_NEW"
                },
                "valuePad": 12,
                "name": "ReturnValue",
                "type": "nullary",
                "branchPad": 12
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 14,
                "ctor": "localSecondaryIndex",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiIndexName",
                        "name": "_lsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the local secondary index. The name must be unique among all\n-- other indexes on this table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiKeySchema",
                        "name": "_lsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for the local secondary index, consisting of one or\n-- more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiProjection",
                        "name": "_lsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiIndexName",
                        "name": "_lsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the local secondary index. The name must be unique among all\n-- other indexes on this table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiKeySchema",
                        "name": "_lsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for the local secondary index, consisting of one or\n-- more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiProjection",
                        "name": "_lsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    }
                ],
                "contentPad": 11,
                "name": "LocalSecondaryIndex",
                "locationPad": 11,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiIndexName",
                        "name": "_lsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the local secondary index. The name must be unique among all\n-- other indexes on this table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiKeySchema",
                        "name": "_lsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for the local secondary index, consisting of one or\n-- more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsiProjection",
                        "name": "_lsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 26,
                "ctor": "globalSecondaryIndexDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexName",
                        "name": "_gsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsidKeySchema",
                        "name": "_gsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for the global secondary index, consisting of one or\n-- more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProjection",
                        "name": "_gsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexStatus",
                        "name": "_gsidIndexStatus",
                        "shape": "IndexStatus",
                        "locationName": "IndexStatus",
                        "documentation": "-- | The current state of the global secondary index:\n--\n-- /CREATING/ - The index is being created.\n--\n-- /UPDATING/ - The index is being updated.\n--\n-- /DELETING/ - The index is being deleted.\n--\n-- /ACTIVE/ - The index is ready for use.\n--\n--",
                        "typeExposed": "Maybe IndexStatus",
                        "type": "Maybe IndexStatus"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidBackfilling",
                        "name": "_gsidBackfilling",
                        "shape": "Backfilling",
                        "locationName": "Backfilling",
                        "documentation": "-- | Indicates whether the index is currently backfilling. /Backfilling/ is the\n-- process of reading items from the table and determining whether they can be\n-- added to the index. (Not all items will qualify: For example, a hash key\n-- attribute cannot have any duplicates.) If an item can be added to the index,\n-- DynamoDB will do so. After all items have been processed, the backfilling\n-- operation is complete and /Backfilling/ is false.\n--\n-- For indexes that were created during a /CreateTable/ operation, the /Backfilling/\n-- attribute does not appear in the /DescribeTable/ output.\n--",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProvisionedThroughput",
                        "name": "_gsidProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexSizeBytes",
                        "name": "_gsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "-- | The total size of the specified index, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidItemCount",
                        "name": "_gsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified index. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsidKeySchema",
                        "name": "_gsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for the global secondary index, consisting of one or\n-- more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    }
                ],
                "contentPad": 22,
                "name": "GlobalSecondaryIndexDescription",
                "locationPad": 22,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexName",
                        "name": "_gsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProjection",
                        "name": "_gsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexStatus",
                        "name": "_gsidIndexStatus",
                        "shape": "IndexStatus",
                        "locationName": "IndexStatus",
                        "documentation": "-- | The current state of the global secondary index:\n--\n-- /CREATING/ - The index is being created.\n--\n-- /UPDATING/ - The index is being updated.\n--\n-- /DELETING/ - The index is being deleted.\n--\n-- /ACTIVE/ - The index is ready for use.\n--\n--",
                        "typeExposed": "Maybe IndexStatus",
                        "type": "Maybe IndexStatus"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidBackfilling",
                        "name": "_gsidBackfilling",
                        "shape": "Backfilling",
                        "locationName": "Backfilling",
                        "documentation": "-- | Indicates whether the index is currently backfilling. /Backfilling/ is the\n-- process of reading items from the table and determining whether they can be\n-- added to the index. (Not all items will qualify: For example, a hash key\n-- attribute cannot have any duplicates.) If an item can be added to the index,\n-- DynamoDB will do so. After all items have been processed, the backfilling\n-- operation is complete and /Backfilling/ is false.\n--\n-- For indexes that were created during a /CreateTable/ operation, the /Backfilling/\n-- attribute does not appear in the /DescribeTable/ output.\n--",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProvisionedThroughput",
                        "name": "_gsidProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexSizeBytes",
                        "name": "_gsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "-- | The total size of the specified index, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidItemCount",
                        "name": "_gsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified index. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidBackfilling",
                        "name": "_gsidBackfilling",
                        "shape": "Backfilling",
                        "locationName": "Backfilling",
                        "documentation": "-- | Indicates whether the index is currently backfilling. /Backfilling/ is the\n-- process of reading items from the table and determining whether they can be\n-- added to the index. (Not all items will qualify: For example, a hash key\n-- attribute cannot have any duplicates.) If an item can be added to the index,\n-- DynamoDB will do so. After all items have been processed, the backfilling\n-- operation is complete and /Backfilling/ is false.\n--\n-- For indexes that were created during a /CreateTable/ operation, the /Backfilling/\n-- attribute does not appear in the /DescribeTable/ output.\n--",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexName",
                        "name": "_gsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexSizeBytes",
                        "name": "_gsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "-- | The total size of the specified index, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidIndexStatus",
                        "name": "_gsidIndexStatus",
                        "shape": "IndexStatus",
                        "locationName": "IndexStatus",
                        "documentation": "-- | The current state of the global secondary index:\n--\n-- /CREATING/ - The index is being created.\n--\n-- /UPDATING/ - The index is being updated.\n--\n-- /DELETING/ - The index is being deleted.\n--\n-- /ACTIVE/ - The index is ready for use.\n--\n--",
                        "typeExposed": "Maybe IndexStatus",
                        "type": "Maybe IndexStatus"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidItemCount",
                        "name": "_gsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified index. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsidKeySchema",
                        "name": "_gsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for the global secondary index, consisting of one or\n-- more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProjection",
                        "name": "_gsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsidProvisionedThroughput",
                        "name": "_gsidProvisionedThroughput",
                        "shape": "ProvisionedThroughputDescription",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughputDescription",
                        "type": "Maybe ProvisionedThroughputDescription"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 23,
                "ctor": "itemCollectionMetrics",
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "icmItemCollectionKey",
                        "name": "_icmItemCollectionKey",
                        "shape": "ItemCollectionKeyAttributeMap",
                        "locationName": "ItemCollectionKey",
                        "documentation": "-- | The hash key value of the item collection. This value is the same as the hash\n-- key of the item.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "icmSizeEstimateRangeGB",
                        "name": "_icmSizeEstimateRangeGB",
                        "shape": "ItemCollectionSizeEstimateRange",
                        "locationName": "SizeEstimateRangeGB",
                        "documentation": "-- | An estimate of item collection size, in gigabytes. This value is a\n-- two-element array containing a lower bound and an upper bound for the\n-- estimate. The estimate includes the size of all the items in the table, plus\n-- the size of all attributes projected into all of the local secondary indexes\n-- on that table. Use this estimate to measure whether a local secondary index\n-- is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.",
                        "typeExposed": "[Double]",
                        "type": "List \"SizeEstimateRangeGB\" Double"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 20,
                "name": "ItemCollectionMetrics",
                "locationPad": 20,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "icmItemCollectionKey",
                        "name": "_icmItemCollectionKey",
                        "shape": "ItemCollectionKeyAttributeMap",
                        "locationName": "ItemCollectionKey",
                        "documentation": "-- | The hash key value of the item collection. This value is the same as the hash\n-- key of the item.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "icmSizeEstimateRangeGB",
                        "name": "_icmSizeEstimateRangeGB",
                        "shape": "ItemCollectionSizeEstimateRange",
                        "locationName": "SizeEstimateRangeGB",
                        "documentation": "-- | An estimate of item collection size, in gigabytes. This value is a\n-- two-element array containing a lower bound and an upper bound for the\n-- estimate. The estimate includes the size of all the items in the table, plus\n-- the size of all attributes projected into all of the local secondary indexes\n-- on that table. Use this estimate to measure whether a local secondary index\n-- is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.",
                        "typeExposed": "[Double]",
                        "type": "List \"SizeEstimateRangeGB\" Double"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "icmItemCollectionKey",
                        "name": "_icmItemCollectionKey",
                        "shape": "ItemCollectionKeyAttributeMap",
                        "locationName": "ItemCollectionKey",
                        "documentation": "-- | The hash key value of the item collection. This value is the same as the hash\n-- key of the item.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "icmSizeEstimateRangeGB",
                        "name": "_icmSizeEstimateRangeGB",
                        "shape": "ItemCollectionSizeEstimateRange",
                        "locationName": "SizeEstimateRangeGB",
                        "documentation": "-- | An estimate of item collection size, in gigabytes. This value is a\n-- two-element array containing a lower bound and an upper bound for the\n-- estimate. The estimate includes the size of all the items in the table, plus\n-- the size of all attributes projected into all of the local secondary indexes\n-- on that table. Use this estimate to measure whether a local secondary index\n-- is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.",
                        "typeExposed": "[Double]",
                        "type": "List \"SizeEstimateRangeGB\" Double"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "capacity",
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": false,
                    "lens": "cCapacityUnits",
                    "name": "_cCapacityUnits",
                    "shape": "ConsumedCapacityUnits",
                    "locationName": "CapacityUnits",
                    "documentation": "-- | The total number of capacity units consumed on a table or an index.",
                    "typeExposed": "Maybe Double",
                    "type": "Maybe Double"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "cCapacityUnits",
                        "name": "_cCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "-- | The total number of capacity units consumed on a table or an index.",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 0,
                "name": "Capacity",
                "locationPad": 0,
                "type": "newtype",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "cCapacityUnits",
                        "name": "_cCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "-- | The total number of capacity units consumed on a table or an index.",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "cCapacityUnits",
                        "name": "_cCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "-- | The total number of capacity units consumed on a table or an index.",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 25,
                "ctor": "consumedCapacity",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTableName",
                        "name": "_ccTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table that was affected by the operation.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccCapacityUnits",
                        "name": "_ccCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "-- | The total number of capacity units consumed by the operation.",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTable",
                        "name": "_ccTable",
                        "shape": "Capacity",
                        "locationName": "Table",
                        "documentation": "-- | The amount of throughput consumed on the table affected by the operation.",
                        "typeExposed": "Maybe Capacity",
                        "type": "Maybe Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ccLocalSecondaryIndexes",
                        "name": "_ccLocalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | The amount of throughput consumed on each local index affected by the\n-- operation.",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ccGlobalSecondaryIndexes",
                        "name": "_ccGlobalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | The amount of throughput consumed on each global index affected by the\n-- operation.",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 23,
                "name": "ConsumedCapacity",
                "locationPad": 23,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTableName",
                        "name": "_ccTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table that was affected by the operation.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccCapacityUnits",
                        "name": "_ccCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "-- | The total number of capacity units consumed by the operation.",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTable",
                        "name": "_ccTable",
                        "shape": "Capacity",
                        "locationName": "Table",
                        "documentation": "-- | The amount of throughput consumed on the table affected by the operation.",
                        "typeExposed": "Maybe Capacity",
                        "type": "Maybe Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ccLocalSecondaryIndexes",
                        "name": "_ccLocalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | The amount of throughput consumed on each local index affected by the\n-- operation.",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ccGlobalSecondaryIndexes",
                        "name": "_ccGlobalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | The amount of throughput consumed on each global index affected by the\n-- operation.",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccCapacityUnits",
                        "name": "_ccCapacityUnits",
                        "shape": "ConsumedCapacityUnits",
                        "locationName": "CapacityUnits",
                        "documentation": "-- | The total number of capacity units consumed by the operation.",
                        "typeExposed": "Maybe Double",
                        "type": "Maybe Double"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ccGlobalSecondaryIndexes",
                        "name": "_ccGlobalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | The amount of throughput consumed on each global index affected by the\n-- operation.",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ccLocalSecondaryIndexes",
                        "name": "_ccLocalSecondaryIndexes",
                        "shape": "SecondaryIndexesCapacityMap",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | The amount of throughput consumed on each local index affected by the\n-- operation.",
                        "typeExposed": "HashMap Text Capacity",
                        "type": "Map Text Capacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTable",
                        "name": "_ccTable",
                        "shape": "Capacity",
                        "locationName": "Table",
                        "documentation": "-- | The amount of throughput consumed on the table affected by the operation.",
                        "typeExposed": "Maybe Capacity",
                        "type": "Maybe Capacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ccTableName",
                        "name": "_ccTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table that was affected by the operation.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 25,
                "ctor": "globalSecondaryIndex",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiIndexName",
                        "name": "_gsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index. The name must be unique among all\n-- other indexes on this table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiKeySchema",
                        "name": "_gsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for a global secondary index, which consists of one\n-- or more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProjection",
                        "name": "_gsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProvisionedThroughput",
                        "name": "_gsiProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiIndexName",
                        "name": "_gsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index. The name must be unique among all\n-- other indexes on this table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiKeySchema",
                        "name": "_gsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for a global secondary index, which consists of one\n-- or more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProjection",
                        "name": "_gsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProvisionedThroughput",
                        "name": "_gsiProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "contentPad": 22,
                "name": "GlobalSecondaryIndex",
                "locationPad": 22,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiIndexName",
                        "name": "_gsiIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index. The name must be unique among all\n-- other indexes on this table.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiKeySchema",
                        "name": "_gsiKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete key schema for a global secondary index, which consists of one\n-- or more pairs of attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProjection",
                        "name": "_gsiProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "gsiProvisionedThroughput",
                        "name": "_gsiProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 19,
                "ctor": "localSecondaryIndexDescription",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexName",
                        "name": "_lsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | Represents the name of the local secondary index.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsidKeySchema",
                        "name": "_lsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete index key schema, which consists of one or more pairs of\n-- attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidProjection",
                        "name": "_lsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexSizeBytes",
                        "name": "_lsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "-- | The total size of the specified index, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidItemCount",
                        "name": "_lsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified index. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsidKeySchema",
                        "name": "_lsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete index key schema, which consists of one or more pairs of\n-- attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    }
                ],
                "contentPad": 15,
                "name": "LocalSecondaryIndexDescription",
                "locationPad": 15,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexName",
                        "name": "_lsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | Represents the name of the local secondary index.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidProjection",
                        "name": "_lsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexSizeBytes",
                        "name": "_lsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "-- | The total size of the specified index, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidItemCount",
                        "name": "_lsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified index. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexName",
                        "name": "_lsidIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | Represents the name of the local secondary index.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidIndexSizeBytes",
                        "name": "_lsidIndexSizeBytes",
                        "shape": "Long",
                        "locationName": "IndexSizeBytes",
                        "documentation": "-- | The total size of the specified index, in bytes. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidItemCount",
                        "name": "_lsidItemCount",
                        "shape": "Long",
                        "locationName": "ItemCount",
                        "documentation": "-- | The number of items in the specified index. DynamoDB updates this value\n-- approximately every six hours. Recent changes might not be reflected in this\n-- value.",
                        "typeExposed": "Maybe Integer",
                        "type": "Maybe Integer"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "lsidKeySchema",
                        "name": "_lsidKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The complete index key schema, which consists of one or more pairs of\n-- attribute names and key types ('HASH' or 'RANGE').",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "lsidProjection",
                        "name": "_lsidProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Maybe Projection",
                        "type": "Maybe Projection"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Add": "ADD",
                    "Delete'": "DELETE",
                    "Put": "PUT"
                },
                "valuePad": 7,
                "name": "AttributeAction",
                "type": "nullary",
                "branchPad": 7
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "N": "N",
                    "B": "B",
                    "S": "S"
                },
                "valuePad": 2,
                "name": "ScalarAttributeType",
                "type": "nullary",
                "branchPad": 1
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 18,
                "ctor": "projection",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pProjectionType",
                        "name": "_pProjectionType",
                        "shape": "ProjectionType",
                        "locationName": "ProjectionType",
                        "documentation": "-- | The set of attributes that are projected into the index:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n--",
                        "typeExposed": "Maybe ProjectionType",
                        "type": "Maybe ProjectionType"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pNonKeyAttributes",
                        "name": "_pNonKeyAttributes",
                        "shape": "NonKeyAttributeNameList",
                        "locationName": "NonKeyAttributes",
                        "documentation": "-- | Represents the non-key attribute names which will be projected into the index.\n--\n-- For local secondary indexes, the total count of /NonKeyAttributes/ summed\n-- across all of the local secondary indexes, must not exceed 20. If you project\n-- the same attribute into two different indexes, this counts as two distinct\n-- attributes when determining the total.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"NonKeyAttributes\" Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pNonKeyAttributes",
                        "name": "_pNonKeyAttributes",
                        "shape": "NonKeyAttributeNameList",
                        "locationName": "NonKeyAttributes",
                        "documentation": "-- | Represents the non-key attribute names which will be projected into the index.\n--\n-- For local secondary indexes, the total count of /NonKeyAttributes/ summed\n-- across all of the local secondary indexes, must not exceed 20. If you project\n-- the same attribute into two different indexes, this counts as two distinct\n-- attributes when determining the total.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"NonKeyAttributes\" Text"
                    }
                ],
                "contentPad": 17,
                "name": "Projection",
                "locationPad": 17,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pProjectionType",
                        "name": "_pProjectionType",
                        "shape": "ProjectionType",
                        "locationName": "ProjectionType",
                        "documentation": "-- | The set of attributes that are projected into the index:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n--",
                        "typeExposed": "Maybe ProjectionType",
                        "type": "Maybe ProjectionType"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pNonKeyAttributes",
                        "name": "_pNonKeyAttributes",
                        "shape": "NonKeyAttributeNameList",
                        "locationName": "NonKeyAttributes",
                        "documentation": "-- | Represents the non-key attribute names which will be projected into the index.\n--\n-- For local secondary indexes, the total count of /NonKeyAttributes/ summed\n-- across all of the local secondary indexes, must not exceed 20. If you project\n-- the same attribute into two different indexes, this counts as two distinct\n-- attributes when determining the total.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"NonKeyAttributes\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pProjectionType",
                        "name": "_pProjectionType",
                        "shape": "ProjectionType",
                        "locationName": "ProjectionType",
                        "documentation": "-- | The set of attributes that are projected into the index:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n--",
                        "typeExposed": "Maybe ProjectionType",
                        "type": "Maybe ProjectionType"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 27,
                "ctor": "createGlobalSecondaryIndexAction",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaIndexName",
                        "name": "_cgsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be created.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaKeySchema",
                        "name": "_cgsiaKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The key schema for the global secondary index.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaProjection",
                        "name": "_cgsiaProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaProvisionedThroughput",
                        "name": "_cgsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaIndexName",
                        "name": "_cgsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be created.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaKeySchema",
                        "name": "_cgsiaKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The key schema for the global secondary index.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaProjection",
                        "name": "_cgsiaProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaProvisionedThroughput",
                        "name": "_cgsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "contentPad": 22,
                "name": "CreateGlobalSecondaryIndexAction",
                "locationPad": 22,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaIndexName",
                        "name": "_cgsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be created.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaKeySchema",
                        "name": "_cgsiaKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | The key schema for the global secondary index.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaProjection",
                        "name": "_cgsiaProjection",
                        "shape": "Projection",
                        "locationName": "Projection",
                        "documentation": null,
                        "typeExposed": "Projection",
                        "type": "Projection"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cgsiaProvisionedThroughput",
                        "name": "_cgsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "Count": "COUNT",
                    "AllAttributes": "ALL_ATTRIBUTES",
                    "SpecificAttributes": "SPECIFIC_ATTRIBUTES",
                    "AllProjectedAttributes": "ALL_PROJECTED_ATTRIBUTES"
                },
                "valuePad": 25,
                "name": "Select",
                "type": "nullary",
                "branchPad": 22
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 17,
                "ctor": "keySchemaElement",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kseAttributeName",
                        "name": "_kseAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "-- | The name of a key attribute.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kseKeyType",
                        "name": "_kseKeyType",
                        "shape": "KeyType",
                        "locationName": "KeyType",
                        "documentation": "-- | The attribute data, consisting of the data type and the attribute value\n-- itself.",
                        "typeExposed": "KeyType",
                        "type": "KeyType"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kseAttributeName",
                        "name": "_kseAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "-- | The name of a key attribute.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kseKeyType",
                        "name": "_kseKeyType",
                        "shape": "KeyType",
                        "locationName": "KeyType",
                        "documentation": "-- | The attribute data, consisting of the data type and the attribute value\n-- itself.",
                        "typeExposed": "KeyType",
                        "type": "KeyType"
                    }
                ],
                "contentPad": 14,
                "name": "KeySchemaElement",
                "locationPad": 14,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kseAttributeName",
                        "name": "_kseAttributeName",
                        "shape": "KeySchemaAttributeName",
                        "locationName": "AttributeName",
                        "documentation": "-- | The name of a key attribute.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "kseKeyType",
                        "name": "_kseKeyType",
                        "shape": "KeyType",
                        "locationName": "KeyType",
                        "documentation": "-- | The attribute data, consisting of the data type and the attribute value\n-- itself.",
                        "typeExposed": "KeyType",
                        "type": "KeyType"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Monoid",
                    "IsString"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "deleteGlobalSecondaryIndexAction",
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "error",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": true,
                    "lens": "dgsiaIndexName",
                    "name": "_dgsiaIndexName",
                    "shape": "IndexName",
                    "locationName": "IndexName",
                    "documentation": "-- | The name of the global secondary index to be deleted.",
                    "typeExposed": "Text",
                    "type": "Text"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dgsiaIndexName",
                        "name": "_dgsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be deleted.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dgsiaIndexName",
                        "name": "_dgsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be deleted.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "contentPad": 0,
                "name": "DeleteGlobalSecondaryIndexAction",
                "locationPad": 0,
                "type": "newtype",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dgsiaIndexName",
                        "name": "_dgsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be deleted.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show",
                    "Monoid",
                    "Semigroup"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "deleteRequest",
                "field": {
                    "location": null,
                    "iso": "_Map",
                    "lensMapping": "_Map",
                    "default": "mempty",
                    "monoid": true,
                    "protocol": "json",
                    "flattened": false,
                    "required": true,
                    "lens": "dKey",
                    "name": "_dKey",
                    "shape": "Key",
                    "locationName": "Key",
                    "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- the item to delete. All of the table's primary key attributes must be\n-- specified, and their data types must match those of the table's key schema.",
                    "typeExposed": "HashMap Text AttributeValue",
                    "type": "Map Text AttributeValue"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dKey",
                        "name": "_dKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- the item to delete. All of the table's primary key attributes must be\n-- specified, and their data types must match those of the table's key schema.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 0,
                "name": "DeleteRequest",
                "locationPad": 0,
                "type": "newtype",
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dKey",
                        "name": "_dKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- the item to delete. All of the table's primary key attributes must be\n-- specified, and their data types must match those of the table's key schema.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dKey",
                        "name": "_dKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- the item to delete. All of the table's primary key attributes must be\n-- specified, and their data types must match those of the table's key schema.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 27,
                "ctor": "updateGlobalSecondaryIndexAction",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaIndexName",
                        "name": "_ugsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be updated.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaProvisionedThroughput",
                        "name": "_ugsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaIndexName",
                        "name": "_ugsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be updated.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaProvisionedThroughput",
                        "name": "_ugsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "contentPad": 22,
                "name": "UpdateGlobalSecondaryIndexAction",
                "locationPad": 22,
                "type": "record",
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaIndexName",
                        "name": "_ugsiaIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of the global secondary index to be updated.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ugsiaProvisionedThroughput",
                        "name": "_ugsiaProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show",
                    "Monoid",
                    "Semigroup"
                ],
                "listElement": null,
                "fieldPad": 0,
                "ctor": "putRequest",
                "field": {
                    "location": null,
                    "iso": "_Map",
                    "lensMapping": "_Map",
                    "default": "mempty",
                    "monoid": true,
                    "protocol": "json",
                    "flattened": false,
                    "required": true,
                    "lens": "pItem",
                    "name": "_pItem",
                    "shape": "PutItemInputAttributeMap",
                    "locationName": "Item",
                    "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- an item to be processed by /PutItem/. All of the table's primary key attributes\n-- must be specified, and their data types must match those of the table's key\n-- schema. If any attributes are present in the item which are part of an index\n-- key schema for the table, their types must match the index key schema.",
                    "typeExposed": "HashMap Text AttributeValue",
                    "type": "Map Text AttributeValue"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pItem",
                        "name": "_pItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- an item to be processed by /PutItem/. All of the table's primary key attributes\n-- must be specified, and their data types must match those of the table's key\n-- schema. If any attributes are present in the item which are part of an index\n-- key schema for the table, their types must match the index key schema.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 0,
                "name": "PutRequest",
                "locationPad": 0,
                "type": "newtype",
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pItem",
                        "name": "_pItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- an item to be processed by /PutItem/. All of the table's primary key attributes\n-- must be specified, and their data types must match those of the table's key\n-- schema. If any attributes are present in the item which are part of an index\n-- key schema for the table, their types must match the index key schema.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pItem",
                        "name": "_pItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute name to attribute values, representing the primary key of\n-- an item to be processed by /PutItem/. All of the table's primary key attributes\n-- must be specified, and their data types must match those of the table's key\n-- schema. If any attributes are present in the item which are part of an index\n-- key schema for the table, their types must match the index key schema.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 20,
                "ctor": "condition",
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cAttributeValueList",
                        "name": "_cAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "-- | One or more values to evaluate against the supplied attribute. The number of\n-- values in the list depends on the /ComparisonOperator/ being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cComparisonOperator",
                        "name": "_cComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "-- | A comparator for evaluating attributes. For example, equals, greater than,\n-- less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "ComparisonOperator",
                        "type": "ComparisonOperator"
                    }
                ],
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cComparisonOperator",
                        "name": "_cComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "-- | A comparator for evaluating attributes. For example, equals, greater than,\n-- less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "ComparisonOperator",
                        "type": "ComparisonOperator"
                    }
                ],
                "contentPad": 19,
                "name": "Condition",
                "locationPad": 19,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cAttributeValueList",
                        "name": "_cAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "-- | One or more values to evaluate against the supplied attribute. The number of\n-- values in the list depends on the /ComparisonOperator/ being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cAttributeValueList",
                        "name": "_cAttributeValueList",
                        "shape": "AttributeValueList",
                        "locationName": "AttributeValueList",
                        "documentation": "-- | One or more values to evaluate against the supplied attribute. The number of\n-- values in the list depends on the /ComparisonOperator/ being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.",
                        "typeExposed": "[AttributeValue]",
                        "type": "List \"AttributeValueList\" AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "cComparisonOperator",
                        "name": "_cComparisonOperator",
                        "shape": "ComparisonOperator",
                        "locationName": "ComparisonOperator",
                        "documentation": "-- | A comparator for evaluating attributes. For example, equals, greater than,\n-- less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "ComparisonOperator",
                        "type": "ComparisonOperator"
                    }
                ]
            },
            {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Generic",
                    "Enum"
                ],
                "branches": {
                    "And": "AND",
                    "Or": "OR"
                },
                "valuePad": 4,
                "name": "ConditionalOperator",
                "type": "nullary",
                "branchPad": 3
            },
            {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "fieldPad": 11,
                "ctor": "globalSecondaryIndexUpdate",
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuUpdate",
                        "name": "_gsiuUpdate",
                        "shape": "UpdateGlobalSecondaryIndexAction",
                        "locationName": "Update",
                        "documentation": "-- | The name of an existing global secondary index, along with new provisioned\n-- throughput settings to be applied to that index.",
                        "typeExposed": "Maybe UpdateGlobalSecondaryIndexAction",
                        "type": "Maybe UpdateGlobalSecondaryIndexAction"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuCreate",
                        "name": "_gsiuCreate",
                        "shape": "CreateGlobalSecondaryIndexAction",
                        "locationName": "Create",
                        "documentation": "-- | The parameters required for creating a global secondary index on an existing\n-- table:\n--\n-- 'IndexName '\n--\n-- 'KeySchema '\n--\n-- 'AttributeDefinitions '\n--\n-- 'Projection '\n--\n-- 'ProvisionedThroughput '\n--\n--",
                        "typeExposed": "Maybe CreateGlobalSecondaryIndexAction",
                        "type": "Maybe CreateGlobalSecondaryIndexAction"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuDelete",
                        "name": "_gsiuDelete",
                        "shape": "DeleteGlobalSecondaryIndexAction",
                        "locationName": "Delete",
                        "documentation": "-- | The name of an existing global secondary index to be removed.",
                        "typeExposed": "Maybe DeleteGlobalSecondaryIndexAction",
                        "type": "Maybe DeleteGlobalSecondaryIndexAction"
                    }
                ],
                "payload": null,
                "required": [],
                "contentPad": 7,
                "name": "GlobalSecondaryIndexUpdate",
                "locationPad": 7,
                "type": "record",
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuUpdate",
                        "name": "_gsiuUpdate",
                        "shape": "UpdateGlobalSecondaryIndexAction",
                        "locationName": "Update",
                        "documentation": "-- | The name of an existing global secondary index, along with new provisioned\n-- throughput settings to be applied to that index.",
                        "typeExposed": "Maybe UpdateGlobalSecondaryIndexAction",
                        "type": "Maybe UpdateGlobalSecondaryIndexAction"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuCreate",
                        "name": "_gsiuCreate",
                        "shape": "CreateGlobalSecondaryIndexAction",
                        "locationName": "Create",
                        "documentation": "-- | The parameters required for creating a global secondary index on an existing\n-- table:\n--\n-- 'IndexName '\n--\n-- 'KeySchema '\n--\n-- 'AttributeDefinitions '\n--\n-- 'Projection '\n--\n-- 'ProvisionedThroughput '\n--\n--",
                        "typeExposed": "Maybe CreateGlobalSecondaryIndexAction",
                        "type": "Maybe CreateGlobalSecondaryIndexAction"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuDelete",
                        "name": "_gsiuDelete",
                        "shape": "DeleteGlobalSecondaryIndexAction",
                        "locationName": "Delete",
                        "documentation": "-- | The name of an existing global secondary index to be removed.",
                        "typeExposed": "Maybe DeleteGlobalSecondaryIndexAction",
                        "type": "Maybe DeleteGlobalSecondaryIndexAction"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuCreate",
                        "name": "_gsiuCreate",
                        "shape": "CreateGlobalSecondaryIndexAction",
                        "locationName": "Create",
                        "documentation": "-- | The parameters required for creating a global secondary index on an existing\n-- table:\n--\n-- 'IndexName '\n--\n-- 'KeySchema '\n--\n-- 'AttributeDefinitions '\n--\n-- 'Projection '\n--\n-- 'ProvisionedThroughput '\n--\n--",
                        "typeExposed": "Maybe CreateGlobalSecondaryIndexAction",
                        "type": "Maybe CreateGlobalSecondaryIndexAction"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuDelete",
                        "name": "_gsiuDelete",
                        "shape": "DeleteGlobalSecondaryIndexAction",
                        "locationName": "Delete",
                        "documentation": "-- | The name of an existing global secondary index to be removed.",
                        "typeExposed": "Maybe DeleteGlobalSecondaryIndexAction",
                        "type": "Maybe DeleteGlobalSecondaryIndexAction"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "gsiuUpdate",
                        "name": "_gsiuUpdate",
                        "shape": "UpdateGlobalSecondaryIndexAction",
                        "locationName": "Update",
                        "documentation": "-- | The name of an existing global secondary index, along with new provisioned\n-- throughput settings to be applied to that index.",
                        "typeExposed": "Maybe UpdateGlobalSecondaryIndexAction",
                        "type": "Maybe UpdateGlobalSecondaryIndexAction"
                    }
                ]
            }
        ],
        "imports": [],
        "shared": [
            "WriteRequest",
            "AttributeValue",
            "ProvisionedThroughput",
            "TableDescription",
            "KeysAndAttributes",
            "ReturnConsumedCapacity",
            "ReturnItemCollectionMetrics",
            "ExpectedAttributeValue",
            "AttributeDefinition",
            "ReturnValue",
            "ItemCollectionMetrics",
            "ConsumedCapacity",
            "Select",
            "Condition",
            "ConditionalOperator"
        ]
    },
    "operations": [
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 21,
                "ctor": "batchGetItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirResponses",
                        "name": "_bgirResponses",
                        "shape": "BatchGetResponseMap",
                        "locationName": "Responses",
                        "documentation": "-- | A map of table name to a list of items. Each object in /Responses/ consists of\n-- a table name, along with a map of attribute data consisting of the data type\n-- and attribute value.",
                        "typeExposed": "HashMap Text [HashMap Text AttributeValue]",
                        "type": "Map Text (List \"Responses\" (Map Text AttributeValue))"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirUnprocessedKeys",
                        "name": "_bgirUnprocessedKeys",
                        "shape": "BatchGetRequestMap",
                        "locationName": "UnprocessedKeys",
                        "documentation": "-- | A map of tables and their respective keys that were not processed with the\n-- current response. The /UnprocessedKeys/ value is in the same form as /RequestItems/, so the value can be provided directly to a subsequent /BatchGetItem/\n-- operation. For more information, see /RequestItems/ in the Request Parameters\n-- section.\n--\n-- Each element consists of:\n--\n-- /Keys/ - An array of primary key attribute values that define specific items\n-- in the table.\n--\n-- /AttributesToGet/ - One or more attributes to be retrieved from the table or\n-- index. By default, all attributes are returned. If a requested attribute is\n-- not found, it does not appear in the result.\n--\n-- /ConsistentRead/ - The consistency of a read operation. If set to 'true', then\n-- a strongly consistent read is used; otherwise, an eventually consistent read\n-- is used.\n--\n-- If there are no unprocessed keys remaining, the response contains an empty /UnprocessedKeys/ map.",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirConsumedCapacity",
                        "name": "_bgirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "-- | The read capacity units consumed by the operation.\n--\n-- Each element consists of:\n--\n-- /TableName/ - The table that consumed the provisioned throughput.\n--\n-- /CapacityUnits/ - The total number of capacity units consumed.\n--\n--",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "BatchGetItemResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirResponses",
                        "name": "_bgirResponses",
                        "shape": "BatchGetResponseMap",
                        "locationName": "Responses",
                        "documentation": "-- | A map of table name to a list of items. Each object in /Responses/ consists of\n-- a table name, along with a map of attribute data consisting of the data type\n-- and attribute value.",
                        "typeExposed": "HashMap Text [HashMap Text AttributeValue]",
                        "type": "Map Text (List \"Responses\" (Map Text AttributeValue))"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirUnprocessedKeys",
                        "name": "_bgirUnprocessedKeys",
                        "shape": "BatchGetRequestMap",
                        "locationName": "UnprocessedKeys",
                        "documentation": "-- | A map of tables and their respective keys that were not processed with the\n-- current response. The /UnprocessedKeys/ value is in the same form as /RequestItems/, so the value can be provided directly to a subsequent /BatchGetItem/\n-- operation. For more information, see /RequestItems/ in the Request Parameters\n-- section.\n--\n-- Each element consists of:\n--\n-- /Keys/ - An array of primary key attribute values that define specific items\n-- in the table.\n--\n-- /AttributesToGet/ - One or more attributes to be retrieved from the table or\n-- index. By default, all attributes are returned. If a requested attribute is\n-- not found, it does not appear in the result.\n--\n-- /ConsistentRead/ - The consistency of a read operation. If set to 'true', then\n-- a strongly consistent read is used; otherwise, an eventually consistent read\n-- is used.\n--\n-- If there are no unprocessed keys remaining, the response contains an empty /UnprocessedKeys/ map.",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirConsumedCapacity",
                        "name": "_bgirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "-- | The read capacity units consumed by the operation.\n--\n-- Each element consists of:\n--\n-- /TableName/ - The table that consumed the provisioned throughput.\n--\n-- /CapacityUnits/ - The total number of capacity units consumed.\n--\n--",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirConsumedCapacity",
                        "name": "_bgirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "-- | The read capacity units consumed by the operation.\n--\n-- Each element consists of:\n--\n-- /TableName/ - The table that consumed the provisioned throughput.\n--\n-- /CapacityUnits/ - The total number of capacity units consumed.\n--\n--",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirResponses",
                        "name": "_bgirResponses",
                        "shape": "BatchGetResponseMap",
                        "locationName": "Responses",
                        "documentation": "-- | A map of table name to a list of items. Each object in /Responses/ consists of\n-- a table name, along with a map of attribute data consisting of the data type\n-- and attribute value.",
                        "typeExposed": "HashMap Text [HashMap Text AttributeValue]",
                        "type": "Map Text (List \"Responses\" (Map Text AttributeValue))"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgirUnprocessedKeys",
                        "name": "_bgirUnprocessedKeys",
                        "shape": "BatchGetRequestMap",
                        "locationName": "UnprocessedKeys",
                        "documentation": "-- | A map of tables and their respective keys that were not processed with the\n-- current response. The /UnprocessedKeys/ value is in the same form as /RequestItems/, so the value can be provided directly to a subsequent /BatchGetItem/\n-- operation. For more information, see /RequestItems/ in the Request Parameters\n-- section.\n--\n-- Each element consists of:\n--\n-- /Keys/ - An array of primary key attribute values that define specific items\n-- in the table.\n--\n-- /AttributesToGet/ - One or more attributes to be retrieved from the table or\n-- index. By default, all attributes are returned. If a requested attribute is\n-- not found, it does not appear in the result.\n--\n-- /ConsistentRead/ - The consistency of a read operation. If set to 'true', then\n-- a strongly consistent read is used; otherwise, an eventually consistent read\n-- is used.\n--\n-- If there are no unprocessed keys remaining, the response contains an empty /UnprocessedKeys/ map.",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html",
            "namespace": "Network.AWS.DynamoDB.BatchGetItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "BatchGetItem",
            "method": "post",
            "documentation": "-- | The /BatchGetItem/ operation returns the attributes of one or more items from\n-- one or more tables. You identify requested items by primary key.\n--\n-- A single operation can retrieve up to 16 MB of data, which can contain as\n-- many as 100 items. /BatchGetItem/ will return a partial result if the response\n-- size limit is exceeded, the table's provisioned throughput is exceeded, or an\n-- internal processing failure occurs. If a partial result is returned, the\n-- operation returns a value for /UnprocessedKeys/. You can use this value to\n-- retry the operation starting with the next item to get.\n--\n-- For example, if you ask to retrieve 100 items, but each individual item is\n-- 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB\n-- limit). It also returns an appropriate /UnprocessedKeys/ value so you can get\n-- the next page of results. If desired, your application can include its own\n-- logic to assemble the pages of results into one data set.\n--\n-- If /none/ of the items can be processed due to insufficient provisioned\n-- throughput on all of the tables in the request, then /BatchGetItem/ will return\n-- a /ProvisionedThroughputExceededException/. If /at least one/ of the items is\n-- successfully processed, then /BatchGetItem/ completes successfully, while\n-- returning the keys of the unread items in /UnprocessedKeys/.\n--\n-- If DynamoDB returns any unprocessed items, you should retry the batch\n-- operation on those items. However, /we strongly recommend that you use anexponential backoff algorithm/. If you retry the batch operation immediately,\n-- the underlying read or write requests can still fail due to throttling on the\n-- individual tables. If you delay the batch operation using exponential\n-- backoff, the individual requests in the batch are much more likely to succeed.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations Batch Operations and Error Handling\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- By default, /BatchGetItem/ performs eventually consistent reads on every\n-- table in the request. If you want strongly consistent reads instead, you can\n-- set /ConsistentRead/ to 'true' for any or all tables.\n--\n-- In order to minimize response latency, /BatchGetItem/ retrieves items in\n-- parallel.\n--\n-- When designing your application, keep in mind that DynamoDB does not return\n-- attributes in any particular order. To help parse the response by item,\n-- include the primary key values for the items in your request in the /AttributesToGet/ parameter.\n--\n-- If a requested item does not exist, it is not returned in the result.\n-- Requests for nonexistent items consume the minimum read capacity units\n-- according to the type of read. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations Capacity UnitsCalculations\u003e in the /Amazon DynamoDB Developer Guide/.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "batchGetItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgiRequestItems",
                        "name": "_bgiRequestItems",
                        "shape": "BatchGetRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "-- | A map of one or more table names and, for each table, the corresponding\n-- primary keys for the items to retrieve. Each table name can be invoked only\n-- once.\n--\n-- Each element in the map consists of the following:\n--\n-- /Keys/ - An array of primary key attribute values that define specific items\n-- in the table. For each primary key, you must provide /all/ of the key\n-- attributes. For example, with a hash type primary key, you only need to\n-- provide the hash attribute. For a hash-and-range type primary key, you must\n-- provide /both/ the hash attribute and the range attribute.\n--\n-- /AttributesToGet/ - One or more attributes to be retrieved from the table.\n-- By default, all attributes are returned. If a specified attribute is not\n-- found, it does not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.\n--\n-- /ConsistentRead/ - If 'true', a strongly consistent read is used; if 'false'\n-- (the default), an eventually consistent read is used.\n--\n--",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bgiReturnConsumedCapacity",
                        "name": "_bgiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 23,
                "queryPad": 0,
                "name": "BatchGetItem",
                "query": [],
                "locationPad": 23,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgiRequestItems",
                        "name": "_bgiRequestItems",
                        "shape": "BatchGetRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "-- | A map of one or more table names and, for each table, the corresponding\n-- primary keys for the items to retrieve. Each table name can be invoked only\n-- once.\n--\n-- Each element in the map consists of the following:\n--\n-- /Keys/ - An array of primary key attribute values that define specific items\n-- in the table. For each primary key, you must provide /all/ of the key\n-- attributes. For example, with a hash type primary key, you only need to\n-- provide the hash attribute. For a hash-and-range type primary key, you must\n-- provide /both/ the hash attribute and the range attribute.\n--\n-- /AttributesToGet/ - One or more attributes to be retrieved from the table.\n-- By default, all attributes are returned. If a specified attribute is not\n-- found, it does not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.\n--\n-- /ConsistentRead/ - If 'true', a strongly consistent read is used; if 'false'\n-- (the default), an eventually consistent read is used.\n--\n--",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bgiReturnConsumedCapacity",
                        "name": "_bgiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bgiRequestItems",
                        "name": "_bgiRequestItems",
                        "shape": "BatchGetRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "-- | A map of one or more table names and, for each table, the corresponding\n-- primary keys for the items to retrieve. Each table name can be invoked only\n-- once.\n--\n-- Each element in the map consists of the following:\n--\n-- /Keys/ - An array of primary key attribute values that define specific items\n-- in the table. For each primary key, you must provide /all/ of the key\n-- attributes. For example, with a hash type primary key, you only need to\n-- provide the hash attribute. For a hash-and-range type primary key, you must\n-- provide /both/ the hash attribute and the range attribute.\n--\n-- /AttributesToGet/ - One or more attributes to be retrieved from the table.\n-- By default, all attributes are returned. If a specified attribute is not\n-- found, it does not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.\n--\n-- /ConsistentRead/ - If 'true', a strongly consistent read is used; if 'false'\n-- (the default), an eventually consistent read is used.\n--\n--",
                        "typeExposed": "HashMap Text KeysAndAttributes",
                        "type": "Map Text KeysAndAttributes"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bgiReturnConsumedCapacity",
                        "name": "_bgiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "batchWriteItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirUnprocessedItems",
                        "name": "_bwirUnprocessedItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "UnprocessedItems",
                        "documentation": "-- | A map of tables and requests against those tables that were not processed.\n-- The /UnprocessedItems/ value is in the same form as /RequestItems/, so you can\n-- provide this value directly to a subsequent /BatchGetItem/ operation. For more\n-- information, see /RequestItems/ in the Request Parameters section.\n--\n-- Each /UnprocessedItems/ entry consists of a table name and, for that table, a\n-- list of operations to perform (/DeleteRequest/ or /PutRequest/).\n--\n-- /DeleteRequest/ - Perform a /DeleteItem/ operation on the specified item. The\n-- item to be deleted is identified by a /Key/ subelement:\n--\n-- /Key/ - A map of primary key attribute values that uniquely identify the\n-- item. Each entry in this map consists of an attribute name and an attribute\n-- value.\n--\n-- /PutRequest/ - Perform a /PutItem/ operation on the specified item. The item\n-- to be put is identified by an /Item/ subelement:\n--\n-- /Item/ - A map of attributes and their values. Each entry in this map\n-- consists of an attribute name and an attribute value. Attribute values must\n-- not be null; string and binary type attributes must have lengths greater than\n-- zero; and set type attributes must not be empty. Requests that contain empty\n-- values will be rejected with a /ValidationException/ exception.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n-- If there are no unprocessed items remaining, the response contains an\n-- empty /UnprocessedItems/ map.",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"UnprocessedItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirItemCollectionMetrics",
                        "name": "_bwirItemCollectionMetrics",
                        "shape": "ItemCollectionMetricsPerTable",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | A list of tables that were processed by /BatchWriteItem/ and, for each table,\n-- information about any item collections that were affected by individual /DeleteItem/ or /PutItem/ operations.\n--\n-- Each entry consists of the following subelements:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, expressed in GB.\n-- This is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on the table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "HashMap Text [ItemCollectionMetrics]",
                        "type": "Map Text (List \"ItemCollectionMetrics\" ItemCollectionMetrics)"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirConsumedCapacity",
                        "name": "_bwirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "-- | The capacity units consumed by the operation.\n--\n-- Each element consists of:\n--\n-- /TableName/ - The table that consumed the provisioned throughput.\n--\n-- /CapacityUnits/ - The total number of capacity units consumed.\n--\n--",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "BatchWriteItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirUnprocessedItems",
                        "name": "_bwirUnprocessedItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "UnprocessedItems",
                        "documentation": "-- | A map of tables and requests against those tables that were not processed.\n-- The /UnprocessedItems/ value is in the same form as /RequestItems/, so you can\n-- provide this value directly to a subsequent /BatchGetItem/ operation. For more\n-- information, see /RequestItems/ in the Request Parameters section.\n--\n-- Each /UnprocessedItems/ entry consists of a table name and, for that table, a\n-- list of operations to perform (/DeleteRequest/ or /PutRequest/).\n--\n-- /DeleteRequest/ - Perform a /DeleteItem/ operation on the specified item. The\n-- item to be deleted is identified by a /Key/ subelement:\n--\n-- /Key/ - A map of primary key attribute values that uniquely identify the\n-- item. Each entry in this map consists of an attribute name and an attribute\n-- value.\n--\n-- /PutRequest/ - Perform a /PutItem/ operation on the specified item. The item\n-- to be put is identified by an /Item/ subelement:\n--\n-- /Item/ - A map of attributes and their values. Each entry in this map\n-- consists of an attribute name and an attribute value. Attribute values must\n-- not be null; string and binary type attributes must have lengths greater than\n-- zero; and set type attributes must not be empty. Requests that contain empty\n-- values will be rejected with a /ValidationException/ exception.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n-- If there are no unprocessed items remaining, the response contains an\n-- empty /UnprocessedItems/ map.",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"UnprocessedItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirItemCollectionMetrics",
                        "name": "_bwirItemCollectionMetrics",
                        "shape": "ItemCollectionMetricsPerTable",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | A list of tables that were processed by /BatchWriteItem/ and, for each table,\n-- information about any item collections that were affected by individual /DeleteItem/ or /PutItem/ operations.\n--\n-- Each entry consists of the following subelements:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, expressed in GB.\n-- This is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on the table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "HashMap Text [ItemCollectionMetrics]",
                        "type": "Map Text (List \"ItemCollectionMetrics\" ItemCollectionMetrics)"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirConsumedCapacity",
                        "name": "_bwirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "-- | The capacity units consumed by the operation.\n--\n-- Each element consists of:\n--\n-- /TableName/ - The table that consumed the provisioned throughput.\n--\n-- /CapacityUnits/ - The total number of capacity units consumed.\n--\n--",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirConsumedCapacity",
                        "name": "_bwirConsumedCapacity",
                        "shape": "ConsumedCapacityMultiple",
                        "locationName": "ConsumedCapacity",
                        "documentation": "-- | The capacity units consumed by the operation.\n--\n-- Each element consists of:\n--\n-- /TableName/ - The table that consumed the provisioned throughput.\n--\n-- /CapacityUnits/ - The total number of capacity units consumed.\n--\n--",
                        "typeExposed": "[ConsumedCapacity]",
                        "type": "List \"ConsumedCapacity\" ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirItemCollectionMetrics",
                        "name": "_bwirItemCollectionMetrics",
                        "shape": "ItemCollectionMetricsPerTable",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | A list of tables that were processed by /BatchWriteItem/ and, for each table,\n-- information about any item collections that were affected by individual /DeleteItem/ or /PutItem/ operations.\n--\n-- Each entry consists of the following subelements:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, expressed in GB.\n-- This is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on the table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "HashMap Text [ItemCollectionMetrics]",
                        "type": "Map Text (List \"ItemCollectionMetrics\" ItemCollectionMetrics)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwirUnprocessedItems",
                        "name": "_bwirUnprocessedItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "UnprocessedItems",
                        "documentation": "-- | A map of tables and requests against those tables that were not processed.\n-- The /UnprocessedItems/ value is in the same form as /RequestItems/, so you can\n-- provide this value directly to a subsequent /BatchGetItem/ operation. For more\n-- information, see /RequestItems/ in the Request Parameters section.\n--\n-- Each /UnprocessedItems/ entry consists of a table name and, for that table, a\n-- list of operations to perform (/DeleteRequest/ or /PutRequest/).\n--\n-- /DeleteRequest/ - Perform a /DeleteItem/ operation on the specified item. The\n-- item to be deleted is identified by a /Key/ subelement:\n--\n-- /Key/ - A map of primary key attribute values that uniquely identify the\n-- item. Each entry in this map consists of an attribute name and an attribute\n-- value.\n--\n-- /PutRequest/ - Perform a /PutItem/ operation on the specified item. The item\n-- to be put is identified by an /Item/ subelement:\n--\n-- /Item/ - A map of attributes and their values. Each entry in this map\n-- consists of an attribute name and an attribute value. Attribute values must\n-- not be null; string and binary type attributes must have lengths greater than\n-- zero; and set type attributes must not be empty. Requests that contain empty\n-- values will be rejected with a /ValidationException/ exception.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n-- If there are no unprocessed items remaining, the response contains an\n-- empty /UnprocessedItems/ map.",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"UnprocessedItems\" WriteRequest)"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html",
            "namespace": "Network.AWS.DynamoDB.BatchWriteItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "BatchWriteItem",
            "method": "post",
            "documentation": "-- | The /BatchWriteItem/ operation puts or deletes multiple items in one or more\n-- tables. A single call to /BatchWriteItem/ can write up to 16 MB of data, which\n-- can comprise as many as 25 put or delete requests. Individual items to be\n-- written can be as large as 400 KB.\n--\n-- /BatchWriteItem/ cannot update items. To update items, use the /UpdateItem/ API.\n--\n-- The individual /PutItem/ and /DeleteItem/ operations specified in /BatchWriteItem/\n-- are atomic; however /BatchWriteItem/ as a whole is not. If any requested\n-- operations fail because the table's provisioned throughput is exceeded or an\n-- internal processing failure occurs, the failed operations are returned in the /UnprocessedItems/ response parameter. You can investigate and optionally\n-- resend the requests. Typically, you would call /BatchWriteItem/ in a loop. Each\n-- iteration would check for unprocessed items and submit a new /BatchWriteItem/\n-- request with those unprocessed items until all items have been processed.\n--\n-- Note that if /none/ of the items can be processed due to insufficient\n-- provisioned throughput on all of the tables in the request, then /BatchWriteItem/ will return a /ProvisionedThroughputExceededException/.\n--\n-- If DynamoDB returns any unprocessed items, you should retry the batch\n-- operation on those items. However, /we strongly recommend that you use anexponential backoff algorithm/. If you retry the batch operation immediately,\n-- the underlying read or write requests can still fail due to throttling on the\n-- individual tables. If you delay the batch operation using exponential\n-- backoff, the individual requests in the batch are much more likely to succeed.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations Batch Operations and Error Handling\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- With /BatchWriteItem/, you can efficiently write or delete large amounts of\n-- data, such as from Amazon Elastic MapReduce (EMR), or copy data from another\n-- database into DynamoDB. In order to improve performance with these\n-- large-scale operations, /BatchWriteItem/ does not behave in the same way as\n-- individual /PutItem/ and /DeleteItem/ calls would. For example, you cannot\n-- specify conditions on individual put and delete requests, and /BatchWriteItem/\n-- does not return deleted items in the response.\n--\n-- If you use a programming language that supports concurrency, such as Java,\n-- you can use threads to write items in parallel. Your application must include\n-- the necessary logic to manage the threads. With languages that don't support\n-- threading, such as PHP, you must update provides an alternative where the API\n-- performs the specified put and delete operations in parallel, giving you the\n-- power of the thread pool approach without having to introduce complexity into\n-- your application.\n--\n-- Parallel processing reduces latency, but each specified put and delete\n-- request consumes the same number of write capacity units whether it is\n-- processed in parallel or not. Delete operations on nonexistent items consume\n-- one write capacity unit.\n--\n-- If one or more of the following is true, DynamoDB rejects the entire batch\n-- write operation:\n--\n-- One or more tables specified in the /BatchWriteItem/ request does not exist.\n--\n-- Primary key attributes specified on an item in the request do not match\n-- those in the corresponding table's primary key schema.\n--\n-- You try to perform multiple operations on the same item in the same /BatchWriteItem/ request. For example, you cannot put and delete the same item in the same /BatchWriteItem/ request.\n--\n-- There are more than 25 requests in the batch.\n--\n-- Any individual item in a batch exceeds 400 KB.\n--\n-- The total request size exceeds 16 MB.\n--\n--",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 31,
                "ctor": "batchWriteItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwiRequestItems",
                        "name": "_bwiRequestItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "-- | A map of one or more table names and, for each table, a list of operations to\n-- be performed (/DeleteRequest/ or /PutRequest/). Each element in the map consists\n-- of the following:\n--\n-- /DeleteRequest/ - Perform a /DeleteItem/ operation on the specified item. The\n-- item to be deleted is identified by a /Key/ subelement:\n--\n-- /Key/ - A map of primary key attribute values that uniquely identify the !\n-- item. Each entry in this map consists of an attribute name and an attribute\n-- value. For each primary key, you must provide /all/ of the key attributes. For\n-- example, with a hash type primary key, you only need to provide the hash\n-- attribute. For a hash-and-range type primary key, you must provide /both/ the\n-- hash attribute and the range attribute.\n--\n-- /PutRequest/ - Perform a /PutItem/ operation on the specified item. The item\n-- to be put is identified by an /Item/ subelement:\n--\n-- /Item/ - A map of attributes and their values. Each entry in this map\n-- consists of an attribute name and an attribute value. Attribute values must\n-- not be null; string and binary type attributes must have lengths greater than\n-- zero; and set type attributes must not be empty. Requests that contain empty\n-- values will be rejected with a /ValidationException/ exception.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n--",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnConsumedCapacity",
                        "name": "_bwiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnItemCollectionMetrics",
                        "name": "_bwiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "BatchWriteItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwiRequestItems",
                        "name": "_bwiRequestItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "-- | A map of one or more table names and, for each table, a list of operations to\n-- be performed (/DeleteRequest/ or /PutRequest/). Each element in the map consists\n-- of the following:\n--\n-- /DeleteRequest/ - Perform a /DeleteItem/ operation on the specified item. The\n-- item to be deleted is identified by a /Key/ subelement:\n--\n-- /Key/ - A map of primary key attribute values that uniquely identify the !\n-- item. Each entry in this map consists of an attribute name and an attribute\n-- value. For each primary key, you must provide /all/ of the key attributes. For\n-- example, with a hash type primary key, you only need to provide the hash\n-- attribute. For a hash-and-range type primary key, you must provide /both/ the\n-- hash attribute and the range attribute.\n--\n-- /PutRequest/ - Perform a /PutItem/ operation on the specified item. The item\n-- to be put is identified by an /Item/ subelement:\n--\n-- /Item/ - A map of attributes and their values. Each entry in this map\n-- consists of an attribute name and an attribute value. Attribute values must\n-- not be null; string and binary type attributes must have lengths greater than\n-- zero; and set type attributes must not be empty. Requests that contain empty\n-- values will be rejected with a /ValidationException/ exception.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n--",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnConsumedCapacity",
                        "name": "_bwiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnItemCollectionMetrics",
                        "name": "_bwiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "bwiRequestItems",
                        "name": "_bwiRequestItems",
                        "shape": "BatchWriteItemRequestMap",
                        "locationName": "RequestItems",
                        "documentation": "-- | A map of one or more table names and, for each table, a list of operations to\n-- be performed (/DeleteRequest/ or /PutRequest/). Each element in the map consists\n-- of the following:\n--\n-- /DeleteRequest/ - Perform a /DeleteItem/ operation on the specified item. The\n-- item to be deleted is identified by a /Key/ subelement:\n--\n-- /Key/ - A map of primary key attribute values that uniquely identify the !\n-- item. Each entry in this map consists of an attribute name and an attribute\n-- value. For each primary key, you must provide /all/ of the key attributes. For\n-- example, with a hash type primary key, you only need to provide the hash\n-- attribute. For a hash-and-range type primary key, you must provide /both/ the\n-- hash attribute and the range attribute.\n--\n-- /PutRequest/ - Perform a /PutItem/ operation on the specified item. The item\n-- to be put is identified by an /Item/ subelement:\n--\n-- /Item/ - A map of attributes and their values. Each entry in this map\n-- consists of an attribute name and an attribute value. Attribute values must\n-- not be null; string and binary type attributes must have lengths greater than\n-- zero; and set type attributes must not be empty. Requests that contain empty\n-- values will be rejected with a /ValidationException/ exception.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n--",
                        "typeExposed": "HashMap Text (NonEmpty WriteRequest)",
                        "type": "Map Text (List1 \"RequestItems\" WriteRequest)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnConsumedCapacity",
                        "name": "_bwiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "bwiReturnItemCollectionMetrics",
                        "name": "_bwiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "createTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": false,
                    "lens": "ctrTableDescription",
                    "name": "_ctrTableDescription",
                    "shape": "TableDescription",
                    "locationName": "TableDescription",
                    "documentation": null,
                    "typeExposed": "Maybe TableDescription",
                    "type": "Maybe TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ctrTableDescription",
                        "name": "_ctrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "CreateTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ctrTableDescription",
                        "name": "_ctrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ctrTableDescription",
                        "name": "_ctrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html",
            "namespace": "Network.AWS.DynamoDB.CreateTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "CreateTable",
            "method": "post",
            "documentation": "-- | The /CreateTable/ operation adds a new table to your account. In an AWS\n-- account, table names must be unique within each region. That is, you can have\n-- two tables with same name if you create the tables in different regions.\n--\n-- /CreateTable/ is an asynchronous operation. Upon receiving a /CreateTable/\n-- request, DynamoDB immediately returns a response with a /TableStatus/ of 'CREATING'. After the table is created, DynamoDB sets the /TableStatus/ to 'ACTIVE'. You\n-- can perform read and write operations only on an 'ACTIVE' table.\n--\n-- You can optionally define secondary indexes on the new table, as part of the /CreateTable/ operation. If you want to create multiple tables with secondary\n-- indexes on them, you must create the tables sequentially. Only one table with\n-- secondary indexes can be in the 'CREATING' state at any given time.\n--\n-- You can use the /DescribeTable/ API to check the table status.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "createTable",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctAttributeDefinitions",
                        "name": "_ctAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of attributes that describe the key schema for the table and indexes.",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctTableName",
                        "name": "_ctTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to create.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctKeySchema",
                        "name": "_ctKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | Specifies the attributes that make up the primary key for a table or an\n-- index. The attributes in /KeySchema/ must also be defined in the /AttributeDefinitions/ array. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html Data Model\u003e in the /Amazon DynamoDB DeveloperGuide/.\n--\n-- Each /KeySchemaElement/ in the array is composed of:\n--\n-- /AttributeName/ - The name of this key attribute.\n--\n-- /KeyType/ - Determines whether the key attribute is 'HASH' or 'RANGE'.\n--\n-- For a primary key that consists of a hash attribute, you must provide\n-- exactly one element with a /KeyType/ of 'HASH'.\n--\n-- For a primary key that consists of hash and range attributes, you must\n-- provide exactly two elements, in this order: The first element must have a /KeyType/ of 'HASH', and the second element must have a /KeyType/ of 'RANGE'.\n--\n-- For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key Specifying the Primary Key\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctLocalSecondaryIndexes",
                        "name": "_ctLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | One or more local secondary indexes (the maximum is five) to be created on\n-- the table. Each index is scoped to a given hash key value. There is a 10 GB\n-- size limit per hash key; otherwise, the size of a local secondary index is\n-- unconstrained.\n--\n-- Each local secondary index in the array includes the following:\n--\n-- /IndexName/ - The name of the local secondary index. Must be unique only for\n-- this table.\n--\n--\n--\n-- /KeySchema/ - Specifies the key schema for the local secondary index. The\n-- key schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n--",
                        "typeExposed": "[LocalSecondaryIndex]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctGlobalSecondaryIndexes",
                        "name": "_ctGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | One or more global secondary indexes (the maximum is five) to be created on\n-- the table. Each global secondary index in the array includes the following:\n--\n-- /IndexName/ - The name of the global secondary index. Must be unique only\n-- for this table.\n--\n--\n--\n-- /KeySchema/ - Specifies the key schema for the global secondary index.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /ProvisionedThroughput/ - The provisioned throughput settings for the\n-- global secondary index, consisting of read and write capacity units.\n--\n--",
                        "typeExposed": "[GlobalSecondaryIndex]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctProvisionedThroughput",
                        "name": "_ctProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctTableName",
                        "name": "_ctTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to create.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctKeySchema",
                        "name": "_ctKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | Specifies the attributes that make up the primary key for a table or an\n-- index. The attributes in /KeySchema/ must also be defined in the /AttributeDefinitions/ array. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html Data Model\u003e in the /Amazon DynamoDB DeveloperGuide/.\n--\n-- Each /KeySchemaElement/ in the array is composed of:\n--\n-- /AttributeName/ - The name of this key attribute.\n--\n-- /KeyType/ - Determines whether the key attribute is 'HASH' or 'RANGE'.\n--\n-- For a primary key that consists of a hash attribute, you must provide\n-- exactly one element with a /KeyType/ of 'HASH'.\n--\n-- For a primary key that consists of hash and range attributes, you must\n-- provide exactly two elements, in this order: The first element must have a /KeyType/ of 'HASH', and the second element must have a /KeyType/ of 'RANGE'.\n--\n-- For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key Specifying the Primary Key\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctProvisionedThroughput",
                        "name": "_ctProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 23,
                "queryPad": 0,
                "name": "CreateTable",
                "query": [],
                "locationPad": 23,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctAttributeDefinitions",
                        "name": "_ctAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of attributes that describe the key schema for the table and indexes.",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctLocalSecondaryIndexes",
                        "name": "_ctLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | One or more local secondary indexes (the maximum is five) to be created on\n-- the table. Each index is scoped to a given hash key value. There is a 10 GB\n-- size limit per hash key; otherwise, the size of a local secondary index is\n-- unconstrained.\n--\n-- Each local secondary index in the array includes the following:\n--\n-- /IndexName/ - The name of the local secondary index. Must be unique only for\n-- this table.\n--\n--\n--\n-- /KeySchema/ - Specifies the key schema for the local secondary index. The\n-- key schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n--",
                        "typeExposed": "[LocalSecondaryIndex]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctGlobalSecondaryIndexes",
                        "name": "_ctGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | One or more global secondary indexes (the maximum is five) to be created on\n-- the table. Each global secondary index in the array includes the following:\n--\n-- /IndexName/ - The name of the global secondary index. Must be unique only\n-- for this table.\n--\n--\n--\n-- /KeySchema/ - Specifies the key schema for the global secondary index.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /ProvisionedThroughput/ - The provisioned throughput settings for the\n-- global secondary index, consisting of read and write capacity units.\n--\n--",
                        "typeExposed": "[GlobalSecondaryIndex]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndex"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctAttributeDefinitions",
                        "name": "_ctAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of attributes that describe the key schema for the table and indexes.",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctGlobalSecondaryIndexes",
                        "name": "_ctGlobalSecondaryIndexes",
                        "shape": "GlobalSecondaryIndexList",
                        "locationName": "GlobalSecondaryIndexes",
                        "documentation": "-- | One or more global secondary indexes (the maximum is five) to be created on\n-- the table. Each global secondary index in the array includes the following:\n--\n-- /IndexName/ - The name of the global secondary index. Must be unique only\n-- for this table.\n--\n--\n--\n-- /KeySchema/ - Specifies the key schema for the global secondary index.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n-- /ProvisionedThroughput/ - The provisioned throughput settings for the\n-- global secondary index, consisting of read and write capacity units.\n--\n--",
                        "typeExposed": "[GlobalSecondaryIndex]",
                        "type": "List \"GlobalSecondaryIndexes\" GlobalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctKeySchema",
                        "name": "_ctKeySchema",
                        "shape": "KeySchema",
                        "locationName": "KeySchema",
                        "documentation": "-- | Specifies the attributes that make up the primary key for a table or an\n-- index. The attributes in /KeySchema/ must also be defined in the /AttributeDefinitions/ array. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html Data Model\u003e in the /Amazon DynamoDB DeveloperGuide/.\n--\n-- Each /KeySchemaElement/ in the array is composed of:\n--\n-- /AttributeName/ - The name of this key attribute.\n--\n-- /KeyType/ - Determines whether the key attribute is 'HASH' or 'RANGE'.\n--\n-- For a primary key that consists of a hash attribute, you must provide\n-- exactly one element with a /KeyType/ of 'HASH'.\n--\n-- For a primary key that consists of hash and range attributes, you must\n-- provide exactly two elements, in this order: The first element must have a /KeyType/ of 'HASH', and the second element must have a /KeyType/ of 'RANGE'.\n--\n-- For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key Specifying the Primary Key\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "NonEmpty KeySchemaElement",
                        "type": "List1 \"KeySchema\" KeySchemaElement"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctLocalSecondaryIndexes",
                        "name": "_ctLocalSecondaryIndexes",
                        "shape": "LocalSecondaryIndexList",
                        "locationName": "LocalSecondaryIndexes",
                        "documentation": "-- | One or more local secondary indexes (the maximum is five) to be created on\n-- the table. Each index is scoped to a given hash key value. There is a 10 GB\n-- size limit per hash key; otherwise, the size of a local secondary index is\n-- unconstrained.\n--\n-- Each local secondary index in the array includes the following:\n--\n-- /IndexName/ - The name of the local secondary index. Must be unique only for\n-- this table.\n--\n--\n--\n-- /KeySchema/ - Specifies the key schema for the local secondary index. The\n-- key schema must begin with the same hash key attribute as the table.\n--\n-- /Projection/ - Specifies attributes that are copied (projected) from the\n-- table into the index. These are in addition to the primary key attributes and\n-- index key attributes, which are automatically projected. Each attribute\n-- specification is composed of:\n--\n-- /ProjectionType/ - One of the following:\n--\n-- 'KEYS_ONLY' - Only the index and primary keys are projected into the index.\n--\n-- 'INCLUDE' - Only the specified table attributes are projected into the\n-- index. The list of projected attributes are in /NonKeyAttributes/.\n--\n-- 'ALL' - All of the table attributes are projected into the index.\n--\n-- /NonKeyAttributes/ - A list of one or more non-key attribute names that\n-- are projected into the secondary index. The total count of attributes\n-- provided in /NonKeyAttributes/, summed across all of the secondary indexes,\n-- must not exceed 20. If you project the same attribute into two different\n-- indexes, this counts as two distinct attributes when determining the total.\n--\n--",
                        "typeExposed": "[LocalSecondaryIndex]",
                        "type": "List \"LocalSecondaryIndexes\" LocalSecondaryIndex"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctProvisionedThroughput",
                        "name": "_ctProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "ProvisionedThroughput",
                        "type": "ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ctTableName",
                        "name": "_ctTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to create.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "deleteItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dirAttributes",
                        "name": "_dirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the item as\n-- it appeared before the /DeleteItem/ operation. This map appears in the response\n-- only if /ReturnValues/ was specified as 'ALL_OLD' in the request.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dirConsumedCapacity",
                        "name": "_dirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dirItemCollectionMetrics",
                        "name": "_dirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | Information about item collections, if any, that were affected by the\n-- operation. /ItemCollectionMetrics/ is only returned if the request asked for\n-- it. If the table does not have any local secondary indexes, this information\n-- is not returned in the response.\n--\n-- Each /ItemCollectionMetrics/ element consists of:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, in gigabytes. This\n-- value is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on that table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "DeleteItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dirAttributes",
                        "name": "_dirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the item as\n-- it appeared before the /DeleteItem/ operation. This map appears in the response\n-- only if /ReturnValues/ was specified as 'ALL_OLD' in the request.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dirConsumedCapacity",
                        "name": "_dirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dirItemCollectionMetrics",
                        "name": "_dirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | Information about item collections, if any, that were affected by the\n-- operation. /ItemCollectionMetrics/ is only returned if the request asked for\n-- it. If the table does not have any local secondary indexes, this information\n-- is not returned in the response.\n--\n-- Each /ItemCollectionMetrics/ element consists of:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, in gigabytes. This\n-- value is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on that table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dirAttributes",
                        "name": "_dirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the item as\n-- it appeared before the /DeleteItem/ operation. This map appears in the response\n-- only if /ReturnValues/ was specified as 'ALL_OLD' in the request.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dirConsumedCapacity",
                        "name": "_dirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dirItemCollectionMetrics",
                        "name": "_dirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | Information about item collections, if any, that were affected by the\n-- operation. /ItemCollectionMetrics/ is only returned if the request asked for\n-- it. If the table does not have any local secondary indexes, this information\n-- is not returned in the response.\n--\n-- Each /ItemCollectionMetrics/ element consists of:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, in gigabytes. This\n-- value is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on that table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html",
            "namespace": "Network.AWS.DynamoDB.DeleteItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "DeleteItem",
            "method": "post",
            "documentation": "-- | Deletes a single item in a table by primary key. You can perform a\n-- conditional delete operation that deletes the item if it exists, or if it has\n-- an expected attribute value.\n--\n-- In addition to deleting an item, you can also return the item's attribute\n-- values in the same operation, using the /ReturnValues/ parameter.\n--\n-- Unless you specify conditions, the /DeleteItem/ is an idempotent operation;\n-- running it multiple times on the same item or attribute does /not/ result in an\n-- error response.\n--\n-- Conditional deletes are useful for deleting items only if specific\n-- conditions are met. If those conditions are met, DynamoDB performs the\n-- delete. Otherwise, the item is not deleted.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "deleteItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diTableName",
                        "name": "_diTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table from which to delete the item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diKey",
                        "name": "_diKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the primary\n-- key of the item to delete.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpected",
                        "name": "_diExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /Expected/ and / ConditionExpression / at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /DeleteItem/ operation.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionalOperator",
                        "name": "_diConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnValues",
                        "name": "_diReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- before they were deleted. For /DeleteItem/, the valid values are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - The content of the old item is returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnConsumedCapacity",
                        "name": "_diReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnItemCollectionMetrics",
                        "name": "_diReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionExpression",
                        "name": "_diConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional /DeleteItem/ to\n-- succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeNames",
                        "name": "_diExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeValues",
                        "name": "_diExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diTableName",
                        "name": "_diTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table from which to delete the item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "DeleteItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diKey",
                        "name": "_diKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the primary\n-- key of the item to delete.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpected",
                        "name": "_diExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /Expected/ and / ConditionExpression / at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /DeleteItem/ operation.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionalOperator",
                        "name": "_diConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnValues",
                        "name": "_diReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- before they were deleted. For /DeleteItem/, the valid values are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - The content of the old item is returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnConsumedCapacity",
                        "name": "_diReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnItemCollectionMetrics",
                        "name": "_diReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionExpression",
                        "name": "_diConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional /DeleteItem/ to\n-- succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeNames",
                        "name": "_diExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeValues",
                        "name": "_diExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionExpression",
                        "name": "_diConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional /DeleteItem/ to\n-- succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diConditionalOperator",
                        "name": "_diConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpected",
                        "name": "_diExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /Expected/ and / ConditionExpression / at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /DeleteItem/ operation.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeNames",
                        "name": "_diExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diExpressionAttributeValues",
                        "name": "_diExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diKey",
                        "name": "_diKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the primary\n-- key of the item to delete.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnConsumedCapacity",
                        "name": "_diReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnItemCollectionMetrics",
                        "name": "_diReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "diReturnValues",
                        "name": "_diReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- before they were deleted. For /DeleteItem/, the valid values are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - The content of the old item is returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "diTableName",
                        "name": "_diTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table from which to delete the item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "deleteTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": false,
                    "lens": "dtrTableDescription",
                    "name": "_dtrTableDescription",
                    "shape": "TableDescription",
                    "locationName": "TableDescription",
                    "documentation": null,
                    "typeExposed": "Maybe TableDescription",
                    "type": "Maybe TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTableDescription",
                        "name": "_dtrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "DeleteTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTableDescription",
                        "name": "_dtrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "dtrTableDescription",
                        "name": "_dtrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteTable.html",
            "namespace": "Network.AWS.DynamoDB.DeleteTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "DeleteTable",
            "method": "post",
            "documentation": "-- | The /DeleteTable/ operation deletes a table and all of its items. After a /DeleteTable/ request, the specified table is in the 'DELETING' state until DynamoDB\n-- completes the deletion. If the table is in the 'ACTIVE' state, you can delete\n-- it. If a table is in 'CREATING' or 'UPDATING' states, then DynamoDB returns a /ResourceInUseException/. If the specified table does not exist, DynamoDB returns a /ResourceNotFoundException/. If table is already in the 'DELETING' state, no error is returned.\n--\n-- DynamoDB might continue to accept data read and write operations, such as /GetItem/ and /PutItem/, on a table in the 'DELETING' state until the table deletion is\n-- complete.\n--\n-- When you delete a table, any indexes on that table are also deleted.\n--\n-- Use the /DescribeTable/ API to check the status of the table.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Monoid",
                    "IsString"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "deleteTable",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "error",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": true,
                    "lens": "dtTableName",
                    "name": "_dtTableName",
                    "shape": "TableName",
                    "locationName": "TableName",
                    "documentation": "-- | The name of the table to delete.",
                    "typeExposed": "Text",
                    "type": "Text"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dtTableName",
                        "name": "_dtTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to delete.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dtTableName",
                        "name": "_dtTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to delete.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "queryPad": 0,
                "name": "DeleteTable",
                "query": [],
                "locationPad": 0,
                "type": "newtype",
                "queryAll": false,
                "headerAll": false,
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dtTableName",
                        "name": "_dtTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to delete.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "describeTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "error",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": true,
                    "lens": "dtrTable",
                    "name": "_dtrTable",
                    "shape": "TableDescription",
                    "locationName": "Table",
                    "documentation": null,
                    "typeExposed": "TableDescription",
                    "type": "TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dtrTable",
                        "name": "_dtrTable",
                        "shape": "TableDescription",
                        "locationName": "Table",
                        "documentation": null,
                        "typeExposed": "TableDescription",
                        "type": "TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dtrTable",
                        "name": "_dtrTable",
                        "shape": "TableDescription",
                        "locationName": "Table",
                        "documentation": null,
                        "typeExposed": "TableDescription",
                        "type": "TableDescription"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "DescribeTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dtrTable",
                        "name": "_dtrTable",
                        "shape": "TableDescription",
                        "locationName": "Table",
                        "documentation": null,
                        "typeExposed": "TableDescription",
                        "type": "TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html",
            "namespace": "Network.AWS.DynamoDB.DescribeTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "DescribeTable",
            "method": "post",
            "documentation": "-- | Returns information about the table, including the current status of the\n-- table, when it was created, the primary key schema, and any indexes on the\n-- table.\n--\n-- If you issue a DescribeTable request immediately after a CreateTable\n-- request, DynamoDB might return a ResourceNotFoundException. This is because\n-- DescribeTable uses an eventually consistent query, and the metadata for your\n-- table might not be available at that moment. Wait for a few seconds, and then\n-- try the DescribeTable request again.\n--\n--",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show",
                    "Monoid",
                    "IsString"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "describeTable",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "error",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": true,
                    "lens": "dt1TableName",
                    "name": "_dt1TableName",
                    "shape": "TableName",
                    "locationName": "TableName",
                    "documentation": "-- | The name of the table to describe.",
                    "typeExposed": "Text",
                    "type": "Text"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dt1TableName",
                        "name": "_dt1TableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to describe.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dt1TableName",
                        "name": "_dt1TableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to describe.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "queryPad": 0,
                "name": "DescribeTable",
                "query": [],
                "locationPad": 0,
                "type": "newtype",
                "queryAll": false,
                "headerAll": false,
                "optional": [],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "dt1TableName",
                        "name": "_dt1TableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to describe.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 20,
                "ctor": "getItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "girItem",
                        "name": "_girItem",
                        "shape": "AttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, as specified by /AttributesToGet/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "girConsumedCapacity",
                        "name": "_girConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "GetItemResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "girItem",
                        "name": "_girItem",
                        "shape": "AttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, as specified by /AttributesToGet/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "girConsumedCapacity",
                        "name": "_girConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "girConsumedCapacity",
                        "name": "_girConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "girItem",
                        "name": "_girItem",
                        "shape": "AttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, as specified by /AttributesToGet/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html",
            "namespace": "Network.AWS.DynamoDB.GetItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "GetItem",
            "method": "post",
            "documentation": "-- | The /GetItem/ operation returns a set of attributes for the item with the given\n-- primary key. If there is no matching item, /GetItem/ does not return any data.\n--\n-- /GetItem/ provides an eventually consistent read by default. If your\n-- application requires a strongly consistent read, set /ConsistentRead/ to 'true'.\n-- Although a strongly consistent read might take more time than an eventually\n-- consistent read, it always returns the last updated value.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 27,
                "ctor": "getItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giTableName",
                        "name": "_giTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giKey",
                        "name": "_giKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the primary\n-- key of the item to retrieve.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giAttributesToGet",
                        "name": "_giAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giConsistentRead",
                        "name": "_giConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | A value that if set to 'true', then the operation uses strongly consistent\n-- reads; otherwise, eventually consistent reads are used.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giReturnConsumedCapacity",
                        "name": "_giReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giProjectionExpression",
                        "name": "_giProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the expression must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giExpressionAttributeNames",
                        "name": "_giExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giTableName",
                        "name": "_giTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giAttributesToGet",
                        "name": "_giAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 25,
                "queryPad": 0,
                "name": "GetItem",
                "query": [],
                "locationPad": 25,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giKey",
                        "name": "_giKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the primary\n-- key of the item to retrieve.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giConsistentRead",
                        "name": "_giConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | A value that if set to 'true', then the operation uses strongly consistent\n-- reads; otherwise, eventually consistent reads are used.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giReturnConsumedCapacity",
                        "name": "_giReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giProjectionExpression",
                        "name": "_giProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the expression must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giExpressionAttributeNames",
                        "name": "_giExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giAttributesToGet",
                        "name": "_giAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giConsistentRead",
                        "name": "_giConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | A value that if set to 'true', then the operation uses strongly consistent\n-- reads; otherwise, eventually consistent reads are used.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giExpressionAttributeNames",
                        "name": "_giExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giKey",
                        "name": "_giKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | A map of attribute names to /AttributeValue/ objects, representing the primary\n-- key of the item to retrieve.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giProjectionExpression",
                        "name": "_giProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the expression must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "giReturnConsumedCapacity",
                        "name": "_giReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "giTableName",
                        "name": "_giTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "listTablesResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ltrTableNames",
                        "name": "_ltrTableNames",
                        "shape": "TableNameList",
                        "locationName": "TableNames",
                        "documentation": "-- | The names of the tables associated with the current account at the current\n-- endpoint. The maximum size of this array is 100.\n--\n-- If /LastEvaluatedTableName/ also appears in the output, you can use this value\n-- as the /ExclusiveStartTableName/ parameter in a subsequent /ListTables/ request\n-- and obtain the next page of results.",
                        "typeExposed": "[Text]",
                        "type": "List \"TableNames\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltrLastEvaluatedTableName",
                        "name": "_ltrLastEvaluatedTableName",
                        "shape": "TableName",
                        "locationName": "LastEvaluatedTableName",
                        "documentation": "-- | The name of the last table in the current page of results. Use this value as\n-- the /ExclusiveStartTableName/ in a new request to obtain the next page of\n-- results, until all the table names are returned.\n--\n-- If you do not receive a /LastEvaluatedTableName/ value in the response, this\n-- means that there are no more table names to be retrieved.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 23,
                "name": "ListTablesResponse",
                "resultWrapper": null,
                "locationPad": 23,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ltrTableNames",
                        "name": "_ltrTableNames",
                        "shape": "TableNameList",
                        "locationName": "TableNames",
                        "documentation": "-- | The names of the tables associated with the current account at the current\n-- endpoint. The maximum size of this array is 100.\n--\n-- If /LastEvaluatedTableName/ also appears in the output, you can use this value\n-- as the /ExclusiveStartTableName/ parameter in a subsequent /ListTables/ request\n-- and obtain the next page of results.",
                        "typeExposed": "[Text]",
                        "type": "List \"TableNames\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltrLastEvaluatedTableName",
                        "name": "_ltrLastEvaluatedTableName",
                        "shape": "TableName",
                        "locationName": "LastEvaluatedTableName",
                        "documentation": "-- | The name of the last table in the current page of results. Use this value as\n-- the /ExclusiveStartTableName/ in a new request to obtain the next page of\n-- results, until all the table names are returned.\n--\n-- If you do not receive a /LastEvaluatedTableName/ value in the response, this\n-- means that there are no more table names to be retrieved.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltrLastEvaluatedTableName",
                        "name": "_ltrLastEvaluatedTableName",
                        "shape": "TableName",
                        "locationName": "LastEvaluatedTableName",
                        "documentation": "-- | The name of the last table in the current page of results. Use this value as\n-- the /ExclusiveStartTableName/ in a new request to obtain the next page of\n-- results, until all the table names are returned.\n--\n-- If you do not receive a /LastEvaluatedTableName/ value in the response, this\n-- means that there are no more table names to be retrieved.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "ltrTableNames",
                        "name": "_ltrTableNames",
                        "shape": "TableNameList",
                        "locationName": "TableNames",
                        "documentation": "-- | The names of the tables associated with the current account at the current\n-- endpoint. The maximum size of this array is 100.\n--\n-- If /LastEvaluatedTableName/ also appears in the output, you can use this value\n-- as the /ExclusiveStartTableName/ parameter in a subsequent /ListTables/ request\n-- and obtain the next page of results.",
                        "typeExposed": "[Text]",
                        "type": "List \"TableNames\" Text"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ListTables.html",
            "namespace": "Network.AWS.DynamoDB.ListTables",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": {
                "token": {
                    "input": "ltExclusiveStartTableName",
                    "outputRequired": false,
                    "output": "ltrLastEvaluatedTableName",
                    "inputRequired": false
                },
                "type": "next",
                "resultKey": "ltrTableNames"
            },
            "name": "ListTables",
            "method": "post",
            "documentation": "-- | Returns an array of table names associated with the current account and\n-- endpoint. The output from /ListTables/ is paginated, with each page returning a\n-- maximum of 100 table names.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Ord",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 26,
                "ctor": "listTables",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltExclusiveStartTableName",
                        "name": "_ltExclusiveStartTableName",
                        "shape": "TableName",
                        "locationName": "ExclusiveStartTableName",
                        "documentation": "-- | The first table name that this operation will evaluate. Use the value that\n-- was returned for /LastEvaluatedTableName/ in a previous operation, so that you\n-- can obtain the next page of results.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltLimit",
                        "name": "_ltLimit",
                        "shape": "ListTablesInputLimit",
                        "locationName": "Limit",
                        "documentation": "-- | A maximum number of table names to return. If this parameter is not\n-- specified, the limit is 100.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 24,
                "queryPad": 0,
                "name": "ListTables",
                "query": [],
                "locationPad": 24,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltExclusiveStartTableName",
                        "name": "_ltExclusiveStartTableName",
                        "shape": "TableName",
                        "locationName": "ExclusiveStartTableName",
                        "documentation": "-- | The first table name that this operation will evaluate. Use the value that\n-- was returned for /LastEvaluatedTableName/ in a previous operation, so that you\n-- can obtain the next page of results.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltLimit",
                        "name": "_ltLimit",
                        "shape": "ListTablesInputLimit",
                        "locationName": "Limit",
                        "documentation": "-- | A maximum number of table names to return. If this parameter is not\n-- specified, the limit is 100.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltExclusiveStartTableName",
                        "name": "_ltExclusiveStartTableName",
                        "shape": "TableName",
                        "locationName": "ExclusiveStartTableName",
                        "documentation": "-- | The first table name that this operation will evaluate. Use the value that\n-- was returned for /LastEvaluatedTableName/ in a previous operation, so that you\n-- can obtain the next page of results.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "ltLimit",
                        "name": "_ltLimit",
                        "shape": "ListTablesInputLimit",
                        "locationName": "Limit",
                        "documentation": "-- | A maximum number of table names to return. If this parameter is not\n-- specified, the limit is 100.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "putItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pirAttributes",
                        "name": "_pirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | The attribute values as they appeared before the /PutItem/ operation, but only\n-- if /ReturnValues/ is specified as 'ALL_OLD' in the request. Each element consists\n-- of an attribute name and an attribute value.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pirConsumedCapacity",
                        "name": "_pirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pirItemCollectionMetrics",
                        "name": "_pirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | Information about item collections, if any, that were affected by the\n-- operation. /ItemCollectionMetrics/ is only returned if the request asked for\n-- it. If the table does not have any local secondary indexes, this information\n-- is not returned in the response.\n--\n-- Each /ItemCollectionMetrics/ element consists of:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, in gigabytes. This\n-- value is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on that table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "PutItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pirAttributes",
                        "name": "_pirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | The attribute values as they appeared before the /PutItem/ operation, but only\n-- if /ReturnValues/ is specified as 'ALL_OLD' in the request. Each element consists\n-- of an attribute name and an attribute value.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pirConsumedCapacity",
                        "name": "_pirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pirItemCollectionMetrics",
                        "name": "_pirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | Information about item collections, if any, that were affected by the\n-- operation. /ItemCollectionMetrics/ is only returned if the request asked for\n-- it. If the table does not have any local secondary indexes, this information\n-- is not returned in the response.\n--\n-- Each /ItemCollectionMetrics/ element consists of:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, in gigabytes. This\n-- value is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on that table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "pirAttributes",
                        "name": "_pirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | The attribute values as they appeared before the /PutItem/ operation, but only\n-- if /ReturnValues/ is specified as 'ALL_OLD' in the request. Each element consists\n-- of an attribute name and an attribute value.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pirConsumedCapacity",
                        "name": "_pirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "pirItemCollectionMetrics",
                        "name": "_pirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": "-- | Information about item collections, if any, that were affected by the\n-- operation. /ItemCollectionMetrics/ is only returned if the request asked for\n-- it. If the table does not have any local secondary indexes, this information\n-- is not returned in the response.\n--\n-- Each /ItemCollectionMetrics/ element consists of:\n--\n-- /ItemCollectionKey/ - The hash key value of the item collection. This is the\n-- same as the hash key of the item.\n--\n-- /SizeEstimateRange/ - An estimate of item collection size, in gigabytes. This\n-- value is a two-element array containing a lower bound and an upper bound for\n-- the estimate. The estimate includes the size of all the items in the table,\n-- plus the size of all attributes projected into all of the local secondary\n-- indexes on that table. Use this estimate to measure whether a local secondary\n-- index is approaching its size limit.\n--\n-- The estimate is subject to change over time; therefore, do not rely on the\n-- precision or accuracy of the estimate.\n--\n--",
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html",
            "namespace": "Network.AWS.DynamoDB.PutItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "PutItem",
            "method": "post",
            "documentation": "-- | Creates a new item, or replaces an old item with a new item. If an item that\n-- has the same primary key as the new item already exists in the specified\n-- table, the new item completely replaces the existing item. You can perform a\n-- conditional put operation (add a new item if one with the specified primary\n-- key doesn't exist), or replace an existing item if it has certain attribute\n-- values.\n--\n-- In addition to putting an item, you can also return the item's attribute\n-- values in the same operation, using the /ReturnValues/ parameter.\n--\n-- When you add an item, the primary key attribute(s) are the only required\n-- attributes. Attribute values cannot be null. String and Binary type\n-- attributes must have lengths greater than zero. Set type attributes cannot be\n-- empty. Requests with empty values will be rejected with a /ValidationException/\n-- exception.\n--\n-- You can request that /PutItem/ return either a copy of the original item\n-- (before the update) or a copy of the updated item (after the update). For\n-- more information, see the /ReturnValues/ description below.\n--\n-- To prevent a new item from replacing an existing item, use a conditional\n-- put operation with /ComparisonOperator/ set to 'NULL' for the primary key\n-- attribute, or attributes.\n--\n-- For more information about using this API, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html Working with Items\u003e in the /Amazon DynamoDB Developer Guide/.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "putItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piTableName",
                        "name": "_piTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to contain the item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piItem",
                        "name": "_piItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute name/value pairs, one for each attribute. Only the primary\n-- key attributes are required; you can optionally provide other attribute\n-- name-value pairs for the item.\n--\n-- You must provide all of the attributes for the primary key. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n-- For more information about primary keys, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey Primary Key\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- Each element in the /Item/ map is an /AttributeValue/ object.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpected",
                        "name": "_piExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /Expected/ and / ConditionExpression / at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /PutItem/ operation.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnValues",
                        "name": "_piReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- before they were updated with the /PutItem/ request. For /PutItem/, the valid\n-- values are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - If /PutItem/ overwrote an attribute name-value pair, then the\n-- content of the old item is returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnConsumedCapacity",
                        "name": "_piReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnItemCollectionMetrics",
                        "name": "_piReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionalOperator",
                        "name": "_piConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionExpression",
                        "name": "_piConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional /PutItem/\n-- operation to succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeNames",
                        "name": "_piExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeValues",
                        "name": "_piExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piTableName",
                        "name": "_piTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to contain the item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "PutItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piItem",
                        "name": "_piItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute name/value pairs, one for each attribute. Only the primary\n-- key attributes are required; you can optionally provide other attribute\n-- name-value pairs for the item.\n--\n-- You must provide all of the attributes for the primary key. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n-- For more information about primary keys, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey Primary Key\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- Each element in the /Item/ map is an /AttributeValue/ object.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpected",
                        "name": "_piExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /Expected/ and / ConditionExpression / at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /PutItem/ operation.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnValues",
                        "name": "_piReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- before they were updated with the /PutItem/ request. For /PutItem/, the valid\n-- values are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - If /PutItem/ overwrote an attribute name-value pair, then the\n-- content of the old item is returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnConsumedCapacity",
                        "name": "_piReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnItemCollectionMetrics",
                        "name": "_piReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionalOperator",
                        "name": "_piConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionExpression",
                        "name": "_piConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional /PutItem/\n-- operation to succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeNames",
                        "name": "_piExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeValues",
                        "name": "_piExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionExpression",
                        "name": "_piConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional /PutItem/\n-- operation to succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piConditionalOperator",
                        "name": "_piConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpected",
                        "name": "_piExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /Expected/ and / ConditionExpression / at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /PutItem/ operation.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeNames",
                        "name": "_piExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piExpressionAttributeValues",
                        "name": "_piExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piItem",
                        "name": "_piItem",
                        "shape": "PutItemInputAttributeMap",
                        "locationName": "Item",
                        "documentation": "-- | A map of attribute name/value pairs, one for each attribute. Only the primary\n-- key attributes are required; you can optionally provide other attribute\n-- name-value pairs for the item.\n--\n-- You must provide all of the attributes for the primary key. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.\n--\n-- If you specify any attributes that are part of an index key, then the data\n-- types for those attributes must match those of the schema in the table's\n-- attribute definition.\n--\n-- For more information about primary keys, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModelPrimaryKey Primary Key\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- Each element in the /Item/ map is an /AttributeValue/ object.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnConsumedCapacity",
                        "name": "_piReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnItemCollectionMetrics",
                        "name": "_piReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "piReturnValues",
                        "name": "_piReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- before they were updated with the /PutItem/ request. For /PutItem/, the valid\n-- values are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - If /PutItem/ overwrote an attribute name-value pair, then the\n-- content of the old item is returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "piTableName",
                        "name": "_piTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to contain the item.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 19,
                "ctor": "queryResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qrItems",
                        "name": "_qrItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "-- | An array of item attributes that match the query criteria. Each element in\n-- this array consists of an attribute name and the value for that attribute.",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrCount",
                        "name": "_qrCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "-- | The number of items in the response.\n--\n-- If you used a /QueryFilter/ in the request, then /Count/ is the number of items\n-- returned after the filter was applied, and /ScannedCount/ is the number of\n-- matching items before\u003e the filter was applied.\n--\n-- If you did not use a filter in the request, then /Count/ and /ScannedCount/ are\n-- the same.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrScannedCount",
                        "name": "_qrScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "-- | The number of items evaluated, before any /QueryFilter/ is applied. A high /ScannedCount/ value with few, or no, /Count/ results indicates an inefficient /Query/\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count Count and ScannedCount\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- If you did not use a filter in the request, then /ScannedCount/ is the same as /Count/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qrLastEvaluatedKey",
                        "name": "_qrLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "-- | The primary key of the item where the operation stopped, inclusive of the\n-- previous result set. Use this value to start a new operation, excluding this\n-- value in the new request.\n--\n-- If /LastEvaluatedKey/ is empty, then the \"last page\" of results has been\n-- processed and there is no more data to be retrieved.\n--\n-- If /LastEvaluatedKey/ is not empty, it does not necessarily mean that there is\n-- more data in the result set. The only way to know when you have reached the\n-- end of the result set is when /LastEvaluatedKey/ is empty.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrConsumedCapacity",
                        "name": "_qrConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "QueryResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qrItems",
                        "name": "_qrItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "-- | An array of item attributes that match the query criteria. Each element in\n-- this array consists of an attribute name and the value for that attribute.",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrCount",
                        "name": "_qrCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "-- | The number of items in the response.\n--\n-- If you used a /QueryFilter/ in the request, then /Count/ is the number of items\n-- returned after the filter was applied, and /ScannedCount/ is the number of\n-- matching items before\u003e the filter was applied.\n--\n-- If you did not use a filter in the request, then /Count/ and /ScannedCount/ are\n-- the same.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrScannedCount",
                        "name": "_qrScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "-- | The number of items evaluated, before any /QueryFilter/ is applied. A high /ScannedCount/ value with few, or no, /Count/ results indicates an inefficient /Query/\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count Count and ScannedCount\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- If you did not use a filter in the request, then /ScannedCount/ is the same as /Count/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qrLastEvaluatedKey",
                        "name": "_qrLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "-- | The primary key of the item where the operation stopped, inclusive of the\n-- previous result set. Use this value to start a new operation, excluding this\n-- value in the new request.\n--\n-- If /LastEvaluatedKey/ is empty, then the \"last page\" of results has been\n-- processed and there is no more data to be retrieved.\n--\n-- If /LastEvaluatedKey/ is not empty, it does not necessarily mean that there is\n-- more data in the result set. The only way to know when you have reached the\n-- end of the result set is when /LastEvaluatedKey/ is empty.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrConsumedCapacity",
                        "name": "_qrConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrConsumedCapacity",
                        "name": "_qrConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrCount",
                        "name": "_qrCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "-- | The number of items in the response.\n--\n-- If you used a /QueryFilter/ in the request, then /Count/ is the number of items\n-- returned after the filter was applied, and /ScannedCount/ is the number of\n-- matching items before\u003e the filter was applied.\n--\n-- If you did not use a filter in the request, then /Count/ and /ScannedCount/ are\n-- the same.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qrItems",
                        "name": "_qrItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "-- | An array of item attributes that match the query criteria. Each element in\n-- this array consists of an attribute name and the value for that attribute.",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qrLastEvaluatedKey",
                        "name": "_qrLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "-- | The primary key of the item where the operation stopped, inclusive of the\n-- previous result set. Use this value to start a new operation, excluding this\n-- value in the new request.\n--\n-- If /LastEvaluatedKey/ is empty, then the \"last page\" of results has been\n-- processed and there is no more data to be retrieved.\n--\n-- If /LastEvaluatedKey/ is not empty, it does not necessarily mean that there is\n-- more data in the result set. The only way to know when you have reached the\n-- end of the result set is when /LastEvaluatedKey/ is empty.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qrScannedCount",
                        "name": "_qrScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "-- | The number of items evaluated, before any /QueryFilter/ is applied. A high /ScannedCount/ value with few, or no, /Count/ results indicates an inefficient /Query/\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count Count and ScannedCount\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- If you did not use a filter in the request, then /ScannedCount/ is the same as /Count/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html",
            "namespace": "Network.AWS.DynamoDB.Query",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": {
                "token": {
                    "input": "qExclusiveStartKey",
                    "outputRequired": true,
                    "output": "qrLastEvaluatedKey",
                    "inputRequired": true
                },
                "type": "next",
                "resultKey": "qrItems"
            },
            "name": "Query",
            "method": "post",
            "documentation": "-- | A /Query/ operation directly accesses items from a table using the table\n-- primary key, or from an index using the index key. You must provide a\n-- specific hash key value. You can narrow the scope of the query by using\n-- comparison operators on the range key value, or on the index key. You can use\n-- the /ScanIndexForward/ parameter to get results in forward or reverse order, by\n-- range key or by index key.\n--\n-- Queries that do not return results consume the minimum number of read\n-- capacity units for that type of read operation.\n--\n-- If the total number of items meeting the query criteria exceeds the result\n-- set size limit of 1 MB, the query stops and results are returned to the user\n-- with /LastEvaluatedKey/ to continue the query in a subsequent operation. Unlike\n-- a /Scan/ operation, a /Query/ operation never returns both an empty result set\n-- and a /LastEvaluatedKey/. The /LastEvaluatedKey/ is only provided if the results\n-- exceed 1 MB, or if you have used /Limit/.\n--\n-- You can query a table, a local secondary index, or a global secondary index.\n-- For a query on a table or on a local secondary index, you can set /ConsistentRead/ to true and obtain a strongly consistent result. Global secondary indexes\n-- support eventually consistent reads only, so do not specify /ConsistentRead/\n-- when querying a global secondary index.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 27,
                "ctor": "query",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qTableName",
                        "name": "_qTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested items.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qIndexName",
                        "name": "_qIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of an index to query. This index can be any local secondary index or\n-- global secondary index on the table.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qSelect",
                        "name": "_qSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "-- | The attributes to be returned in the result. You can retrieve all item\n-- attributes, specific item attributes, the count of matching items, or in the\n-- case of an index, some or all of the attributes projected into the index.\n--\n-- 'ALL_ATTRIBUTES' - Returns all of the item attributes from the specified\n-- table or index. If you query a local secondary index, then for each matching\n-- item in the index DynamoDB will fetch the entire item from the parent table.\n-- If the index is configured to project all item attributes, then all of the\n-- data can be obtained from the local secondary index, and no fetching is\n-- required.\n--\n-- 'ALL_PROJECTED_ATTRIBUTES' - Allowed only when querying an index. Retrieves\n-- all attributes that have been projected into the index. If the index is\n-- configured to project all attributes, this return value is equivalent to\n-- specifying 'ALL_ATTRIBUTES'.\n--\n-- 'COUNT' - Returns the number of matching items, rather than the matching\n-- items themselves.\n--\n-- 'SPECIFIC_ATTRIBUTES' - Returns only the attributes listed in /AttributesToGet/. This return value is equivalent to specifying /AttributesToGet/ without\n-- specifying any value for /Select/.\n--\n-- If you query a local secondary index and request only attributes that are\n-- projected into that index, the operation will read only the index and not the\n-- table. If any of the requested attributes are not projected into the local\n-- secondary index, DynamoDB will fetch each of these attributes from the parent\n-- table. This extra fetching incurs additional throughput cost and latency.\n--\n-- If you query a global secondary index, you can only request attributes that\n-- are projected into the index. Global secondary index queries cannot fetch\n-- attributes from the parent table.\n--\n-- If neither /Select/ nor /AttributesToGet/ are specified, DynamoDB defaults to 'ALL_ATTRIBUTES' when accessing a table, and 'ALL_PROJECTED_ATTRIBUTES' when accessing an\n-- index. You cannot use both /Select/ and /AttributesToGet/ together in a single\n-- request, unless the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is\n-- equivalent to specifying /AttributesToGet/ without any value for /Select/.)",
                        "typeExposed": "Maybe Select",
                        "type": "Maybe Select"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qAttributesToGet",
                        "name": "_qAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.\n--\n-- You cannot use both /AttributesToGet/ and /Select/ together in a /Query/ request, /unless/ the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is equivalent to\n-- specifying /AttributesToGet/ without any value for /Select/.)\n--\n-- If you query a local secondary index and request only attributes that are\n-- projected into that index, the operation will read only the index and not the\n-- table. If any of the requested attributes are not projected into the local\n-- secondary index, DynamoDB will fetch each of these attributes from the parent\n-- table. This extra fetching incurs additional throughput cost and latency.\n--\n-- If you query a global secondary index, you can only request attributes that\n-- are projected into the index. Global secondary index queries cannot fetch\n-- attributes from the parent table.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qLimit",
                        "name": "_qLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "-- | The maximum number of items to evaluate (not necessarily the number of\n-- matching items). If DynamoDB processes the number of items up to the limit\n-- while processing the results, it stops the operation and returns the matching\n-- values up to that point, and a key in /LastEvaluatedKey/ to apply in a\n-- subsequent operation, so that you can pick up where you left off. Also, if\n-- the processed data set size exceeds 1 MB before DynamoDB reaches this limit,\n-- it stops the operation and returns the matching values up to the limit, and a\n-- key in /LastEvaluatedKey/ to apply in a subsequent operation to continue the\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html Query and Scan\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qConsistentRead",
                        "name": "_qConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | A value that if set to 'true', then the operation uses strongly consistent\n-- reads; otherwise, eventually consistent reads are used.\n--\n-- Strongly consistent reads are not supported on global secondary indexes. If\n-- you query a global secondary index with /ConsistentRead/ set to 'true', you will\n-- receive an error message.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qKeyConditions",
                        "name": "_qKeyConditions",
                        "shape": "KeyConditions",
                        "locationName": "KeyConditions",
                        "documentation": "-- | The selection criteria for the query. For a query on a table, you can have\n-- conditions only on the table primary key attributes. You must provide the\n-- hash key attribute name and value as an 'EQ' condition. You can optionally\n-- provide a second condition, referring to the range key attribute.\n--\n-- If you do not provide a range key condition, all of the items that match the\n-- hash key will be retrieved. If a /FilterExpression/ or /QueryFilter/ is present,\n-- it will be applied after the items are retrieved.\n--\n-- For a query on an index, you can have conditions only on the index key\n-- attributes. You must provide the index hash attribute name and value as an EQ\n-- condition. You can optionally provide a second condition, referring to the\n-- index key range attribute.\n--\n-- Each /KeyConditions/ element consists of an attribute name to compare, along\n-- with the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes, for example,\n-- equals, greater than, less than, and so on.\n--\n-- For /KeyConditions/, only the following comparison operators are supported:\n--\n-- 'EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN'\n--\n-- The following are descriptions of these comparison operators.\n--\n-- 'EQ' : Equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one specified in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qQueryFilter",
                        "name": "_qQueryFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "QueryFilter",
                        "documentation": "-- | There is a newer parameter available. Use /FilterExpression/ instead. Note\n-- that if you use /QueryFilter/ and /FilterExpression/ at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A condition that evaluates the query results after the items are read and\n-- returns only the desired values.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- A /QueryFilter/ is applied after the items have already been read; the process\n-- of filtering does not consume any additional read capacity units.\n--\n-- If you provide more than one condition in the /QueryFilter/ map, then by\n-- default all of the conditions must evaluate to true. In other words, the\n-- conditions are ANDed together. (You can use the /ConditionalOperator/ parameter\n-- to OR the conditions instead. If you do this, then at least one of the\n-- conditions must evaluate to true, rather than all of them.)\n--\n-- Note that /QueryFilter/ does not allow key attributes. You cannot define a\n-- filter condition on a hash key or range key.\n--\n-- Each /QueryFilter/ element consists of an attribute name to compare, along\n-- with the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the operator specified\n-- in /ComparisonOperator/.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes. For example,\n-- equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- For complete descriptions of all comparison operators, see the \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html Condition\u003e\n-- data type.\n--\n--",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qConditionalOperator",
                        "name": "_qConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | A logical operator to apply to the conditions in a /QueryFilter/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qScanIndexForward",
                        "name": "_qScanIndexForward",
                        "shape": "BooleanObject",
                        "locationName": "ScanIndexForward",
                        "documentation": "-- | A value that specifies ascending (true) or descending (false) traversal of\n-- the index. DynamoDB returns results reflecting the requested order determined\n-- by the range key. If the data type is Number, the results are returned in\n-- numeric order. For type String, the results are returned in order of ASCII\n-- character code values. For type Binary, DynamoDB treats each byte of the\n-- binary data as unsigned when it compares binary values.\n--\n-- If /ScanIndexForward/ is not specified, the results are returned in ascending\n-- order.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExclusiveStartKey",
                        "name": "_qExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "-- | The primary key of the first item that this operation will evaluate. Use the\n-- value that was returned for /LastEvaluatedKey/ in the previous operation.\n--\n-- The data type for /ExclusiveStartKey/ must be String, Number or Binary. No set\n-- data types are allowed.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qReturnConsumedCapacity",
                        "name": "_qReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qProjectionExpression",
                        "name": "_qProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the expression must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qFilterExpression",
                        "name": "_qFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "-- | A string that contains conditions that DynamoDB applies after the /Query/\n-- operation, but before the data is returned to you. Items that do not satisfy\n-- the /FilterExpression/ criteria are not returned.\n--\n-- A /FilterExpression/ is applied after the items have already been read; the\n-- process of filtering does not consume any additional read capacity units.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults Filter Expressions\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeNames",
                        "name": "_qExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeValues",
                        "name": "_qExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qTableName",
                        "name": "_qTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested items.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qAttributesToGet",
                        "name": "_qAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.\n--\n-- You cannot use both /AttributesToGet/ and /Select/ together in a /Query/ request, /unless/ the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is equivalent to\n-- specifying /AttributesToGet/ without any value for /Select/.)\n--\n-- If you query a local secondary index and request only attributes that are\n-- projected into that index, the operation will read only the index and not the\n-- table. If any of the requested attributes are not projected into the local\n-- secondary index, DynamoDB will fetch each of these attributes from the parent\n-- table. This extra fetching incurs additional throughput cost and latency.\n--\n-- If you query a global secondary index, you can only request attributes that\n-- are projected into the index. Global secondary index queries cannot fetch\n-- attributes from the parent table.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 26,
                "queryPad": 0,
                "name": "Query",
                "query": [],
                "locationPad": 26,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qIndexName",
                        "name": "_qIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of an index to query. This index can be any local secondary index or\n-- global secondary index on the table.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qSelect",
                        "name": "_qSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "-- | The attributes to be returned in the result. You can retrieve all item\n-- attributes, specific item attributes, the count of matching items, or in the\n-- case of an index, some or all of the attributes projected into the index.\n--\n-- 'ALL_ATTRIBUTES' - Returns all of the item attributes from the specified\n-- table or index. If you query a local secondary index, then for each matching\n-- item in the index DynamoDB will fetch the entire item from the parent table.\n-- If the index is configured to project all item attributes, then all of the\n-- data can be obtained from the local secondary index, and no fetching is\n-- required.\n--\n-- 'ALL_PROJECTED_ATTRIBUTES' - Allowed only when querying an index. Retrieves\n-- all attributes that have been projected into the index. If the index is\n-- configured to project all attributes, this return value is equivalent to\n-- specifying 'ALL_ATTRIBUTES'.\n--\n-- 'COUNT' - Returns the number of matching items, rather than the matching\n-- items themselves.\n--\n-- 'SPECIFIC_ATTRIBUTES' - Returns only the attributes listed in /AttributesToGet/. This return value is equivalent to specifying /AttributesToGet/ without\n-- specifying any value for /Select/.\n--\n-- If you query a local secondary index and request only attributes that are\n-- projected into that index, the operation will read only the index and not the\n-- table. If any of the requested attributes are not projected into the local\n-- secondary index, DynamoDB will fetch each of these attributes from the parent\n-- table. This extra fetching incurs additional throughput cost and latency.\n--\n-- If you query a global secondary index, you can only request attributes that\n-- are projected into the index. Global secondary index queries cannot fetch\n-- attributes from the parent table.\n--\n-- If neither /Select/ nor /AttributesToGet/ are specified, DynamoDB defaults to 'ALL_ATTRIBUTES' when accessing a table, and 'ALL_PROJECTED_ATTRIBUTES' when accessing an\n-- index. You cannot use both /Select/ and /AttributesToGet/ together in a single\n-- request, unless the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is\n-- equivalent to specifying /AttributesToGet/ without any value for /Select/.)",
                        "typeExposed": "Maybe Select",
                        "type": "Maybe Select"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qLimit",
                        "name": "_qLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "-- | The maximum number of items to evaluate (not necessarily the number of\n-- matching items). If DynamoDB processes the number of items up to the limit\n-- while processing the results, it stops the operation and returns the matching\n-- values up to that point, and a key in /LastEvaluatedKey/ to apply in a\n-- subsequent operation, so that you can pick up where you left off. Also, if\n-- the processed data set size exceeds 1 MB before DynamoDB reaches this limit,\n-- it stops the operation and returns the matching values up to the limit, and a\n-- key in /LastEvaluatedKey/ to apply in a subsequent operation to continue the\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html Query and Scan\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qConsistentRead",
                        "name": "_qConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | A value that if set to 'true', then the operation uses strongly consistent\n-- reads; otherwise, eventually consistent reads are used.\n--\n-- Strongly consistent reads are not supported on global secondary indexes. If\n-- you query a global secondary index with /ConsistentRead/ set to 'true', you will\n-- receive an error message.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qKeyConditions",
                        "name": "_qKeyConditions",
                        "shape": "KeyConditions",
                        "locationName": "KeyConditions",
                        "documentation": "-- | The selection criteria for the query. For a query on a table, you can have\n-- conditions only on the table primary key attributes. You must provide the\n-- hash key attribute name and value as an 'EQ' condition. You can optionally\n-- provide a second condition, referring to the range key attribute.\n--\n-- If you do not provide a range key condition, all of the items that match the\n-- hash key will be retrieved. If a /FilterExpression/ or /QueryFilter/ is present,\n-- it will be applied after the items are retrieved.\n--\n-- For a query on an index, you can have conditions only on the index key\n-- attributes. You must provide the index hash attribute name and value as an EQ\n-- condition. You can optionally provide a second condition, referring to the\n-- index key range attribute.\n--\n-- Each /KeyConditions/ element consists of an attribute name to compare, along\n-- with the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes, for example,\n-- equals, greater than, less than, and so on.\n--\n-- For /KeyConditions/, only the following comparison operators are supported:\n--\n-- 'EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN'\n--\n-- The following are descriptions of these comparison operators.\n--\n-- 'EQ' : Equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one specified in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qQueryFilter",
                        "name": "_qQueryFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "QueryFilter",
                        "documentation": "-- | There is a newer parameter available. Use /FilterExpression/ instead. Note\n-- that if you use /QueryFilter/ and /FilterExpression/ at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A condition that evaluates the query results after the items are read and\n-- returns only the desired values.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- A /QueryFilter/ is applied after the items have already been read; the process\n-- of filtering does not consume any additional read capacity units.\n--\n-- If you provide more than one condition in the /QueryFilter/ map, then by\n-- default all of the conditions must evaluate to true. In other words, the\n-- conditions are ANDed together. (You can use the /ConditionalOperator/ parameter\n-- to OR the conditions instead. If you do this, then at least one of the\n-- conditions must evaluate to true, rather than all of them.)\n--\n-- Note that /QueryFilter/ does not allow key attributes. You cannot define a\n-- filter condition on a hash key or range key.\n--\n-- Each /QueryFilter/ element consists of an attribute name to compare, along\n-- with the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the operator specified\n-- in /ComparisonOperator/.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes. For example,\n-- equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- For complete descriptions of all comparison operators, see the \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html Condition\u003e\n-- data type.\n--\n--",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qConditionalOperator",
                        "name": "_qConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | A logical operator to apply to the conditions in a /QueryFilter/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qScanIndexForward",
                        "name": "_qScanIndexForward",
                        "shape": "BooleanObject",
                        "locationName": "ScanIndexForward",
                        "documentation": "-- | A value that specifies ascending (true) or descending (false) traversal of\n-- the index. DynamoDB returns results reflecting the requested order determined\n-- by the range key. If the data type is Number, the results are returned in\n-- numeric order. For type String, the results are returned in order of ASCII\n-- character code values. For type Binary, DynamoDB treats each byte of the\n-- binary data as unsigned when it compares binary values.\n--\n-- If /ScanIndexForward/ is not specified, the results are returned in ascending\n-- order.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExclusiveStartKey",
                        "name": "_qExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "-- | The primary key of the first item that this operation will evaluate. Use the\n-- value that was returned for /LastEvaluatedKey/ in the previous operation.\n--\n-- The data type for /ExclusiveStartKey/ must be String, Number or Binary. No set\n-- data types are allowed.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qReturnConsumedCapacity",
                        "name": "_qReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qProjectionExpression",
                        "name": "_qProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the expression must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qFilterExpression",
                        "name": "_qFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "-- | A string that contains conditions that DynamoDB applies after the /Query/\n-- operation, but before the data is returned to you. Items that do not satisfy\n-- the /FilterExpression/ criteria are not returned.\n--\n-- A /FilterExpression/ is applied after the items have already been read; the\n-- process of filtering does not consume any additional read capacity units.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults Filter Expressions\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeNames",
                        "name": "_qExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeValues",
                        "name": "_qExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qAttributesToGet",
                        "name": "_qAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.\n--\n-- You cannot use both /AttributesToGet/ and /Select/ together in a /Query/ request, /unless/ the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is equivalent to\n-- specifying /AttributesToGet/ without any value for /Select/.)\n--\n-- If you query a local secondary index and request only attributes that are\n-- projected into that index, the operation will read only the index and not the\n-- table. If any of the requested attributes are not projected into the local\n-- secondary index, DynamoDB will fetch each of these attributes from the parent\n-- table. This extra fetching incurs additional throughput cost and latency.\n--\n-- If you query a global secondary index, you can only request attributes that\n-- are projected into the index. Global secondary index queries cannot fetch\n-- attributes from the parent table.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qConditionalOperator",
                        "name": "_qConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | A logical operator to apply to the conditions in a /QueryFilter/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qConsistentRead",
                        "name": "_qConsistentRead",
                        "shape": "ConsistentRead",
                        "locationName": "ConsistentRead",
                        "documentation": "-- | A value that if set to 'true', then the operation uses strongly consistent\n-- reads; otherwise, eventually consistent reads are used.\n--\n-- Strongly consistent reads are not supported on global secondary indexes. If\n-- you query a global secondary index with /ConsistentRead/ set to 'true', you will\n-- receive an error message.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExclusiveStartKey",
                        "name": "_qExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "-- | The primary key of the first item that this operation will evaluate. Use the\n-- value that was returned for /LastEvaluatedKey/ in the previous operation.\n--\n-- The data type for /ExclusiveStartKey/ must be String, Number or Binary. No set\n-- data types are allowed.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeNames",
                        "name": "_qExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qExpressionAttributeValues",
                        "name": "_qExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qFilterExpression",
                        "name": "_qFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "-- | A string that contains conditions that DynamoDB applies after the /Query/\n-- operation, but before the data is returned to you. Items that do not satisfy\n-- the /FilterExpression/ criteria are not returned.\n--\n-- A /FilterExpression/ is applied after the items have already been read; the\n-- process of filtering does not consume any additional read capacity units.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults Filter Expressions\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qIndexName",
                        "name": "_qIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of an index to query. This index can be any local secondary index or\n-- global secondary index on the table.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qKeyConditions",
                        "name": "_qKeyConditions",
                        "shape": "KeyConditions",
                        "locationName": "KeyConditions",
                        "documentation": "-- | The selection criteria for the query. For a query on a table, you can have\n-- conditions only on the table primary key attributes. You must provide the\n-- hash key attribute name and value as an 'EQ' condition. You can optionally\n-- provide a second condition, referring to the range key attribute.\n--\n-- If you do not provide a range key condition, all of the items that match the\n-- hash key will be retrieved. If a /FilterExpression/ or /QueryFilter/ is present,\n-- it will be applied after the items are retrieved.\n--\n-- For a query on an index, you can have conditions only on the index key\n-- attributes. You must provide the index hash attribute name and value as an EQ\n-- condition. You can optionally provide a second condition, referring to the\n-- index key range attribute.\n--\n-- Each /KeyConditions/ element consists of an attribute name to compare, along\n-- with the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes, for example,\n-- equals, greater than, less than, and so on.\n--\n-- For /KeyConditions/, only the following comparison operators are supported:\n--\n-- 'EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN'\n--\n-- The following are descriptions of these comparison operators.\n--\n-- 'EQ' : Equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one specified in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qLimit",
                        "name": "_qLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "-- | The maximum number of items to evaluate (not necessarily the number of\n-- matching items). If DynamoDB processes the number of items up to the limit\n-- while processing the results, it stops the operation and returns the matching\n-- values up to that point, and a key in /LastEvaluatedKey/ to apply in a\n-- subsequent operation, so that you can pick up where you left off. Also, if\n-- the processed data set size exceeds 1 MB before DynamoDB reaches this limit,\n-- it stops the operation and returns the matching values up to the limit, and a\n-- key in /LastEvaluatedKey/ to apply in a subsequent operation to continue the\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html Query and Scan\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qProjectionExpression",
                        "name": "_qProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the table.\n-- These attributes can include scalars, sets, or elements of a JSON document.\n-- The attributes in the expression must be separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qQueryFilter",
                        "name": "_qQueryFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "QueryFilter",
                        "documentation": "-- | There is a newer parameter available. Use /FilterExpression/ instead. Note\n-- that if you use /QueryFilter/ and /FilterExpression/ at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A condition that evaluates the query results after the items are read and\n-- returns only the desired values.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- A /QueryFilter/ is applied after the items have already been read; the process\n-- of filtering does not consume any additional read capacity units.\n--\n-- If you provide more than one condition in the /QueryFilter/ map, then by\n-- default all of the conditions must evaluate to true. In other words, the\n-- conditions are ANDed together. (You can use the /ConditionalOperator/ parameter\n-- to OR the conditions instead. If you do this, then at least one of the\n-- conditions must evaluate to true, rather than all of them.)\n--\n-- Note that /QueryFilter/ does not allow key attributes. You cannot define a\n-- filter condition on a hash key or range key.\n--\n-- Each /QueryFilter/ element consists of an attribute name to compare, along\n-- with the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the operator specified\n-- in /ComparisonOperator/.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes. For example,\n-- equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- For complete descriptions of all comparison operators, see the \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html Condition\u003e\n-- data type.\n--\n--",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qReturnConsumedCapacity",
                        "name": "_qReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qScanIndexForward",
                        "name": "_qScanIndexForward",
                        "shape": "BooleanObject",
                        "locationName": "ScanIndexForward",
                        "documentation": "-- | A value that specifies ascending (true) or descending (false) traversal of\n-- the index. DynamoDB returns results reflecting the requested order determined\n-- by the range key. If the data type is Number, the results are returned in\n-- numeric order. For type String, the results are returned in order of ASCII\n-- character code values. For type Binary, DynamoDB treats each byte of the\n-- binary data as unsigned when it compares binary values.\n--\n-- If /ScanIndexForward/ is not specified, the results are returned in ascending\n-- order.",
                        "typeExposed": "Maybe Bool",
                        "type": "Maybe Bool"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "qSelect",
                        "name": "_qSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "-- | The attributes to be returned in the result. You can retrieve all item\n-- attributes, specific item attributes, the count of matching items, or in the\n-- case of an index, some or all of the attributes projected into the index.\n--\n-- 'ALL_ATTRIBUTES' - Returns all of the item attributes from the specified\n-- table or index. If you query a local secondary index, then for each matching\n-- item in the index DynamoDB will fetch the entire item from the parent table.\n-- If the index is configured to project all item attributes, then all of the\n-- data can be obtained from the local secondary index, and no fetching is\n-- required.\n--\n-- 'ALL_PROJECTED_ATTRIBUTES' - Allowed only when querying an index. Retrieves\n-- all attributes that have been projected into the index. If the index is\n-- configured to project all attributes, this return value is equivalent to\n-- specifying 'ALL_ATTRIBUTES'.\n--\n-- 'COUNT' - Returns the number of matching items, rather than the matching\n-- items themselves.\n--\n-- 'SPECIFIC_ATTRIBUTES' - Returns only the attributes listed in /AttributesToGet/. This return value is equivalent to specifying /AttributesToGet/ without\n-- specifying any value for /Select/.\n--\n-- If you query a local secondary index and request only attributes that are\n-- projected into that index, the operation will read only the index and not the\n-- table. If any of the requested attributes are not projected into the local\n-- secondary index, DynamoDB will fetch each of these attributes from the parent\n-- table. This extra fetching incurs additional throughput cost and latency.\n--\n-- If you query a global secondary index, you can only request attributes that\n-- are projected into the index. Global secondary index queries cannot fetch\n-- attributes from the parent table.\n--\n-- If neither /Select/ nor /AttributesToGet/ are specified, DynamoDB defaults to 'ALL_ATTRIBUTES' when accessing a table, and 'ALL_PROJECTED_ATTRIBUTES' when accessing an\n-- index. You cannot use both /Select/ and /AttributesToGet/ together in a single\n-- request, unless the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is\n-- equivalent to specifying /AttributesToGet/ without any value for /Select/.)",
                        "typeExposed": "Maybe Select",
                        "type": "Maybe Select"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "qTableName",
                        "name": "_qTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested items.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 19,
                "ctor": "scanResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "srItems",
                        "name": "_srItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "-- | An array of item attributes that match the scan criteria. Each element in\n-- this array consists of an attribute name and the value for that attribute.",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srCount",
                        "name": "_srCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "-- | The number of items in the response.\n--\n-- If you set /ScanFilter/ in the request, then /Count/ is the number of items\n-- returned after the filter was applied, and /ScannedCount/ is the number of\n-- matching items before the filter was applied.\n--\n-- If you did not use a filter in the request, then /Count/ is the same as /ScannedCount/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srScannedCount",
                        "name": "_srScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "-- | The number of items evaluated, before any /ScanFilter/ is applied. A high /ScannedCount/ value with few, or no, /Count/ results indicates an inefficient /Scan/\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count Count and ScannedCount\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- If you did not use a filter in the request, then /ScannedCount/ is the same as /Count/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "srLastEvaluatedKey",
                        "name": "_srLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "-- | The primary key of the item where the operation stopped, inclusive of the\n-- previous result set. Use this value to start a new operation, excluding this\n-- value in the new request.\n--\n-- If /LastEvaluatedKey/ is empty, then the \"last page\" of results has been\n-- processed and there is no more data to be retrieved.\n--\n-- If /LastEvaluatedKey/ is not empty, it does not necessarily mean that there is\n-- more data in the result set. The only way to know when you have reached the\n-- end of the result set is when /LastEvaluatedKey/ is empty.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srConsumedCapacity",
                        "name": "_srConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 17,
                "name": "ScanResponse",
                "resultWrapper": null,
                "locationPad": 17,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "srItems",
                        "name": "_srItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "-- | An array of item attributes that match the scan criteria. Each element in\n-- this array consists of an attribute name and the value for that attribute.",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srCount",
                        "name": "_srCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "-- | The number of items in the response.\n--\n-- If you set /ScanFilter/ in the request, then /Count/ is the number of items\n-- returned after the filter was applied, and /ScannedCount/ is the number of\n-- matching items before the filter was applied.\n--\n-- If you did not use a filter in the request, then /Count/ is the same as /ScannedCount/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srScannedCount",
                        "name": "_srScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "-- | The number of items evaluated, before any /ScanFilter/ is applied. A high /ScannedCount/ value with few, or no, /Count/ results indicates an inefficient /Scan/\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count Count and ScannedCount\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- If you did not use a filter in the request, then /ScannedCount/ is the same as /Count/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "srLastEvaluatedKey",
                        "name": "_srLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "-- | The primary key of the item where the operation stopped, inclusive of the\n-- previous result set. Use this value to start a new operation, excluding this\n-- value in the new request.\n--\n-- If /LastEvaluatedKey/ is empty, then the \"last page\" of results has been\n-- processed and there is no more data to be retrieved.\n--\n-- If /LastEvaluatedKey/ is not empty, it does not necessarily mean that there is\n-- more data in the result set. The only way to know when you have reached the\n-- end of the result set is when /LastEvaluatedKey/ is empty.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srConsumedCapacity",
                        "name": "_srConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srConsumedCapacity",
                        "name": "_srConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srCount",
                        "name": "_srCount",
                        "shape": "Integer",
                        "locationName": "Count",
                        "documentation": "-- | The number of items in the response.\n--\n-- If you set /ScanFilter/ in the request, then /Count/ is the number of items\n-- returned after the filter was applied, and /ScannedCount/ is the number of\n-- matching items before the filter was applied.\n--\n-- If you did not use a filter in the request, then /Count/ is the same as /ScannedCount/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "srItems",
                        "name": "_srItems",
                        "shape": "ItemList",
                        "locationName": "Items",
                        "documentation": "-- | An array of item attributes that match the scan criteria. Each element in\n-- this array consists of an attribute name and the value for that attribute.",
                        "typeExposed": "[HashMap Text AttributeValue]",
                        "type": "List \"Items\" (Map Text AttributeValue)"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "srLastEvaluatedKey",
                        "name": "_srLastEvaluatedKey",
                        "shape": "Key",
                        "locationName": "LastEvaluatedKey",
                        "documentation": "-- | The primary key of the item where the operation stopped, inclusive of the\n-- previous result set. Use this value to start a new operation, excluding this\n-- value in the new request.\n--\n-- If /LastEvaluatedKey/ is empty, then the \"last page\" of results has been\n-- processed and there is no more data to be retrieved.\n--\n-- If /LastEvaluatedKey/ is not empty, it does not necessarily mean that there is\n-- more data in the result set. The only way to know when you have reached the\n-- end of the result set is when /LastEvaluatedKey/ is empty.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "srScannedCount",
                        "name": "_srScannedCount",
                        "shape": "Integer",
                        "locationName": "ScannedCount",
                        "documentation": "-- | The number of items evaluated, before any /ScanFilter/ is applied. A high /ScannedCount/ value with few, or no, /Count/ results indicates an inefficient /Scan/\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count Count and ScannedCount\u003e in the /AmazonDynamoDB Developer Guide/.\n--\n-- If you did not use a filter in the request, then /ScannedCount/ is the same as /Count/.",
                        "typeExposed": "Maybe Int",
                        "type": "Maybe Int"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html",
            "namespace": "Network.AWS.DynamoDB.Scan",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": {
                "token": {
                    "input": "sExclusiveStartKey",
                    "outputRequired": true,
                    "output": "srLastEvaluatedKey",
                    "inputRequired": true
                },
                "type": "next",
                "resultKey": "srItems"
            },
            "name": "Scan",
            "method": "post",
            "documentation": "-- | The /Scan/ operation returns one or more items and item attributes by accessing\n-- every item in a table or a secondary index. To have DynamoDB return fewer\n-- items, you can provide a /ScanFilter/ operation.\n--\n-- If the total number of scanned items exceeds the maximum data set size limit\n-- of 1 MB, the scan stops and results are returned to the user as a /LastEvaluatedKey/ value to continue the scan in a subsequent operation. The results also\n-- include the number of items exceeding the limit. A scan can result in no\n-- table data meeting the filter criteria.\n--\n-- The result set is eventually consistent.\n--\n-- By default, /Scan/ operations proceed sequentially; however, for faster\n-- performance on a large table or secondary index, applications can request a\n-- parallel /Scan/ operation by providing the /Segment/ and /TotalSegments/\n-- parameters. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#QueryAndScanParallelScan Parallel Scan\u003e in the /Amazon DynamoDBDeveloper Guide/.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 27,
                "ctor": "scan",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sTableName",
                        "name": "_sTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested items; or, if you provide 'IndexName', the name of the table to which that index belongs.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sIndexName",
                        "name": "_sIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of a secondary index to scan. This index can be any local secondary\n-- index or global secondary index. Note that if you use the 'IndexName'\n-- parameter, you must also provide 'TableName'.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sAttributesToGet",
                        "name": "_sAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sLimit",
                        "name": "_sLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "-- | The maximum number of items to evaluate (not necessarily the number of\n-- matching items). If DynamoDB processes the number of items up to the limit\n-- while processing the results, it stops the operation and returns the matching\n-- values up to that point, and a key in /LastEvaluatedKey/ to apply in a\n-- subsequent operation, so that you can pick up where you left off. Also, if\n-- the processed data set size exceeds 1 MB before DynamoDB reaches this limit,\n-- it stops the operation and returns the matching values up to the limit, and a\n-- key in /LastEvaluatedKey/ to apply in a subsequent operation to continue the\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html Query and Scan\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sSelect",
                        "name": "_sSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "-- | The attributes to be returned in the result. You can retrieve all item\n-- attributes, specific item attributes, or the count of matching items.\n--\n-- 'ALL_ATTRIBUTES' - Returns all of the item attributes.\n--\n-- 'COUNT' - Returns the number of matching items, rather than the matching\n-- items themselves.\n--\n-- 'SPECIFIC_ATTRIBUTES' - Returns only the attributes listed in /AttributesToGet/. This return value is equivalent to specifying /AttributesToGet/ without\n-- specifying any value for /Select/.\n--\n-- If neither /Select/ nor /AttributesToGet/ are specified, DynamoDB defaults to 'ALL_ATTRIBUTES'. You cannot use both /AttributesToGet/ and /Select/ together in a single\n-- request, unless the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is\n-- equivalent to specifying /AttributesToGet/ without any value for /Select/.)",
                        "typeExposed": "Maybe Select",
                        "type": "Maybe Select"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sScanFilter",
                        "name": "_sScanFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "ScanFilter",
                        "documentation": "-- | There is a newer parameter available. Use /FilterExpression/ instead. Note\n-- that if you use /ScanFilter/ and /FilterExpression/ at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A condition that evaluates the scan results and returns only the desired\n-- values.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- If you specify more than one condition in the /ScanFilter/ map, then by\n-- default all of the conditions must evaluate to true. In other words, the\n-- conditions are ANDed together. (You can use the /ConditionalOperator/ parameter\n-- to OR the conditions instead. If you do this, then at least one of the\n-- conditions must evaluate to true, rather than all of them.)\n--\n-- Each /ScanFilter/ element consists of an attribute name to compare, along with\n-- the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the operator specified\n-- in /ComparisonOperator/ .\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes. For example,\n-- equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- For complete descriptions of all comparison operators, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html Condition\u003e.\n--\n--",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sConditionalOperator",
                        "name": "_sConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in a /ScanFilter/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExclusiveStartKey",
                        "name": "_sExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "-- | The primary key of the first item that this operation will evaluate. Use the\n-- value that was returned for /LastEvaluatedKey/ in the previous operation.\n--\n-- The data type for /ExclusiveStartKey/ must be String, Number or Binary. No set\n-- data types are allowed.\n--\n-- In a parallel scan, a /Scan/ request that includes /ExclusiveStartKey/ must\n-- specify the same segment whose previous /Scan/ returned the corresponding value\n-- of /LastEvaluatedKey/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sReturnConsumedCapacity",
                        "name": "_sReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sTotalSegments",
                        "name": "_sTotalSegments",
                        "shape": "ScanTotalSegments",
                        "locationName": "TotalSegments",
                        "documentation": "-- | For a parallel /Scan/ request, /TotalSegments/ represents the total number of\n-- segments into which the /Scan/ operation will be divided. The value of /TotalSegments/ corresponds to the number of application workers that will perform the\n-- parallel scan. For example, if you want to use four application threads to\n-- scan a table or an index, specify a /TotalSegments/ value of 4.\n--\n-- The value for /TotalSegments/ must be greater than or equal to 1, and less\n-- than or equal to 1000000. If you specify a /TotalSegments/ value of 1, the /Scan/\n-- operation will be sequential rather than parallel.\n--\n-- If you specify /TotalSegments/, you must also specify /Segment/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sSegment",
                        "name": "_sSegment",
                        "shape": "ScanSegment",
                        "locationName": "Segment",
                        "documentation": "-- | For a parallel /Scan/ request, /Segment/ identifies an individual segment to be\n-- scanned by an application worker.\n--\n-- Segment IDs are zero-based, so the first segment is always 0. For example,\n-- if you want to use four application threads to scan a table or an index, then\n-- the first thread specifies a /Segment/ value of 0, the second thread specifies\n-- 1, and so on.\n--\n-- The value of /LastEvaluatedKey/ returned from a parallel /Scan/ request must be\n-- used as /ExclusiveStartKey/ with the same segment ID in a subsequent /Scan/\n-- operation.\n--\n-- The value for /Segment/ must be greater than or equal to 0, and less than the\n-- value provided for /TotalSegments/.\n--\n-- If you provide /Segment/, you must also provide /TotalSegments/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sProjectionExpression",
                        "name": "_sProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the\n-- specified table or index. These attributes can include scalars, sets, or\n-- elements of a JSON document. The attributes in the expression must be\n-- separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sFilterExpression",
                        "name": "_sFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "-- | A string that contains conditions that DynamoDB applies after the /Scan/\n-- operation, but before the data is returned to you. Items that do not satisfy\n-- the /FilterExpression/ criteria are not returned.\n--\n-- A /FilterExpression/ is applied after the items have already been read; the\n-- process of filtering does not consume any additional read capacity units.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults Filter Expressions\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeNames",
                        "name": "_sExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeValues",
                        "name": "_sExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sTableName",
                        "name": "_sTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested items; or, if you provide 'IndexName', the name of the table to which that index belongs.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sAttributesToGet",
                        "name": "_sAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 26,
                "queryPad": 0,
                "name": "Scan",
                "query": [],
                "locationPad": 26,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sIndexName",
                        "name": "_sIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of a secondary index to scan. This index can be any local secondary\n-- index or global secondary index. Note that if you use the 'IndexName'\n-- parameter, you must also provide 'TableName'.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sLimit",
                        "name": "_sLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "-- | The maximum number of items to evaluate (not necessarily the number of\n-- matching items). If DynamoDB processes the number of items up to the limit\n-- while processing the results, it stops the operation and returns the matching\n-- values up to that point, and a key in /LastEvaluatedKey/ to apply in a\n-- subsequent operation, so that you can pick up where you left off. Also, if\n-- the processed data set size exceeds 1 MB before DynamoDB reaches this limit,\n-- it stops the operation and returns the matching values up to the limit, and a\n-- key in /LastEvaluatedKey/ to apply in a subsequent operation to continue the\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html Query and Scan\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sSelect",
                        "name": "_sSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "-- | The attributes to be returned in the result. You can retrieve all item\n-- attributes, specific item attributes, or the count of matching items.\n--\n-- 'ALL_ATTRIBUTES' - Returns all of the item attributes.\n--\n-- 'COUNT' - Returns the number of matching items, rather than the matching\n-- items themselves.\n--\n-- 'SPECIFIC_ATTRIBUTES' - Returns only the attributes listed in /AttributesToGet/. This return value is equivalent to specifying /AttributesToGet/ without\n-- specifying any value for /Select/.\n--\n-- If neither /Select/ nor /AttributesToGet/ are specified, DynamoDB defaults to 'ALL_ATTRIBUTES'. You cannot use both /AttributesToGet/ and /Select/ together in a single\n-- request, unless the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is\n-- equivalent to specifying /AttributesToGet/ without any value for /Select/.)",
                        "typeExposed": "Maybe Select",
                        "type": "Maybe Select"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sScanFilter",
                        "name": "_sScanFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "ScanFilter",
                        "documentation": "-- | There is a newer parameter available. Use /FilterExpression/ instead. Note\n-- that if you use /ScanFilter/ and /FilterExpression/ at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A condition that evaluates the scan results and returns only the desired\n-- values.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- If you specify more than one condition in the /ScanFilter/ map, then by\n-- default all of the conditions must evaluate to true. In other words, the\n-- conditions are ANDed together. (You can use the /ConditionalOperator/ parameter\n-- to OR the conditions instead. If you do this, then at least one of the\n-- conditions must evaluate to true, rather than all of them.)\n--\n-- Each /ScanFilter/ element consists of an attribute name to compare, along with\n-- the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the operator specified\n-- in /ComparisonOperator/ .\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes. For example,\n-- equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- For complete descriptions of all comparison operators, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html Condition\u003e.\n--\n--",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sConditionalOperator",
                        "name": "_sConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in a /ScanFilter/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExclusiveStartKey",
                        "name": "_sExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "-- | The primary key of the first item that this operation will evaluate. Use the\n-- value that was returned for /LastEvaluatedKey/ in the previous operation.\n--\n-- The data type for /ExclusiveStartKey/ must be String, Number or Binary. No set\n-- data types are allowed.\n--\n-- In a parallel scan, a /Scan/ request that includes /ExclusiveStartKey/ must\n-- specify the same segment whose previous /Scan/ returned the corresponding value\n-- of /LastEvaluatedKey/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sReturnConsumedCapacity",
                        "name": "_sReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sTotalSegments",
                        "name": "_sTotalSegments",
                        "shape": "ScanTotalSegments",
                        "locationName": "TotalSegments",
                        "documentation": "-- | For a parallel /Scan/ request, /TotalSegments/ represents the total number of\n-- segments into which the /Scan/ operation will be divided. The value of /TotalSegments/ corresponds to the number of application workers that will perform the\n-- parallel scan. For example, if you want to use four application threads to\n-- scan a table or an index, specify a /TotalSegments/ value of 4.\n--\n-- The value for /TotalSegments/ must be greater than or equal to 1, and less\n-- than or equal to 1000000. If you specify a /TotalSegments/ value of 1, the /Scan/\n-- operation will be sequential rather than parallel.\n--\n-- If you specify /TotalSegments/, you must also specify /Segment/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sSegment",
                        "name": "_sSegment",
                        "shape": "ScanSegment",
                        "locationName": "Segment",
                        "documentation": "-- | For a parallel /Scan/ request, /Segment/ identifies an individual segment to be\n-- scanned by an application worker.\n--\n-- Segment IDs are zero-based, so the first segment is always 0. For example,\n-- if you want to use four application threads to scan a table or an index, then\n-- the first thread specifies a /Segment/ value of 0, the second thread specifies\n-- 1, and so on.\n--\n-- The value of /LastEvaluatedKey/ returned from a parallel /Scan/ request must be\n-- used as /ExclusiveStartKey/ with the same segment ID in a subsequent /Scan/\n-- operation.\n--\n-- The value for /Segment/ must be greater than or equal to 0, and less than the\n-- value provided for /TotalSegments/.\n--\n-- If you provide /Segment/, you must also provide /TotalSegments/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sProjectionExpression",
                        "name": "_sProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the\n-- specified table or index. These attributes can include scalars, sets, or\n-- elements of a JSON document. The attributes in the expression must be\n-- separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sFilterExpression",
                        "name": "_sFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "-- | A string that contains conditions that DynamoDB applies after the /Scan/\n-- operation, but before the data is returned to you. Items that do not satisfy\n-- the /FilterExpression/ criteria are not returned.\n--\n-- A /FilterExpression/ is applied after the items have already been read; the\n-- process of filtering does not consume any additional read capacity units.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults Filter Expressions\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeNames",
                        "name": "_sExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeValues",
                        "name": "_sExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List1",
                        "lensMapping": "_List1",
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sAttributesToGet",
                        "name": "_sAttributesToGet",
                        "shape": "AttributeNameList",
                        "locationName": "AttributesToGet",
                        "documentation": "-- | There is a newer parameter available. Use /ProjectionExpression/ instead. Note\n-- that if you use /AttributesToGet/ and /ProjectionExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter allows you to retrieve attributes of type List or Map;\n-- however, it cannot retrieve individual elements within a List or a Map.\n--\n-- The names of one or more attributes to retrieve. If no attribute names are\n-- provided, then all attributes will be returned. If any of the requested\n-- attributes are not found, they will not appear in the result.\n--\n-- Note that /AttributesToGet/ has no effect on provisioned throughput\n-- consumption. DynamoDB determines capacity units consumed based on item size,\n-- not on the amount of data that is returned to an application.",
                        "typeExposed": "NonEmpty Text",
                        "type": "List1 \"AttributesToGet\" Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sConditionalOperator",
                        "name": "_sConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in a /ScanFilter/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExclusiveStartKey",
                        "name": "_sExclusiveStartKey",
                        "shape": "Key",
                        "locationName": "ExclusiveStartKey",
                        "documentation": "-- | The primary key of the first item that this operation will evaluate. Use the\n-- value that was returned for /LastEvaluatedKey/ in the previous operation.\n--\n-- The data type for /ExclusiveStartKey/ must be String, Number or Binary. No set\n-- data types are allowed.\n--\n-- In a parallel scan, a /Scan/ request that includes /ExclusiveStartKey/ must\n-- specify the same segment whose previous /Scan/ returned the corresponding value\n-- of /LastEvaluatedKey/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeNames",
                        "name": "_sExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sExpressionAttributeValues",
                        "name": "_sExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sFilterExpression",
                        "name": "_sFilterExpression",
                        "shape": "ConditionExpression",
                        "locationName": "FilterExpression",
                        "documentation": "-- | A string that contains conditions that DynamoDB applies after the /Scan/\n-- operation, but before the data is returned to you. Items that do not satisfy\n-- the /FilterExpression/ criteria are not returned.\n--\n-- A /FilterExpression/ is applied after the items have already been read; the\n-- process of filtering does not consume any additional read capacity units.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults Filter Expressions\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sIndexName",
                        "name": "_sIndexName",
                        "shape": "IndexName",
                        "locationName": "IndexName",
                        "documentation": "-- | The name of a secondary index to scan. This index can be any local secondary\n-- index or global secondary index. Note that if you use the 'IndexName'\n-- parameter, you must also provide 'TableName'.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sLimit",
                        "name": "_sLimit",
                        "shape": "PositiveIntegerObject",
                        "locationName": "Limit",
                        "documentation": "-- | The maximum number of items to evaluate (not necessarily the number of\n-- matching items). If DynamoDB processes the number of items up to the limit\n-- while processing the results, it stops the operation and returns the matching\n-- values up to that point, and a key in /LastEvaluatedKey/ to apply in a\n-- subsequent operation, so that you can pick up where you left off. Also, if\n-- the processed data set size exceeds 1 MB before DynamoDB reaches this limit,\n-- it stops the operation and returns the matching values up to the limit, and a\n-- key in /LastEvaluatedKey/ to apply in a subsequent operation to continue the\n-- operation. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html Query and Scan\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sProjectionExpression",
                        "name": "_sProjectionExpression",
                        "shape": "ProjectionExpression",
                        "locationName": "ProjectionExpression",
                        "documentation": "-- | A string that identifies one or more attributes to retrieve from the\n-- specified table or index. These attributes can include scalars, sets, or\n-- elements of a JSON document. The attributes in the expression must be\n-- separated by commas.\n--\n-- If no attribute names are specified, then all attributes will be returned.\n-- If any of the requested attributes are not found, they will not appear in the\n-- result.\n--\n-- For more information, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing Item Attributes\u003e in the /Amazon DynamoDBDeveloper Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sReturnConsumedCapacity",
                        "name": "_sReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sScanFilter",
                        "name": "_sScanFilter",
                        "shape": "FilterConditionMap",
                        "locationName": "ScanFilter",
                        "documentation": "-- | There is a newer parameter available. Use /FilterExpression/ instead. Note\n-- that if you use /ScanFilter/ and /FilterExpression/ at the same time, DynamoDB\n-- will return a /ValidationException/ exception.\n--\n-- A condition that evaluates the scan results and returns only the desired\n-- values.\n--\n-- This parameter does not support attributes of type List or Map.\n--\n-- If you specify more than one condition in the /ScanFilter/ map, then by\n-- default all of the conditions must evaluate to true. In other words, the\n-- conditions are ANDed together. (You can use the /ConditionalOperator/ parameter\n-- to OR the conditions instead. If you do this, then at least one of the\n-- conditions must evaluate to true, rather than all of them.)\n--\n-- Each /ScanFilter/ element consists of an attribute name to compare, along with\n-- the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the operator specified\n-- in /ComparisonOperator/ .\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For Binary, DynamoDB treats each byte of the binary data as unsigned when it\n-- compares binary values.\n--\n-- For information on specifying data types in JSON, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html JSON Data Format\u003e in\n-- the /Amazon DynamoDB Developer Guide/.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes. For example,\n-- equals, greater than, less than, etc.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- For complete descriptions of all comparison operators, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Condition.html Condition\u003e.\n--\n--",
                        "typeExposed": "HashMap Text Condition",
                        "type": "Map Text Condition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sSegment",
                        "name": "_sSegment",
                        "shape": "ScanSegment",
                        "locationName": "Segment",
                        "documentation": "-- | For a parallel /Scan/ request, /Segment/ identifies an individual segment to be\n-- scanned by an application worker.\n--\n-- Segment IDs are zero-based, so the first segment is always 0. For example,\n-- if you want to use four application threads to scan a table or an index, then\n-- the first thread specifies a /Segment/ value of 0, the second thread specifies\n-- 1, and so on.\n--\n-- The value of /LastEvaluatedKey/ returned from a parallel /Scan/ request must be\n-- used as /ExclusiveStartKey/ with the same segment ID in a subsequent /Scan/\n-- operation.\n--\n-- The value for /Segment/ must be greater than or equal to 0, and less than the\n-- value provided for /TotalSegments/.\n--\n-- If you provide /Segment/, you must also provide /TotalSegments/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sSelect",
                        "name": "_sSelect",
                        "shape": "Select",
                        "locationName": "Select",
                        "documentation": "-- | The attributes to be returned in the result. You can retrieve all item\n-- attributes, specific item attributes, or the count of matching items.\n--\n-- 'ALL_ATTRIBUTES' - Returns all of the item attributes.\n--\n-- 'COUNT' - Returns the number of matching items, rather than the matching\n-- items themselves.\n--\n-- 'SPECIFIC_ATTRIBUTES' - Returns only the attributes listed in /AttributesToGet/. This return value is equivalent to specifying /AttributesToGet/ without\n-- specifying any value for /Select/.\n--\n-- If neither /Select/ nor /AttributesToGet/ are specified, DynamoDB defaults to 'ALL_ATTRIBUTES'. You cannot use both /AttributesToGet/ and /Select/ together in a single\n-- request, unless the value for /Select/ is 'SPECIFIC_ATTRIBUTES'. (This usage is\n-- equivalent to specifying /AttributesToGet/ without any value for /Select/.)",
                        "typeExposed": "Maybe Select",
                        "type": "Maybe Select"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "sTableName",
                        "name": "_sTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the requested items; or, if you provide 'IndexName', the name of the table to which that index belongs.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": "mapping _Nat",
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "sTotalSegments",
                        "name": "_sTotalSegments",
                        "shape": "ScanTotalSegments",
                        "locationName": "TotalSegments",
                        "documentation": "-- | For a parallel /Scan/ request, /TotalSegments/ represents the total number of\n-- segments into which the /Scan/ operation will be divided. The value of /TotalSegments/ corresponds to the number of application workers that will perform the\n-- parallel scan. For example, if you want to use four application threads to\n-- scan a table or an index, specify a /TotalSegments/ value of 4.\n--\n-- The value for /TotalSegments/ must be greater than or equal to 1, and less\n-- than or equal to 1000000. If you specify a /TotalSegments/ value of 1, the /Scan/\n-- operation will be sequential rather than parallel.\n--\n-- If you specify /TotalSegments/, you must also specify /Segment/.",
                        "typeExposed": "Maybe Natural",
                        "type": "Maybe Nat"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 25,
                "ctor": "updateItemResponse",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uirAttributes",
                        "name": "_uirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | A map of attribute values as they appeared before the /UpdateItem/ operation.\n-- This map only appears if /ReturnValues/ was specified as something other than 'NONE' in the request. Each element represents one attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uirConsumedCapacity",
                        "name": "_uirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uirItemCollectionMetrics",
                        "name": "_uirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": null,
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 22,
                "name": "UpdateItemResponse",
                "resultWrapper": null,
                "locationPad": 22,
                "type": "record",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uirAttributes",
                        "name": "_uirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | A map of attribute values as they appeared before the /UpdateItem/ operation.\n-- This map only appears if /ReturnValues/ was specified as something other than 'NONE' in the request. Each element represents one attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uirConsumedCapacity",
                        "name": "_uirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uirItemCollectionMetrics",
                        "name": "_uirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": null,
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uirAttributes",
                        "name": "_uirAttributes",
                        "shape": "AttributeMap",
                        "locationName": "Attributes",
                        "documentation": "-- | A map of attribute values as they appeared before the /UpdateItem/ operation.\n-- This map only appears if /ReturnValues/ was specified as something other than 'NONE' in the request. Each element represents one attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uirConsumedCapacity",
                        "name": "_uirConsumedCapacity",
                        "shape": "ConsumedCapacity",
                        "locationName": "ConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ConsumedCapacity",
                        "type": "Maybe ConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uirItemCollectionMetrics",
                        "name": "_uirItemCollectionMetrics",
                        "shape": "ItemCollectionMetrics",
                        "locationName": "ItemCollectionMetrics",
                        "documentation": null,
                        "typeExposed": "Maybe ItemCollectionMetrics",
                        "type": "Maybe ItemCollectionMetrics"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html",
            "namespace": "Network.AWS.DynamoDB.UpdateItem",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "UpdateItem",
            "method": "post",
            "documentation": "-- | Edits an existing item's attributes, or adds a new item to the table if it\n-- does not already exist. You can put, delete, or add attribute values. You can\n-- also perform a conditional update on an existing item (insert a new attribute\n-- name-value pair if it doesn't exist, or replace an existing name-value pair\n-- if it has certain expected attribute values). If conditions are specified and\n-- the item does not exist, then the operation fails and a new item is not\n-- created.\n--\n-- You can also return the item's attribute values in the same /UpdateItem/\n-- operation using the /ReturnValues/ parameter.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "updateItem",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiTableName",
                        "name": "_uiTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the item to update.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiKey",
                        "name": "_uiKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | The primary key of the item to be updated. Each element consists of an\n-- attribute name and a value for that attribute.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiAttributeUpdates",
                        "name": "_uiAttributeUpdates",
                        "shape": "AttributeUpdates",
                        "locationName": "AttributeUpdates",
                        "documentation": "-- | There is a newer parameter available. Use /UpdateExpression/ instead. Note\n-- that if you use /AttributeUpdates/ and /UpdateExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter can be used for modifying top-level attributes; however, it\n-- does not support individual list or map elements.\n--\n-- The names of attributes to be modified, the action to perform on each, and\n-- the new value for each. If you are updating an attribute that is an index key\n-- attribute for any indexes on that table, the attribute type must match the\n-- index key type defined in the /AttributesDefinition/ of the table description.\n-- You can use /UpdateItem/ to update any nonkey attributes.\n--\n-- Attribute values cannot be null. String and Binary type attributes must have\n-- lengths greater than zero. Set type attributes must not be empty. Requests\n-- with empty values will be rejected with a /ValidationException/ exception.\n--\n-- Each /AttributeUpdates/ element consists of an attribute name to modify, along\n-- with the following:\n--\n-- /Value/ - The new value, if applicable, for this attribute.\n--\n-- /Action/ - A value that specifies how to perform the update. This action is\n-- only valid for an existing attribute whose data type is Number or is a set;\n-- do not use 'ADD' for other data types.\n--\n-- If an item with the specified primary key is found in the table, the\n-- following values perform the following actions:\n--\n-- 'PUT' - Adds the specified attribute to the item. If the attribute already\n-- exists, it is replaced by the new value.\n--\n-- 'DELETE' - Removes the attribute and its value, if no value is specified for 'DELETE'. The data type of the specified value must match the existing value's\n-- data type.\n--\n-- If a set of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the 'DELETE' action specifies '[a,c]', then the final attribute value is '[b]'. Specifying an\n-- empty set is an error.\n--\n-- 'ADD' - Adds the specified value to the item, if the attribute does not\n-- already exist. If the attribute does exist, then the behavior of 'ADD' depends\n-- on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses 0 as the initial value.\n--\n-- Similarly, if you use 'ADD' for an existing item to increment or decrement an\n-- attribute value that doesn't exist before the update, DynamoDB uses '0' as the\n-- initial value. For example, suppose that the item you want to update doesn't\n-- have an attribute named /itemcount/, but you decide to 'ADD' the number '3' to this\n-- attribute anyway. DynamoDB will create the /itemcount/ attribute, set its\n-- initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute, with a value of '3'.\n--\n-- If the existing data type is a set, and if /Value/ is also a set, then /Value/\n-- is appended to the existing set. For example, if the attribute value is the\n-- set '[1,2]', and the 'ADD' action specified '[3]', then the final attribute value\n-- is '[1,2,3]'. An error occurs if an 'ADD' action is specified for a set attribute\n-- and the attribute type specified does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, /Value/ must also be a set of strings.\n--\n-- If no item with the specified key is found in the table, the following\n-- values perform the following actions:\n--\n-- 'PUT' - Causes DynamoDB to create a new item with the specified primary key,\n-- and then adds the attribute.\n--\n-- 'DELETE' - Nothing happens, because attributes cannot be deleted from a\n-- nonexistent item. The operation succeeds, but DynamoDB does not create a new\n-- item.\n--\n-- 'ADD' - Causes DynamoDB to create an item with the supplied primary key and\n-- number (or set of numbers) for the attribute value. The only data types\n-- allowed are Number and Number Set.\n--\n-- If you provide any attributes that are part of an index key, then the\n-- data types for those attributes must match those of the schema in the table's\n-- attribute definition.",
                        "typeExposed": "HashMap Text AttributeValueUpdate",
                        "type": "Map Text AttributeValueUpdate"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpected",
                        "name": "_uiExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use / ConditionExpression / instead.\n-- Note that if you use /Expected/ and / ConditionExpression / at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /UpdateItem/ operation.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionalOperator",
                        "name": "_uiConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnValues",
                        "name": "_uiReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- either before or after they were updated. For /UpdateItem/, the valid values\n-- are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - If /UpdateItem/ overwrote an attribute name-value pair, then the\n-- content of the old item is returned.\n--\n-- 'UPDATED_OLD' - The old versions of only the updated attributes are returned.\n--\n-- 'ALL_NEW' - All of the attributes of the new version of the item are\n-- returned.\n--\n-- 'UPDATED_NEW' - The new versions of only the updated attributes are returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnConsumedCapacity",
                        "name": "_uiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnItemCollectionMetrics",
                        "name": "_uiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiUpdateExpression",
                        "name": "_uiUpdateExpression",
                        "shape": "UpdateExpression",
                        "locationName": "UpdateExpression",
                        "documentation": "-- | An expression that defines one or more attributes to be updated, the action\n-- to be performed on them, and new value(s) for them.\n--\n-- The following action values are available for /UpdateExpression/.\n--\n-- 'SET' - Adds one or more attributes and values to an item. If any of these\n-- attribute already exist, they are replaced by the new values. You can also\n-- use 'SET' to add or subtract from an attribute that is of type Number.\n--\n-- 'SET' supports the following functions:\n--\n-- 'if_not_exists (path, operand)' - if the item does not contain an attribute\n-- at the specified path, then 'if_not_exists' evaluates to operand; otherwise, it\n-- evaluates to path. You can use this function to avoid overwriting an\n-- attribute that may already be present in the item.\n--\n-- 'list_append (operand, operand)' - evaluates to a list with a new element\n-- added to it. You can append the new element to the start or the end of the\n-- list by reversing the order of the operands.\n--\n-- These function names are case-sensitive.\n--\n-- 'REMOVE' - Removes one or more attributes from an item.\n--\n-- 'ADD' - Adds the specified value to the item, if the attribute does not\n-- already exist. If the attribute does exist, then the behavior of 'ADD' depends\n-- on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses '0' as the initial value.\n--\n-- Similarly, if you use 'ADD' for an existing item to increment or decrement an\n-- attribute value that doesn't exist before the update, DynamoDB uses '0' as the\n-- initial value. For example, suppose that the item you want to update doesn't\n-- have an attribute named /itemcount/, but you decide to 'ADD' the number '3' to this\n-- attribute anyway. DynamoDB will create the /itemcount/ attribute, set its\n-- initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute in the item, with a value of '3'.\n--\n-- If the existing data type is a set and if /Value/ is also a set, then /Value/\n-- is added to the existing set. For example, if the attribute value is the set '[1,2]', and the 'ADD' action specified '[3]', then the final attribute value is '[1,2,3]'. An error occurs if an\n-- 'ADD' action is specified for a set attribute and the attribute type specified\n-- does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, the /Value/ must also be a set of\n-- strings.\n--\n-- The 'ADD' action only supports Number and set data types. In addition, 'ADD'\n-- can only be used on top-level attributes, not nested attributes.\n--\n-- 'DELETE' - Deletes an element from a set.\n--\n-- If a set of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the 'DELETE' action specifies '[a,c]', then the final attribute value is '[b]'. Specifying an\n-- empty set is an error.\n--\n-- The 'DELETE' action only supports Number and set data types. In addition, 'DELETE' can only be used on top-level attributes, not nested attributes.\n--\n-- You can have many actions in a single expression, such as the following: 'SET a=:value1, b=:value2 DELETE :value3, :value4, :value5'\n--\n-- For more information on update expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html Modifying Items andAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionExpression",
                        "name": "_uiConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional update to\n-- succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeNames",
                        "name": "_uiExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeValues",
                        "name": "_uiExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiTableName",
                        "name": "_uiTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the item to update.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "UpdateItem",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiKey",
                        "name": "_uiKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | The primary key of the item to be updated. Each element consists of an\n-- attribute name and a value for that attribute.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiAttributeUpdates",
                        "name": "_uiAttributeUpdates",
                        "shape": "AttributeUpdates",
                        "locationName": "AttributeUpdates",
                        "documentation": "-- | There is a newer parameter available. Use /UpdateExpression/ instead. Note\n-- that if you use /AttributeUpdates/ and /UpdateExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter can be used for modifying top-level attributes; however, it\n-- does not support individual list or map elements.\n--\n-- The names of attributes to be modified, the action to perform on each, and\n-- the new value for each. If you are updating an attribute that is an index key\n-- attribute for any indexes on that table, the attribute type must match the\n-- index key type defined in the /AttributesDefinition/ of the table description.\n-- You can use /UpdateItem/ to update any nonkey attributes.\n--\n-- Attribute values cannot be null. String and Binary type attributes must have\n-- lengths greater than zero. Set type attributes must not be empty. Requests\n-- with empty values will be rejected with a /ValidationException/ exception.\n--\n-- Each /AttributeUpdates/ element consists of an attribute name to modify, along\n-- with the following:\n--\n-- /Value/ - The new value, if applicable, for this attribute.\n--\n-- /Action/ - A value that specifies how to perform the update. This action is\n-- only valid for an existing attribute whose data type is Number or is a set;\n-- do not use 'ADD' for other data types.\n--\n-- If an item with the specified primary key is found in the table, the\n-- following values perform the following actions:\n--\n-- 'PUT' - Adds the specified attribute to the item. If the attribute already\n-- exists, it is replaced by the new value.\n--\n-- 'DELETE' - Removes the attribute and its value, if no value is specified for 'DELETE'. The data type of the specified value must match the existing value's\n-- data type.\n--\n-- If a set of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the 'DELETE' action specifies '[a,c]', then the final attribute value is '[b]'. Specifying an\n-- empty set is an error.\n--\n-- 'ADD' - Adds the specified value to the item, if the attribute does not\n-- already exist. If the attribute does exist, then the behavior of 'ADD' depends\n-- on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses 0 as the initial value.\n--\n-- Similarly, if you use 'ADD' for an existing item to increment or decrement an\n-- attribute value that doesn't exist before the update, DynamoDB uses '0' as the\n-- initial value. For example, suppose that the item you want to update doesn't\n-- have an attribute named /itemcount/, but you decide to 'ADD' the number '3' to this\n-- attribute anyway. DynamoDB will create the /itemcount/ attribute, set its\n-- initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute, with a value of '3'.\n--\n-- If the existing data type is a set, and if /Value/ is also a set, then /Value/\n-- is appended to the existing set. For example, if the attribute value is the\n-- set '[1,2]', and the 'ADD' action specified '[3]', then the final attribute value\n-- is '[1,2,3]'. An error occurs if an 'ADD' action is specified for a set attribute\n-- and the attribute type specified does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, /Value/ must also be a set of strings.\n--\n-- If no item with the specified key is found in the table, the following\n-- values perform the following actions:\n--\n-- 'PUT' - Causes DynamoDB to create a new item with the specified primary key,\n-- and then adds the attribute.\n--\n-- 'DELETE' - Nothing happens, because attributes cannot be deleted from a\n-- nonexistent item. The operation succeeds, but DynamoDB does not create a new\n-- item.\n--\n-- 'ADD' - Causes DynamoDB to create an item with the supplied primary key and\n-- number (or set of numbers) for the attribute value. The only data types\n-- allowed are Number and Number Set.\n--\n-- If you provide any attributes that are part of an index key, then the\n-- data types for those attributes must match those of the schema in the table's\n-- attribute definition.",
                        "typeExposed": "HashMap Text AttributeValueUpdate",
                        "type": "Map Text AttributeValueUpdate"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpected",
                        "name": "_uiExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use / ConditionExpression / instead.\n-- Note that if you use /Expected/ and / ConditionExpression / at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /UpdateItem/ operation.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionalOperator",
                        "name": "_uiConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnValues",
                        "name": "_uiReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- either before or after they were updated. For /UpdateItem/, the valid values\n-- are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - If /UpdateItem/ overwrote an attribute name-value pair, then the\n-- content of the old item is returned.\n--\n-- 'UPDATED_OLD' - The old versions of only the updated attributes are returned.\n--\n-- 'ALL_NEW' - All of the attributes of the new version of the item are\n-- returned.\n--\n-- 'UPDATED_NEW' - The new versions of only the updated attributes are returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnConsumedCapacity",
                        "name": "_uiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnItemCollectionMetrics",
                        "name": "_uiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiUpdateExpression",
                        "name": "_uiUpdateExpression",
                        "shape": "UpdateExpression",
                        "locationName": "UpdateExpression",
                        "documentation": "-- | An expression that defines one or more attributes to be updated, the action\n-- to be performed on them, and new value(s) for them.\n--\n-- The following action values are available for /UpdateExpression/.\n--\n-- 'SET' - Adds one or more attributes and values to an item. If any of these\n-- attribute already exist, they are replaced by the new values. You can also\n-- use 'SET' to add or subtract from an attribute that is of type Number.\n--\n-- 'SET' supports the following functions:\n--\n-- 'if_not_exists (path, operand)' - if the item does not contain an attribute\n-- at the specified path, then 'if_not_exists' evaluates to operand; otherwise, it\n-- evaluates to path. You can use this function to avoid overwriting an\n-- attribute that may already be present in the item.\n--\n-- 'list_append (operand, operand)' - evaluates to a list with a new element\n-- added to it. You can append the new element to the start or the end of the\n-- list by reversing the order of the operands.\n--\n-- These function names are case-sensitive.\n--\n-- 'REMOVE' - Removes one or more attributes from an item.\n--\n-- 'ADD' - Adds the specified value to the item, if the attribute does not\n-- already exist. If the attribute does exist, then the behavior of 'ADD' depends\n-- on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses '0' as the initial value.\n--\n-- Similarly, if you use 'ADD' for an existing item to increment or decrement an\n-- attribute value that doesn't exist before the update, DynamoDB uses '0' as the\n-- initial value. For example, suppose that the item you want to update doesn't\n-- have an attribute named /itemcount/, but you decide to 'ADD' the number '3' to this\n-- attribute anyway. DynamoDB will create the /itemcount/ attribute, set its\n-- initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute in the item, with a value of '3'.\n--\n-- If the existing data type is a set and if /Value/ is also a set, then /Value/\n-- is added to the existing set. For example, if the attribute value is the set '[1,2]', and the 'ADD' action specified '[3]', then the final attribute value is '[1,2,3]'. An error occurs if an\n-- 'ADD' action is specified for a set attribute and the attribute type specified\n-- does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, the /Value/ must also be a set of\n-- strings.\n--\n-- The 'ADD' action only supports Number and set data types. In addition, 'ADD'\n-- can only be used on top-level attributes, not nested attributes.\n--\n-- 'DELETE' - Deletes an element from a set.\n--\n-- If a set of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the 'DELETE' action specifies '[a,c]', then the final attribute value is '[b]'. Specifying an\n-- empty set is an error.\n--\n-- The 'DELETE' action only supports Number and set data types. In addition, 'DELETE' can only be used on top-level attributes, not nested attributes.\n--\n-- You can have many actions in a single expression, such as the following: 'SET a=:value1, b=:value2 DELETE :value3, :value4, :value5'\n--\n-- For more information on update expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html Modifying Items andAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionExpression",
                        "name": "_uiConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional update to\n-- succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeNames",
                        "name": "_uiExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeValues",
                        "name": "_uiExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiAttributeUpdates",
                        "name": "_uiAttributeUpdates",
                        "shape": "AttributeUpdates",
                        "locationName": "AttributeUpdates",
                        "documentation": "-- | There is a newer parameter available. Use /UpdateExpression/ instead. Note\n-- that if you use /AttributeUpdates/ and /UpdateExpression/ at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter can be used for modifying top-level attributes; however, it\n-- does not support individual list or map elements.\n--\n-- The names of attributes to be modified, the action to perform on each, and\n-- the new value for each. If you are updating an attribute that is an index key\n-- attribute for any indexes on that table, the attribute type must match the\n-- index key type defined in the /AttributesDefinition/ of the table description.\n-- You can use /UpdateItem/ to update any nonkey attributes.\n--\n-- Attribute values cannot be null. String and Binary type attributes must have\n-- lengths greater than zero. Set type attributes must not be empty. Requests\n-- with empty values will be rejected with a /ValidationException/ exception.\n--\n-- Each /AttributeUpdates/ element consists of an attribute name to modify, along\n-- with the following:\n--\n-- /Value/ - The new value, if applicable, for this attribute.\n--\n-- /Action/ - A value that specifies how to perform the update. This action is\n-- only valid for an existing attribute whose data type is Number or is a set;\n-- do not use 'ADD' for other data types.\n--\n-- If an item with the specified primary key is found in the table, the\n-- following values perform the following actions:\n--\n-- 'PUT' - Adds the specified attribute to the item. If the attribute already\n-- exists, it is replaced by the new value.\n--\n-- 'DELETE' - Removes the attribute and its value, if no value is specified for 'DELETE'. The data type of the specified value must match the existing value's\n-- data type.\n--\n-- If a set of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the 'DELETE' action specifies '[a,c]', then the final attribute value is '[b]'. Specifying an\n-- empty set is an error.\n--\n-- 'ADD' - Adds the specified value to the item, if the attribute does not\n-- already exist. If the attribute does exist, then the behavior of 'ADD' depends\n-- on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses 0 as the initial value.\n--\n-- Similarly, if you use 'ADD' for an existing item to increment or decrement an\n-- attribute value that doesn't exist before the update, DynamoDB uses '0' as the\n-- initial value. For example, suppose that the item you want to update doesn't\n-- have an attribute named /itemcount/, but you decide to 'ADD' the number '3' to this\n-- attribute anyway. DynamoDB will create the /itemcount/ attribute, set its\n-- initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute, with a value of '3'.\n--\n-- If the existing data type is a set, and if /Value/ is also a set, then /Value/\n-- is appended to the existing set. For example, if the attribute value is the\n-- set '[1,2]', and the 'ADD' action specified '[3]', then the final attribute value\n-- is '[1,2,3]'. An error occurs if an 'ADD' action is specified for a set attribute\n-- and the attribute type specified does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, /Value/ must also be a set of strings.\n--\n-- If no item with the specified key is found in the table, the following\n-- values perform the following actions:\n--\n-- 'PUT' - Causes DynamoDB to create a new item with the specified primary key,\n-- and then adds the attribute.\n--\n-- 'DELETE' - Nothing happens, because attributes cannot be deleted from a\n-- nonexistent item. The operation succeeds, but DynamoDB does not create a new\n-- item.\n--\n-- 'ADD' - Causes DynamoDB to create an item with the supplied primary key and\n-- number (or set of numbers) for the attribute value. The only data types\n-- allowed are Number and Number Set.\n--\n-- If you provide any attributes that are part of an index key, then the\n-- data types for those attributes must match those of the schema in the table's\n-- attribute definition.",
                        "typeExposed": "HashMap Text AttributeValueUpdate",
                        "type": "Map Text AttributeValueUpdate"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionExpression",
                        "name": "_uiConditionExpression",
                        "shape": "ConditionExpression",
                        "locationName": "ConditionExpression",
                        "documentation": "-- | A condition that must be satisfied in order for a conditional update to\n-- succeed.\n--\n-- An expression can contain any of the following:\n--\n-- Boolean functions: 'attribute_exists | attribute_not_exists | contains |begins_with'\n--\n-- These function names are case-sensitive.\n--\n-- Comparison operators: ' = | \u003c\u003e | \u003c | \u003e | \u003c= | \u003e= | BETWEEN | IN'\n--\n-- Logical operators: 'AND | OR | NOT'\n--\n-- For more information on condition expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html Specifying Conditions\u003e\n-- in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiConditionalOperator",
                        "name": "_uiConditionalOperator",
                        "shape": "ConditionalOperator",
                        "locationName": "ConditionalOperator",
                        "documentation": "-- | There is a newer parameter available. Use /ConditionExpression/ instead. Note\n-- that if you use /ConditionalOperator/ and / ConditionExpression / at the same\n-- time, DynamoDB will return a /ValidationException/ exception.\n--\n-- A logical operator to apply to the conditions in the /Expected/ map:\n--\n-- 'AND' - If all of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- 'OR' - If at least one of the conditions evaluate to true, then the entire map\n-- evaluates to true.\n--\n-- If you omit /ConditionalOperator/, then 'AND' is the default.\n--\n-- The operation will succeed only if the entire map evaluates to true.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "Maybe ConditionalOperator",
                        "type": "Maybe ConditionalOperator"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpected",
                        "name": "_uiExpected",
                        "shape": "ExpectedAttributeMap",
                        "locationName": "Expected",
                        "documentation": "-- | There is a newer parameter available. Use / ConditionExpression / instead.\n-- Note that if you use /Expected/ and / ConditionExpression / at the same time,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- A map of attribute/condition pairs. /Expected/ provides a conditional block\n-- for the /UpdateItem/ operation.\n--\n-- Each element of /Expected/ consists of an attribute name, a comparison\n-- operator, and one or more values. DynamoDB compares the attribute with the\n-- value(s) you supplied, using the comparison operator. For each /Expected/\n-- element, the result of the evaluation is either true or false.\n--\n-- If you specify more than one element in the /Expected/ map, then by default\n-- all of the conditions must evaluate to true. In other words, the conditions\n-- are ANDed together. (You can use the /ConditionalOperator/ parameter to OR the\n-- conditions instead. If you do this, then at least one of the conditions must\n-- evaluate to true, rather than all of them.)\n--\n-- If the /Expected/ map evaluates to true, then the conditional operation\n-- succeeds; otherwise, it fails.\n--\n-- /Expected/ contains the following:\n--\n-- /AttributeValueList/ - One or more values to evaluate against the supplied\n-- attribute. The number of values in the list depends on the /ComparisonOperator/\n-- being used.\n--\n-- For type Number, value comparisons are numeric.\n--\n-- String value comparisons for greater than, equals, or less than are based on\n-- ASCII character code values. For example, 'a' is greater than 'A', and 'a' is\n-- greater than 'B'. For a list of code values, see \u003chttp://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters\u003e.\n--\n-- For type Binary, DynamoDB treats each byte of the binary data as unsigned\n-- when it compares binary values.\n--\n-- /ComparisonOperator/ - A comparator for evaluating attributes in the /AttributeValueList/. When performing the comparison, DynamoDB uses strongly consistent reads.\n--\n-- The following comparison operators are available:\n--\n-- 'EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS |BEGINS_WITH | IN | BETWEEN'\n--\n-- The following are descriptions of each comparison operator.\n--\n-- 'EQ' : Equal. 'EQ' is supported for all datatypes, including lists and maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, Binary, String Set, Number Set, or Binary Set. If an item\n-- contains an /AttributeValue/ element of a different type than the one provided\n-- in the request, the value does not match. For example, '{\"S\":\"6\"}' does not\n-- equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NE' : Not equal. 'NE' is supported for all datatypes, including lists and\n-- maps.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, Binary, String Set, Number Set, or Binary Set. If an item contains an /AttributeValue/ of a different type than the one provided in the request, the\n-- value does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not equal '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LE' : Less than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'LT' : Less than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String,\n-- Number, or Binary (not a set type). If an item contains an /AttributeValue/\n-- element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GE' : Greater than or equal.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'GT' : Greater than.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not equal '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'.\n--\n--\n--\n-- 'NOT_NULL' : The attribute exists. 'NOT_NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the existence of an attribute, not its data type. If\n-- the data type of attribute \"'a'\" is null, and you evaluate it using 'NOT_NULL',\n-- the result is a Boolean /true/. This result is because the attribute \"'a'\"\n-- exists; its data type is not relevant to the 'NOT_NULL' comparison operator.\n--\n-- 'NULL' : The attribute does not exist. 'NULL' is supported for all datatypes,\n-- including lists and maps.\n--\n-- This operator tests for the nonexistence of an attribute, not its data type.\n-- If the data type of attribute \"'a'\" is null, and you evaluate it using 'NULL',\n-- the result is a Boolean /false/. This is because the attribute \"'a'\" exists; its\n-- data type is not relevant to the 'NULL' comparison operator.\n--\n-- 'CONTAINS' : Checks for a subsequence, or value in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is of type String, then the operator checks for a substring match.\n-- If the target attribute of the comparison is of type Binary, then the\n-- operator looks for a subsequence of the target that matches the input. If the\n-- target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the\n-- operator evaluates to true if it finds an exact match with any member of the\n-- set.\n--\n-- CONTAINS is supported for lists: When evaluating \"'a CONTAINS b'\", \"'a'\" can be\n-- a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'NOT_CONTAINS' : Checks for absence of a subsequence, or absence of a value\n-- in a set.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ element of type\n-- String, Number, or Binary (not a set type). If the target attribute of the\n-- comparison is a String, then the operator checks for the absence of a\n-- substring match. If the target attribute of the comparison is Binary, then\n-- the operator checks for the absence of a subsequence of the target that\n-- matches the input. If the target attribute of the comparison is a set (\"'SS'\", \"'NS'\", or \"'BS'\"), then the operator evaluates to true if it /does not/ find an\n-- exact match with any member of the set.\n--\n-- NOT_CONTAINS is supported for lists: When evaluating \"'a NOT CONTAINS b'\", \"'a'\"\n-- can be a list; however, \"'b'\" cannot be a set, a map, or a list.\n--\n-- 'BEGINS_WITH' : Checks for a prefix.\n--\n-- /AttributeValueList/ can contain only one /AttributeValue/ of type String or\n-- Binary (not a Number or a set type). The target attribute of the comparison\n-- must be of type String or Binary (not a Number or a set type).\n--\n--\n--\n-- 'IN' : Checks for matching elements within two sets.\n--\n-- /AttributeValueList/ can contain one or more /AttributeValue/ elements of type\n-- String, Number, or Binary (not a set type). These attributes are compared\n-- against an existing set type attribute of an item. If any elements of the\n-- input set are present in the item attribute, the expression evaluates to true.\n--\n-- 'BETWEEN' : Greater than or equal to the first value, and less than or equal\n-- to the second value.\n--\n-- /AttributeValueList/ must contain two /AttributeValue/ elements of the same\n-- type, either String, Number, or Binary (not a set type). A target attribute\n-- matches if the target value is greater than, or equal to, the first element\n-- and less than, or equal to, the second element. If an item contains an /AttributeValue/ element of a different type than the one provided in the request, the value\n-- does not match. For example, '{\"S\":\"6\"}' does not compare to '{\"N\":\"6\"}'. Also, '{\"N\":\"6\"}' does not compare to '{\"NS\":[\"6\", \"2\", \"1\"]}'\n--\n-- For usage examples of /AttributeValueList/ and /ComparisonOperator/, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.html Legacy Conditional Parameters\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- For backward compatibility with previous DynamoDB releases, the following\n-- parameters can be used instead of /AttributeValueList/ and /ComparisonOperator/:\n--\n-- /Value/ - A value for DynamoDB to compare with an attribute.\n--\n-- /Exists/ - A Boolean value that causes DynamoDB to evaluate the value before\n-- attempting the conditional operation:\n--\n-- If /Exists/ is 'true', DynamoDB will check to see if that attribute value\n-- already exists in the table. If it is found, then the condition evaluates to\n-- true; otherwise the condition evaluate to false.\n--\n-- If /Exists/ is 'false', DynamoDB assumes that the attribute value does /not/\n-- exist in the table. If in fact the value does not exist, then the assumption\n-- is valid and the condition evaluates to true. If the value is found, despite\n-- the assumption that it does not exist, the condition evaluates to false.\n--\n-- Note that the default value for /Exists/ is 'true'.\n--\n-- The /Value/ and /Exists/ parameters are incompatible with /AttributeValueList/\n-- and /ComparisonOperator/. Note that if you use both sets of parameters at once,\n-- DynamoDB will return a /ValidationException/ exception.\n--\n-- This parameter does not support attributes of type List or Map.\n--",
                        "typeExposed": "HashMap Text ExpectedAttributeValue",
                        "type": "Map Text ExpectedAttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeNames",
                        "name": "_uiExpressionAttributeNames",
                        "shape": "ExpressionAttributeNameMap",
                        "locationName": "ExpressionAttributeNames",
                        "documentation": "-- | One or more substitution tokens for attribute names in an expression. The\n-- following are some use cases for using /ExpressionAttributeNames/:\n--\n-- To access an attribute whose name conflicts with a DynamoDB reserved word.\n--\n-- To create a placeholder for repeating occurrences of an attribute name in\n-- an expression.\n--\n-- To prevent special characters in an attribute name from being\n-- misinterpreted in an expression.\n--\n-- Use the # character in an expression to dereference an attribute name. For\n-- example, consider the following attribute name:\n--\n-- 'Percentile'\n--\n-- The name of this attribute conflicts with a reserved word, so it cannot be\n-- used directly in an expression. (For the complete list of reserved words, go\n-- to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html Reserved Words\u003e in the /Amazon DynamoDB Developer Guide/). To work around\n-- this, you could specify the following for /ExpressionAttributeNames/:\n--\n-- '{\"#P\":\"Percentile\"}'\n--\n-- You could then use this substitution in an expression, as in this example:\n--\n-- '#P = :val'\n--\n-- Tokens that begin with the : character are /expression attribute values/,\n-- which are placeholders for the actual value at runtime.\n--\n-- For more information on expression attribute names, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html Accessing ItemAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text Text",
                        "type": "Map Text Text"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiExpressionAttributeValues",
                        "name": "_uiExpressionAttributeValues",
                        "shape": "ExpressionAttributeValueMap",
                        "locationName": "ExpressionAttributeValues",
                        "documentation": "-- | One or more values that can be substituted in an expression.\n--\n-- Use the : (colon) character in an expression to dereference an attribute\n-- value. For example, suppose that you wanted to check whether the value of the /ProductStatus/ attribute was one of the following:\n--\n-- 'Available | Backordered | Discontinued'\n--\n-- You would first need to specify /ExpressionAttributeValues/ as follows:\n--\n-- '{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"},\":disc\":{\"S\":\"Discontinued\"} }'\n--\n-- You could then use these values in an expression, such as this:\n--\n-- 'ProductStatus IN (:avail, :back, :disc)'\n--\n-- For more information on expression attribute values, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html SpecifyingConditions\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": "_Map",
                        "lensMapping": "_Map",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiKey",
                        "name": "_uiKey",
                        "shape": "Key",
                        "locationName": "Key",
                        "documentation": "-- | The primary key of the item to be updated. Each element consists of an\n-- attribute name and a value for that attribute.\n--\n-- For the primary key, you must provide all of the attributes. For example,\n-- with a hash type primary key, you only need to provide the hash attribute.\n-- For a hash-and-range type primary key, you must provide both the hash\n-- attribute and the range attribute.",
                        "typeExposed": "HashMap Text AttributeValue",
                        "type": "Map Text AttributeValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnConsumedCapacity",
                        "name": "_uiReturnConsumedCapacity",
                        "shape": "ReturnConsumedCapacity",
                        "locationName": "ReturnConsumedCapacity",
                        "documentation": null,
                        "typeExposed": "Maybe ReturnConsumedCapacity",
                        "type": "Maybe ReturnConsumedCapacity"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnItemCollectionMetrics",
                        "name": "_uiReturnItemCollectionMetrics",
                        "shape": "ReturnItemCollectionMetrics",
                        "locationName": "ReturnItemCollectionMetrics",
                        "documentation": "-- | A value that if set to 'SIZE', the response includes statistics about item\n-- collections, if any, that were modified during the operation are returned in\n-- the response. If set to 'NONE' (the default), no statistics are returned.",
                        "typeExposed": "Maybe ReturnItemCollectionMetrics",
                        "type": "Maybe ReturnItemCollectionMetrics"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiReturnValues",
                        "name": "_uiReturnValues",
                        "shape": "ReturnValue",
                        "locationName": "ReturnValues",
                        "documentation": "-- | Use /ReturnValues/ if you want to get the item attributes as they appeared\n-- either before or after they were updated. For /UpdateItem/, the valid values\n-- are:\n--\n-- 'NONE' - If /ReturnValues/ is not specified, or if its value is 'NONE', then\n-- nothing is returned. (This setting is the default for /ReturnValues/.)\n--\n-- 'ALL_OLD' - If /UpdateItem/ overwrote an attribute name-value pair, then the\n-- content of the old item is returned.\n--\n-- 'UPDATED_OLD' - The old versions of only the updated attributes are returned.\n--\n-- 'ALL_NEW' - All of the attributes of the new version of the item are\n-- returned.\n--\n-- 'UPDATED_NEW' - The new versions of only the updated attributes are returned.\n--\n--",
                        "typeExposed": "Maybe ReturnValue",
                        "type": "Maybe ReturnValue"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "uiTableName",
                        "name": "_uiTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table containing the item to update.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "uiUpdateExpression",
                        "name": "_uiUpdateExpression",
                        "shape": "UpdateExpression",
                        "locationName": "UpdateExpression",
                        "documentation": "-- | An expression that defines one or more attributes to be updated, the action\n-- to be performed on them, and new value(s) for them.\n--\n-- The following action values are available for /UpdateExpression/.\n--\n-- 'SET' - Adds one or more attributes and values to an item. If any of these\n-- attribute already exist, they are replaced by the new values. You can also\n-- use 'SET' to add or subtract from an attribute that is of type Number.\n--\n-- 'SET' supports the following functions:\n--\n-- 'if_not_exists (path, operand)' - if the item does not contain an attribute\n-- at the specified path, then 'if_not_exists' evaluates to operand; otherwise, it\n-- evaluates to path. You can use this function to avoid overwriting an\n-- attribute that may already be present in the item.\n--\n-- 'list_append (operand, operand)' - evaluates to a list with a new element\n-- added to it. You can append the new element to the start or the end of the\n-- list by reversing the order of the operands.\n--\n-- These function names are case-sensitive.\n--\n-- 'REMOVE' - Removes one or more attributes from an item.\n--\n-- 'ADD' - Adds the specified value to the item, if the attribute does not\n-- already exist. If the attribute does exist, then the behavior of 'ADD' depends\n-- on the data type of the attribute:\n--\n-- If the existing attribute is a number, and if /Value/ is also a number, then /Value/ is mathematically added to the existing attribute. If /Value/ is a\n-- negative number, then it is subtracted from the existing attribute.\n--\n-- If you use 'ADD' to increment or decrement a number value for an item that\n-- doesn't exist before the update, DynamoDB uses '0' as the initial value.\n--\n-- Similarly, if you use 'ADD' for an existing item to increment or decrement an\n-- attribute value that doesn't exist before the update, DynamoDB uses '0' as the\n-- initial value. For example, suppose that the item you want to update doesn't\n-- have an attribute named /itemcount/, but you decide to 'ADD' the number '3' to this\n-- attribute anyway. DynamoDB will create the /itemcount/ attribute, set its\n-- initial value to '0', and finally add '3' to it. The result will be a new /itemcount/ attribute in the item, with a value of '3'.\n--\n-- If the existing data type is a set and if /Value/ is also a set, then /Value/\n-- is added to the existing set. For example, if the attribute value is the set '[1,2]', and the 'ADD' action specified '[3]', then the final attribute value is '[1,2,3]'. An error occurs if an\n-- 'ADD' action is specified for a set attribute and the attribute type specified\n-- does not match the existing set type.\n--\n-- Both sets must have the same primitive data type. For example, if the\n-- existing data type is a set of strings, the /Value/ must also be a set of\n-- strings.\n--\n-- The 'ADD' action only supports Number and set data types. In addition, 'ADD'\n-- can only be used on top-level attributes, not nested attributes.\n--\n-- 'DELETE' - Deletes an element from a set.\n--\n-- If a set of values is specified, then those values are subtracted from the\n-- old set. For example, if the attribute value was the set '[a,b,c]' and the 'DELETE' action specifies '[a,c]', then the final attribute value is '[b]'. Specifying an\n-- empty set is an error.\n--\n-- The 'DELETE' action only supports Number and set data types. In addition, 'DELETE' can only be used on top-level attributes, not nested attributes.\n--\n-- You can have many actions in a single expression, such as the following: 'SET a=:value1, b=:value2 DELETE :value3, :value4, :value5'\n--\n-- For more information on update expressions, go to \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html Modifying Items andAttributes\u003e in the /Amazon DynamoDB Developer Guide/.",
                        "typeExposed": "Maybe Text",
                        "type": "Maybe Text"
                    }
                ]
            }
        },
        {
            "service": "DynamoDB",
            "response": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "listElement": null,
                "style": "json",
                "fieldPad": 0,
                "ctor": "updateTableResponse",
                "headerPad": 0,
                "field": {
                    "location": null,
                    "iso": null,
                    "lensMapping": null,
                    "default": "Nothing",
                    "monoid": false,
                    "protocol": "json",
                    "flattened": false,
                    "required": false,
                    "lens": "utrTableDescription",
                    "name": "_utrTableDescription",
                    "shape": "TableDescription",
                    "locationName": "TableDescription",
                    "documentation": null,
                    "typeExposed": "Maybe TableDescription",
                    "type": "Maybe TableDescription"
                },
                "contents": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "utrTableDescription",
                        "name": "_utrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "wrapper": false,
                "protocol": "json",
                "payload": null,
                "required": [],
                "shared": false,
                "headers": [],
                "contentPad": 0,
                "name": "UpdateTableResponse",
                "resultWrapper": null,
                "locationPad": 0,
                "type": "newtype",
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "utrTableDescription",
                        "name": "_utrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "utrTableDescription",
                        "name": "_utrTableDescription",
                        "shape": "TableDescription",
                        "locationName": "TableDescription",
                        "documentation": null,
                        "typeExposed": "Maybe TableDescription",
                        "type": "Maybe TableDescription"
                    }
                ]
            },
            "url": "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateTable.html",
            "namespace": "Network.AWS.DynamoDB.UpdateTable",
            "protocol": "json",
            "imports": [
                "Network.AWS.Request.JSON",
                "Network.AWS.DynamoDB.Types"
            ],
            "pager": null,
            "name": "UpdateTable",
            "method": "post",
            "documentation": "-- | Updates the provisioned throughput for the given table, or manages the global\n-- secondary indexes on the table.\n--\n-- You can increase or decrease the table's provisioned throughput values\n-- within the maximums and minimums listed in the \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html Limits\u003e section in the /AmazonDynamoDB Developer Guide/.\n--\n-- In addition, you can use /UpdateTable/ to add, modify or delete global\n-- secondary indexes on the table. For more information, see \u003chttp://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html Managing GlobalSecondary Indexes\u003e in the /Amazon DynamoDB Developer Guide/.\n--\n-- The table must be in the 'ACTIVE' state for /UpdateTable/ to succeed. /UpdateTable/\n-- is an asynchronous operation; while executing the operation, the table is in\n-- the 'UPDATING' state. While the table is in the 'UPDATING' state, the table still\n-- has the provisioned throughput from before the call. The table's new\n-- provisioned throughput settings go into effect when the table returns to the 'ACTIVE' state; at that point, the /UpdateTable/ operation is complete.",
            "documentationUrl": null,
            "request": {
                "deriving": [
                    "Eq",
                    "Read",
                    "Show"
                ],
                "streaming": false,
                "style": "json",
                "fieldPad": 30,
                "ctor": "updateTable",
                "headerPad": 0,
                "contents": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utAttributeDefinitions",
                        "name": "_utAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of attributes that describe the key schema for the table and\n-- indexes. If you are adding a new global secondary index to the table, /AttributeDefinitions/ must include the key element(s) of the new index.",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utTableName",
                        "name": "_utTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to be updated.",
                        "typeExposed": "Text",
                        "type": "Text"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "utProvisionedThroughput",
                        "name": "_utProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughput",
                        "type": "Maybe ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utGlobalSecondaryIndexUpdates",
                        "name": "_utGlobalSecondaryIndexUpdates",
                        "shape": "GlobalSecondaryIndexUpdateList",
                        "locationName": "GlobalSecondaryIndexUpdates",
                        "documentation": "-- | An array of one or more global secondary indexes for the table. For each\n-- index in the array, you can request one action:\n--\n-- /Create/ - add a new global secondary index to the table.\n--\n-- /Update/ - modify the provisioned throughput settings of an existing global\n-- secondary index.\n--\n-- /Delete/ - remove a global secondary index from the table.\n--\n--",
                        "typeExposed": "[GlobalSecondaryIndexUpdate]",
                        "type": "List \"GlobalSecondaryIndexUpdates\" GlobalSecondaryIndexUpdate"
                    }
                ],
                "path": [
                    {
                        "value": "/",
                        "type": "const"
                    }
                ],
                "protocol": "json",
                "payload": null,
                "required": [
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utTableName",
                        "name": "_utTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to be updated.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ],
                "shared": false,
                "headers": [],
                "contentPad": 28,
                "queryPad": 0,
                "name": "UpdateTable",
                "query": [],
                "locationPad": 28,
                "type": "record",
                "queryAll": false,
                "headerAll": false,
                "optional": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utAttributeDefinitions",
                        "name": "_utAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of attributes that describe the key schema for the table and\n-- indexes. If you are adding a new global secondary index to the table, /AttributeDefinitions/ must include the key element(s) of the new index.",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "utProvisionedThroughput",
                        "name": "_utProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughput",
                        "type": "Maybe ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utGlobalSecondaryIndexUpdates",
                        "name": "_utGlobalSecondaryIndexUpdates",
                        "shape": "GlobalSecondaryIndexUpdateList",
                        "locationName": "GlobalSecondaryIndexUpdates",
                        "documentation": "-- | An array of one or more global secondary indexes for the table. For each\n-- index in the array, you can request one action:\n--\n-- /Create/ - add a new global secondary index to the table.\n--\n-- /Update/ - modify the provisioned throughput settings of an existing global\n-- secondary index.\n--\n-- /Delete/ - remove a global secondary index from the table.\n--\n--",
                        "typeExposed": "[GlobalSecondaryIndexUpdate]",
                        "type": "List \"GlobalSecondaryIndexUpdates\" GlobalSecondaryIndexUpdate"
                    }
                ],
                "fields": [
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utAttributeDefinitions",
                        "name": "_utAttributeDefinitions",
                        "shape": "AttributeDefinitions",
                        "locationName": "AttributeDefinitions",
                        "documentation": "-- | An array of attributes that describe the key schema for the table and\n-- indexes. If you are adding a new global secondary index to the table, /AttributeDefinitions/ must include the key element(s) of the new index.",
                        "typeExposed": "[AttributeDefinition]",
                        "type": "List \"AttributeDefinitions\" AttributeDefinition"
                    },
                    {
                        "location": null,
                        "iso": "_List",
                        "lensMapping": "_List",
                        "default": "mempty",
                        "monoid": true,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utGlobalSecondaryIndexUpdates",
                        "name": "_utGlobalSecondaryIndexUpdates",
                        "shape": "GlobalSecondaryIndexUpdateList",
                        "locationName": "GlobalSecondaryIndexUpdates",
                        "documentation": "-- | An array of one or more global secondary indexes for the table. For each\n-- index in the array, you can request one action:\n--\n-- /Create/ - add a new global secondary index to the table.\n--\n-- /Update/ - modify the provisioned throughput settings of an existing global\n-- secondary index.\n--\n-- /Delete/ - remove a global secondary index from the table.\n--\n--",
                        "typeExposed": "[GlobalSecondaryIndexUpdate]",
                        "type": "List \"GlobalSecondaryIndexUpdates\" GlobalSecondaryIndexUpdate"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "Nothing",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": false,
                        "lens": "utProvisionedThroughput",
                        "name": "_utProvisionedThroughput",
                        "shape": "ProvisionedThroughput",
                        "locationName": "ProvisionedThroughput",
                        "documentation": null,
                        "typeExposed": "Maybe ProvisionedThroughput",
                        "type": "Maybe ProvisionedThroughput"
                    },
                    {
                        "location": null,
                        "iso": null,
                        "lensMapping": null,
                        "default": "error",
                        "monoid": false,
                        "protocol": "json",
                        "flattened": false,
                        "required": true,
                        "lens": "utTableName",
                        "name": "_utTableName",
                        "shape": "TableName",
                        "locationName": "TableName",
                        "documentation": "-- | The name of the table to be updated.",
                        "typeExposed": "Text",
                        "type": "Text"
                    }
                ]
            }
        }
    ]
}