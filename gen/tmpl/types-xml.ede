{% include "_include/exports-type.ede" %}

import           Network.AWS.Prelude
import           Network.AWS.Signing.{{ signature }}
import           Network.AWS.Types     (Region)
import qualified Network.AWS.Types.Map as Map
{% for module in static %}
import           {{ module.value }}
{% endfor %}

{% include "_include/service.ede" %}

xmlOptions :: Tagged a XMLOptions
xmlOptions = Tagged def
{% if xml_namespace %}
    { xmlNamespace = Just "{{ xml_namespace }}"
    }
{% endif %}

{% for data in types %}
  {% case data.value.ctor %}
  {% when "switch" %}
data {{ data.value.name }}

instance FromText (Switch {{ data.value.name }}) where
    {% for branch in data.value.values %}
      {% if branch.first %}
    parser = match "{{ branch.value }}" {{ branch.key }}
      {% else %}
         <|> match "{{ branch.value }}" {{ branch.key }}
      {% endif %}
    {% endfor %}

instance ToText (Switch {{ data.value.name }}) where
    {% for branch in data.value.values %}
    toText {{ branch.key }} = "{{ branch.value }}"
    {% endfor %}

instance ToByteString (Switch {{ data.value.name }})
  {% if data.value.direction.response %}

instance FromXML (Switch {{ data.value.name }}) where
    {% if data.value.flattened %}
    fromXMLOptions = xmlOptions { xmlListElem = Nothing }
 {% else %}
    fromXMLOptions = xmlOptions
    {% endif %}
    fromXMLRoot    = fromRoot "{{ data.value.xml_name }}"
  {% endif %}
  {% if data.value.direction.request %}

instance ToXML (Switch {{ data.value.name }}) where
    {% if data.value.flattened %}
    toXMLOptions = xmlOptions { xmlListElem = Nothing }
    {% else %}
    toXMLOptions = xmlOptions
    {% endif %}
    toXMLRoot    = toRoot "{{ data.value.xml_name }}"
  {% endif %}
    {% when "witness" %}
data {{ data.value.name }}
    {% when "sum" %}
data {{ data.value.name }}
      {% for branch in data.value.values %}
        {% if branch.first %}
    = {{ branch.key }} -- ^ {{ branch.value }}
        {% else %}
    | {{ branch.key }} -- ^ {{ branch.value }}
        {% endif %}
      {% endfor %}
      deriving (Eq, Show, Generic)

instance Hashable {{ data.value.name }}

instance FromText {{ data.value.name }} where
      {% for branch in data.value.values %}
        {% if branch.first %}
    parser = match "{{ branch.value }}" {{ branch.key }}
        {% else %}
         <|> match "{{ branch.value }}" {{ branch.key }}
        {% endif %}
      {% endfor %}

instance ToText {{ data.value.name }} where
      {% for branch in data.value.values %}
    toText {{ branch.key }} = "{{ branch.value }}"
      {% endfor %}

instance ToByteString {{ data.value.name }}
    {% include "_include/xml-from.ede" with data.value %}
    {% include "_include/xml-to.ede" with data.value %}

instance ToQuery {{ data.value.name }} where
      toQuery = toQuery . toBS
    {% else %}
      {% include "_include/record-type.ede" with data.value %}
      {% include "_include/xml-from.ede" with data.value %}
      {% include "_include/xml-to.ede" with data.value %}
    {% endcase %}
  {% if !data.last %}

  {% endif %}
{% endfor %}
