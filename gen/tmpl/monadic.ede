{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE NoImplicitPrelude #-}

{% include "_include/license.ede" with ns.monadic %}

-- | This module is provided for convenience. It offers an alternative to the
-- common idiom of supplying required fields to an operations's smart constructor,
-- using the operation's lenses to modify additional fields, and then sending
-- or paginating the request.
--
-- As an example: using "Network.AWS.{{ name }}" with the smart constructor and
-- basic lens syntax, before explicitly calling 'send':
--
-- @
-- import Control.Monad.Trans.AWS
-- import Network.AWS.{{ name }}
--
-- send $ (mkOperationName w x)
--      & onLensField1 .~ y
--      & onLensField2 .~ z
-- @
--
-- Versus using "{{ ns.monadic }}" with lenses to modify any optional request
-- parameters before sending:
--
-- @
-- import {{ ns.monadic }}
--
-- operationName w x
--     & onLensField1 .~ y
--     & onLensField2 .~ z
--
-- -- Or to void any additional parameters outside of those required using @id@:
-- operationName w x id
-- @
--
-- Additionaly this module hides the type family machinery for determining
-- response and error types behind the actual concrete types for each operation.
module {{ ns.monadic }}
    (
{% for oper in operations %}
  {% if oper.first %}
    -- * {{ oper.value.request.name }}
    -- ${{oper.value.request.name }}
      {{ oper.value.request.function }}
    , {{ oper.value.request.function }}Catch
  {% else %}
    -- * {{ oper.value.request.name }}
    -- ${{oper.value.request.name }}
    , {{ oper.value.request.function }}
    , {{ oper.value.request.function }}Catch
  {% endif %}

{% endfor %}
    -- * Re-exported
    , module {{ ns.root }}

    , (.~)
    , (?~)
    , (<>~)
    , (%~)
    ) where

import Control.Monad.Trans.AWS as AWS
import Network.AWS.Prelude
import {{ ns.root }}

{% for oper in operations %}
{% include "_include/state-operation.ede" with oper.value %}
{% endfor %}
