  {% if type.documentation %}
{{ type.documentation | above(76, 0) }}
  {% endif %}
data {{ type.name }}
    {% for branch in type.branches %}
    {% if branch.first %}={% else %}|{% endif %} {{ branch.key | justifyLeft(type.branchPad) }} -- ^ {{ branch.value }}
    {% endfor %}
      deriving{% include "../_include/deriving.ede" %}
instance Hashable {{ type.name }}

instance FromText {{ type.name }} where
    {% for branch in type.branches %}
      {% if branch.first %}
    parser = match "{{ branch.value | concat("\"") | justifyLeft(type.valuePad) }} {{ branch.key }}
      {% else %}
         <|> match "{{ branch.value | concat("\"") | justifyLeft(type.valuePad) }} {{ branch.key }}
      {% endif %}
    {% endfor %}

instance ToText {{ type.name }} where
  {% if (type.branches | length) == 1 %}
    {% for branch in type.branches %}
    toText {{ branch.key }} = "{{ branch.value }}"
    {% endfor %}
  {% else %}
    toText = \case
    {% for branch in type.branches %}
        {{ branch.key | justifyLeft(type.branchPad) }} -> "{{ branch.value }}"
    {% endfor %}
  {% endif %}

instance ToByteString {{ type.name }}
instance ToHeader     {{ type.name }}
