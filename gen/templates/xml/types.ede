{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase                 #-}
{-# LANGUAGE OverloadedStrings          #-}

{% include "../_include/license.ede" %}

module {{ namespace }} where

import Network.AWS.Prelude

{% for type in types %}
  {% if type.value.documentation %}
{{ type.value.documentation | above(76, 0) }}
  {% endif %}
  {% case type.value.type %}
  {% when "record" %}
data {{ type.value.name }} = {{ type.value.name }}
    {% for field in type.value.fields %}
    {% if field.first %}{ {% else %}, {% endif %}{{ field.value.name }} :: {{ field.value.type }}
  {% if field.value.documentation %}
{{ field.value.documentation | below(68, 6) }}
  {% endif %}
    {% endfor %}
    } deriving {% include "../_include/deriving.ede" with deriving = type.value.deriving %}
  {% when "newtype" %}
newtype {{ type.value.name }} = {{ type.value.name }}
    { {{ type.value.field.name }} :: {{ type.value.field.type }}
    } deriving {% include "../_include/deriving.ede" with deriving = type.value.deriving %}
  {% when "nullary" %}
data {{ type.value.name }}
    {% for branch in type.value.branches %}
    {% if branch.first %}={% else %}|{% endif %} {{ branch.key }} -- ^ {{ branch.value }}
    {% endfor %}
      deriving {% include "../_include/deriving.ede" with deriving = type.value.deriving %}

instance Hashable {{ type.value.name }}

instance FromText {{ type.value.name }} where
    {% for branch in type.value.branches %}
      {% if branch.first %}
    parser = match "{{ branch.value }}" {{ branch.key }}
      {% else %}
         <|> match "{{ branch.value }}" {{ branch.key }}
      {% endif %}
    {% endfor %}

instance ToText {{ type.value.name }} where
    toText = \case
    {% for branch in type.value.branches %}
        {{ branch.key }} -> "{{ branch.value }}"
    {% endfor %}
  {% endcase %}
  {% if !type.last %}

  {% endif %}
{% endfor %}
