{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TypeFamilies       #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.STS.Types.Product
-- Copyright   : (c) 2013-2015 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>
-- Stability   : experimental
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.STS.Types.Product where

import           Network.AWS.Prelude
import           Network.AWS.STS.Types.Sum

-- | The identifiers for the temporary security credentials that the
-- operation returns.
--
-- /See:/ 'assumedRoleUser' smart constructor.
--
-- The fields accessible through corresponding lenses are:
--
-- * 'aruAssumedRoleId'
--
-- * 'aruARN'
data AssumedRoleUser = AssumedRoleUser'
    { _aruAssumedRoleId :: !Text
    , _aruARN           :: !Text
    } deriving (Eq,Read,Show,Data,Typeable,Generic)

-- | 'AssumedRoleUser' smart constructor.
assumedRoleUser :: Text -> Text -> AssumedRoleUser
assumedRoleUser pAssumedRoleId pARN =
    AssumedRoleUser'
    { _aruAssumedRoleId = pAssumedRoleId
    , _aruARN = pARN
    }

-- | A unique identifier that contains the role ID and the role session name
-- of the role that is being assumed. The role ID is generated by AWS when
-- the role is created.
aruAssumedRoleId :: Lens' AssumedRoleUser Text
aruAssumedRoleId = lens _aruAssumedRoleId (\ s a -> s{_aruAssumedRoleId = a});

-- | The ARN of the temporary security credentials that are returned from the
-- AssumeRole action. For more information about ARNs and how to use them
-- in policies, see
-- <http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html IAM Identifiers>
-- in /Using IAM/.
aruARN :: Lens' AssumedRoleUser Text
aruARN = lens _aruARN (\ s a -> s{_aruARN = a});

instance FromXML AssumedRoleUser where
        parseXML x
          = AssumedRoleUser' <$>
              (x .@ "AssumedRoleId") <*> (x .@ "Arn")

-- | AWS credentials for API authentication.
--
-- /See:/ 'credentials' smart constructor.
--
-- The fields accessible through corresponding lenses are:
--
-- * 'creAccessKeyId'
--
-- * 'creSecretAccessKey'
--
-- * 'creSessionToken'
--
-- * 'creExpiration'
data Credentials = Credentials'
    { _creAccessKeyId     :: !Text
    , _creSecretAccessKey :: !Text
    , _creSessionToken    :: !Text
    , _creExpiration      :: !ISO8601
    } deriving (Eq,Read,Show,Data,Typeable,Generic)

-- | 'Credentials' smart constructor.
credentials :: Text -> Text -> Text -> UTCTime -> Credentials
credentials pAccessKeyId pSecretAccessKey pSessionToken pExpiration =
    Credentials'
    { _creAccessKeyId = pAccessKeyId
    , _creSecretAccessKey = pSecretAccessKey
    , _creSessionToken = pSessionToken
    , _creExpiration = _Time # pExpiration
    }

-- | The access key ID that identifies the temporary security credentials.
creAccessKeyId :: Lens' Credentials Text
creAccessKeyId = lens _creAccessKeyId (\ s a -> s{_creAccessKeyId = a});

-- | The secret access key that can be used to sign requests.
creSecretAccessKey :: Lens' Credentials Text
creSecretAccessKey = lens _creSecretAccessKey (\ s a -> s{_creSecretAccessKey = a});

-- | The token that users must pass to the service API to use the temporary
-- credentials.
creSessionToken :: Lens' Credentials Text
creSessionToken = lens _creSessionToken (\ s a -> s{_creSessionToken = a});

-- | The date on which the current credentials expire.
creExpiration :: Lens' Credentials UTCTime
creExpiration = lens _creExpiration (\ s a -> s{_creExpiration = a}) . _Time;

instance FromXML Credentials where
        parseXML x
          = Credentials' <$>
              (x .@ "AccessKeyId") <*> (x .@ "SecretAccessKey") <*>
                (x .@ "SessionToken")
                <*> (x .@ "Expiration")

-- | Identifiers for the federated user that is associated with the
-- credentials.
--
-- /See:/ 'federatedUser' smart constructor.
--
-- The fields accessible through corresponding lenses are:
--
-- * 'fuFederatedUserId'
--
-- * 'fuARN'
data FederatedUser = FederatedUser'
    { _fuFederatedUserId :: !Text
    , _fuARN             :: !Text
    } deriving (Eq,Read,Show,Data,Typeable,Generic)

-- | 'FederatedUser' smart constructor.
federatedUser :: Text -> Text -> FederatedUser
federatedUser pFederatedUserId pARN =
    FederatedUser'
    { _fuFederatedUserId = pFederatedUserId
    , _fuARN = pARN
    }

-- | The string that identifies the federated user associated with the
-- credentials, similar to the unique ID of an IAM user.
fuFederatedUserId :: Lens' FederatedUser Text
fuFederatedUserId = lens _fuFederatedUserId (\ s a -> s{_fuFederatedUserId = a});

-- | The ARN that specifies the federated user that is associated with the
-- credentials. For more information about ARNs and how to use them in
-- policies, see
-- <http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html IAM Identifiers>
-- in /Using IAM/.
fuARN :: Lens' FederatedUser Text
fuARN = lens _fuARN (\ s a -> s{_fuARN = a});

instance FromXML FederatedUser where
        parseXML x
          = FederatedUser' <$>
              (x .@ "FederatedUserId") <*> (x .@ "Arn")
