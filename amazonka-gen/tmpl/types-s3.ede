{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies      #-}

{% include "_include/license.ede" with types_namespace %}

{% if documentation %}
{{ documentation }}
{% endif %}
module {{ types_namespace }} where

import Control.Applicative
import Data.Text (Text)
import GHC.Generics
import Network.AWS.Data
import Network.AWS.Signing.{{ signature }}
import Network.AWS.Types hiding (Error)

-- | Supported version (@{{ raw_version }}@) of the
-- @{{ full_name }}@ service.
data {{ name }}

instance AWSService {{ name }} where
    type Sg {{ name }} = {{ signature }}

    service = Service
        { _svcEndpoint = {% if global_endpoint -%} Global{% else -%} Regional{% endif -%}
        , _svcPrefix   = "{{ endpoint_prefix }}"
        , _svcVersion  = "{{ raw_version }}"
        , _svcTarget   = {% if target_prefix -%} (Just "{{ target_prefix }}"){% else -%} Nothing {% endif -%}
        }

{% if error.shapes | listLength == 0 %}
data instance Er {{ name }} = {{ error.name }}
    deriving (Show, Generic)
{% else %}
data instance Er {{ name }}
  {% for ctor in error.ctors %}
    {% if ctor.first %}
    = {{ ctor.key }} {% include "_include/error.ede" with ctor.value.fields %}
    {% else %}
    | {{ ctor.key }} {% include "_include/error.ede" with ctor.value.fields %}
    {% endif %}
  {% endfor %}
      deriving (Show, Generic)
{% endif %}

instance AWSError (Er S3) where
    awsError = const "{{ error.name }}"

instance ServiceError (Er S3) where
    serviceError = {{ name }}Error
    clientError  = {{ name }}Protocol

{% for data in types %}
  {% if data.value.documentation %}
{{ data.value.documentation | above76 }}
  {% endif %}
  {% case data.value.name %}
  {% when "BucketLocationConstraint" %}
newtype {{ data.value.name }} = {{ data.value.name }} Region
    deriving (Eq, Show, Generic)
  {% else %}
    {% case data.value.ctor %}
    {% when "witness" %}
data {{ data.value.name }}
    {% when "sum" %}
data {{ data.value.name }}
      {% for branch in data.value.values %}
        {% if branch.first %}
    = {{ branch.key }} -- ^ {{ branch.value }}
        {% else %}
    | {{ branch.key }} -- ^ {{ branch.value }}
        {% endif %}
      {% endfor %}
      deriving (Eq, Show, Generic)

instance FromText {{ data.value.name }} where
      {% for branch in data.value.values %}
        {% if branch.first %}
    parser = matchText "{{ branch.value }}" {{ branch.key }}
        {% else %}
         <|> matchText "{{ branch.value }}" {{ branch.key }}
        {% endif %}
      {% endfor %}

instance ToText {{ data.value.name }} where
      {% for branch in data.value.values %}
    toText {{ branch.key }} = "{{ branch.value }}"
      {% endfor %}

instance ToByteString {{ data.value.name }} where
      {% for branch in data.value.values %}
    toBS {{ branch.key }} = "{{ branch.value }}"
      {% endfor %}

instance FromHeader {{ data.value.name }}
    {% when "newtype" %}
newtype {{ data.value.name }} = {{ data.value.name }}
  {% include "_include/record.ede" with data.value.fields %}
    {% when "data" %}
data {{ data.value.name }} = {{ data.value.name }}
  {% include "_include/record.ede" with data.value.fields %}
    {% when "nullary" %}
data {{ data.value.name }} = {{ data.value.name }}
    {% endcase %}
  {% endcase %}
  {% if !data.last %}

  {% endif %}
{% endfor %}
