{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE FlexibleInstances  #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE TypeFamilies       #-}

{% include "_include/license.ede" with types_namespace %}

{% if documentation %}
{{ documentation }}
{% endif %}
module {{ types_namespace }} where

import Control.Applicative
import Control.Exception      (Exception)
import Data.Default
import Data.Tagged
import Data.Text              (Text)
import Data.Typeable
import GHC.Generics
import Network.AWS.Data
import Network.AWS.Signing.{{ signature }}
import Network.AWS.Types      hiding (Error)
import Network.HTTP.Client    (HttpException)

-- | Supported version (@{{ raw_version }}@) of the
-- @{{ full_name }}@ service.
data {{ name }} deriving (Typeable)

instance AWSService {{ name }} where
    type Sg {{ name }} = {{ signature }}
    {% if error.shapes | listLength == 0 %}
    data Er {{ name }} = {{ error.name }}
    {% else %}
    data Er {{ name }}
      {% for ctor in error.ctors %}
        {% if ctor.first %}
        = {{ ctor.key }} {% include "_include/error.ede" with ctor.value.fields %}
        {% else %}
        | {{ ctor.key }} {% include "_include/error.ede" with ctor.value.fields %}
        {% endif %}
      {% endfor %}
    {% endif %}

    service = Service
        { _svcEndpoint = {% if global_endpoint -%} Global{% else -%} Regional{% endif -%}
        , _svcPrefix   = "{{ endpoint_prefix }}"
        , _svcVersion  = "{{ raw_version }}"
        , _svcTarget   = {% if target_prefix -%} (Just "{{ target_prefix }}"){% else -%} Nothing {% endif -%}
        }

deriving instance Show     (Er S3)
deriving instance Generic  (Er S3)

instance AWSError (Er S3) where
    awsError = const "{{ error.name }}"

instance ServiceError (Er S3) where
    serviceError    = {{ name }}Service
    clientError     = {{ name }}Client
    serializerError = {{ name }}Serializer

instance Exception (Er S3)

xmlOptions :: Tagged a XMLOptions
xmlOptions = Tagged def
{% if xml_namespace %}
    { xmlNamespace = Just "{{ xml_namespace }}"
    }
{% endif %}

{% for data in types %}
  {% if data.value.documentation %}
{{ data.value.documentation | above76 }}
  {% endif %}
  {% case data.value.name %}
  {% when "BucketLocationConstraint" %}
newtype {{ data.value.name }} = {{ data.value.name }} Region
    deriving (Eq, Show, Generic)

instance FromText {{ data.value.name }} where
    parser = {{ data.value.name }} <$> parser

instance ToText {{ data.value.name }} where
    toText ({{ data.value.name }} r) = toText r

instance ToByteString {{ data.value.name }} where
    toBS ({{ data.value.name }} r) = toBS r

instance FromXML {{ data.value.name }} where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "{{ data.value.name }}"
    fromXML        = const fromNodeContent

instance ToXML {{ data.value.name }} where
    toXMLOptions = xmlOptions
    toXMLRoot    = toRoot "{{ data.value.name }}"
    toXML o      = toXML (retag o) . toText
  {% else %}
    {% case data.value.ctor %}
    {% when "switch" %}
data {{ data.value.name }}

instance FromText (Switch {{ data.value.name }}) where
      {% for branch in data.value.values %}
        {% if branch.first %}
    parser = match "{{ branch.value }}" {{ branch.key }}
        {% else %}
         <|> match "{{ branch.value }}" {{ branch.key }}
        {% endif %}
      {% endfor %}

instance ToText (Switch {{ data.value.name }}) where
      {% for branch in data.value.values %}
    toText {{ branch.key }} = "{{ branch.value }}"
      {% endfor %}

instance ToByteString (Switch {{ data.value.name }}) where
      {% for branch in data.value.values %}
    toBS {{ branch.key }} = "{{ branch.value }}"
      {% endfor %}

instance FromXML (Switch {{ data.value.name }}) where
    {% include "_include/xml-from.ede" with data.value %}

instance ToXML (Switch {{ data.value.name }}) where
    {% include "_include/xml-to.ede" with data.value %}
    {% when "witness" %}
data {{ data.value.name }}
    {% when "sum" %}
data {{ data.value.name }}
      {% for branch in data.value.values %}
        {% if branch.first %}
    = {{ branch.key }} -- ^ {{ branch.value }}
        {% else %}
    | {{ branch.key }} -- ^ {{ branch.value }}
        {% endif %}
      {% endfor %}
      deriving (Eq, Show, Generic)

instance FromText {{ data.value.name }} where
      {% for branch in data.value.values %}
        {% if branch.first %}
    parser = match "{{ branch.value }}" {{ branch.key }}
        {% else %}
         <|> match "{{ branch.value }}" {{ branch.key }}
        {% endif %}
      {% endfor %}

instance ToText {{ data.value.name }} where
      {% for branch in data.value.values %}
    toText {{ branch.key }} = "{{ branch.value }}"
      {% endfor %}

instance ToByteString {{ data.value.name }} where
      {% for branch in data.value.values %}
    toBS {{ branch.key }} = "{{ branch.value }}"
      {% endfor %}

instance FromXML {{ data.value.name }} where
    {% include "_include/xml-from.ede" with data.value %}

instance ToXML {{ data.value.name }} where
    {% include "_include/xml-to.ede" with data.value %}
    {% when "newtype" %}
newtype {{ data.value.name }} = {{ data.value.name }}
    {% include "_include/record.ede" with data.value.fields %}

instance FromXML {{ data.value.name }} where
    {% include "_include/xml-from.ede" with data.value %}

instance ToXML {{ data.value.name }} where
    {% include "_include/xml-to.ede" with data.value %}
    {% when "data" %}
data {{ data.value.name }} = {{ data.value.name }}
    {% include "_include/record.ede" with data.value.fields %}

instance FromXML {{ data.value.name }} where
    {% include "_include/xml-from.ede" with data.value %}

instance ToXML {{ data.value.name }} where
    {% include "_include/xml-to.ede" with data.value %}
    {% when "nullary" %}
data {{ data.value.name }} = {{ data.value.name }}

instance FromXML {{ data.value.name }} where
  {% include "_include/xml-from.ede" with data.value %}

instance ToXML {{ data.value.name }} where
  {% include "_include/xml-to.ede" with data.value %}
    {% endcase %}
  {% endcase %}
  {% if !data.last %}

  {% endif %}
{% endfor %}
