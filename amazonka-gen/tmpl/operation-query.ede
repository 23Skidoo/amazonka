{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}

{% include "_include/license.ede" with namespace %}

{% if documentation %}
{{ documentation | above76 }}
{% endif %}
module {{ namespace }} where

import Control.Lens.TH (makeLenses)
import {{ request_namespace }}
import {{ types_namespace }}
import Network.AWS.Prelude
{% if alias %}

type {{ alias }} = {{ request.name }}
{% endif %}
{% include "_include/method.ede" with request %}

data {{ request.name }} = {{ request.name }}
{% include "_include/record.ede" with request.fields %}

makeLenses ''{{ request.name }}

instance ToQuery {{ request.name }} where
    toQuery = genericQuery def

data {{ response.name }} = {{ response.name }}
{% include "_include/record.ede" with response.fields %}

makeLenses ''{{ response.name }}
{% if response.type == "xml" %}

instance FromXML {{ response.name }} where
    fromXMLOptions = xmlOptions
{% endif %}

instance AWSRequest {{ request.name }} where
    type Sv {{ request.name }} = {{ service }}
    type Rs {{ request.name }} = {{ response.name }}

    request = post "{{ request.name }}"
{% include "_include/response.ede" %}
{% include "_include/pager.ede" %}
