#!/usr/bin/env python

import json
import os
import shutil
import argparse

from subprocess import check_output


try:
    DirectoryExistsError = FileExistsError
except NameError:
    DirectoryExistsError = OSError


def output_filename(dest_dir, filename):
    with open(filename, 'r') as json_file:
        data = json.load(json_file)

    service = os.path.basename(filename).replace('.json', '')
    filename = os.path.join(service, data['api_version'] + '.json')

    return os.path.join(dest_dir, filename)

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('--services', required=True)
    parser.add_argument('--destination', required=True)
    parser.add_argument('--overrides', required=True)
    parser.add_argument('--script', required=True)

    args         = parser.parse_args()
    services_dir = args.services
    dest_dir     = args.destination
    override_ext = '.extra.json'
    override_dir = args.overrides
    build_script = os.path.abspath(args.script)

    assert os.path.isdir(services_dir)
    assert os.path.isfile(build_script)

    if not os.path.isdir(dest_dir):
        os.makedirs(dest_dir)

    for filename in os.listdir(services_dir):
        service_filename = os.path.join(services_dir, filename)

        if not os.path.isfile(service_filename):
            print("Skipping file: %s" % filename)
            continue

        if filename.startswith('_') and filename.endswith('.json'):
            dest = os.path.join(services_dir, filename)
            print("Copying '%s' to '%s'" % (service_filename, dest))

            try:
                shutil.copyfile(src=service_filename, dst=dest)
            except Exception:
                pass

        elif filename.endswith('.json') and filename.count('.') == 1:
            (extra_name, ext) = os.path.splitext(filename)
            extra_file        = os.path.join(override_dir, extra_name + override_ext)

            enhance = ''

            if os.path.isfile(extra_file):
                enhance = '--enhancements-file %s' % extra_file

            build = '%s %s %s' % (build_script, service_filename, enhance)

            try:
                print("Running command: %s" % build)
                model = check_output(build, shell=True).decode('utf-8')
            except Exception:
                continue

            filename = output_filename(dest_dir, service_filename)

            try:
                os.makedirs(os.path.dirname(filename))
            except DirectoryExistsError:
                pass

            with open(filename, 'w') as f:
                f.write(model)


if __name__ == '__main__':
    main()
