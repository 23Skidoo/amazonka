{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TypeFamilies       #-}

{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.Redshift.CreateEventSubscription
-- Copyright   : (c) 2013-2015 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>
-- Stability   : experimental
-- Portability : non-portable (GHC extensions)
--
-- Creates an Amazon Redshift event notification subscription. This action
-- requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by
-- either the Amazon Redshift console, the Amazon SNS console, or the
-- Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a
-- topic in Amazon SNS and subscribe to the topic. The ARN is displayed in
-- the SNS console.
--
-- You can specify the source type, and lists of Amazon Redshift source
-- IDs, event categories, and event severities. Notifications will be sent
-- for all events you want that match those criteria. For example, you can
-- specify source type = cluster, source ID = my-cluster-1 and mycluster2,
-- event categories = Availability, Backup, and severity = ERROR. The
-- subscription will only send notifications for those ERROR events in the
-- Availability and Backup categories for the specified clusters.
--
-- If you specify both the source type and source IDs, such as source type
-- = cluster and source identifier = my-cluster-1, notifications will be
-- sent for all the cluster events for my-cluster-1. If you specify a
-- source type but do not specify a source identifier, you will receive
-- notice of the events for the objects of that type in your AWS account.
-- If you do not specify either the SourceType nor the SourceIdentifier,
-- you will be notified of events generated from all Amazon Redshift
-- sources belonging to your AWS account. You must specify a source type if
-- you specify a source ID.
--
-- <http://docs.aws.amazon.com/redshift/latest/APIReference/API_CreateEventSubscription.html>
module Network.AWS.Redshift.CreateEventSubscription
    (
    -- * Request
      CreateEventSubscription
    -- ** Request constructor
    , createEventSubscription
    -- ** Request lenses
    , cesrqEnabled
    , cesrqSourceType
    , cesrqSeverity
    , cesrqEventCategories
    , cesrqSourceIds
    , cesrqTags
    , cesrqSubscriptionName
    , cesrqSNSTopicARN

    -- * Response
    , CreateEventSubscriptionResponse
    -- ** Response constructor
    , createEventSubscriptionResponse
    -- ** Response lenses
    , cesrsEventSubscription
    , cesrsStatus
    ) where

import           Network.AWS.Prelude
import           Network.AWS.Redshift.Types
import           Network.AWS.Request
import           Network.AWS.Response

-- |
--
-- /See:/ 'createEventSubscription' smart constructor.
--
-- The fields accessible through corresponding lenses are:
--
-- * 'cesrqEnabled'
--
-- * 'cesrqSourceType'
--
-- * 'cesrqSeverity'
--
-- * 'cesrqEventCategories'
--
-- * 'cesrqSourceIds'
--
-- * 'cesrqTags'
--
-- * 'cesrqSubscriptionName'
--
-- * 'cesrqSNSTopicARN'
data CreateEventSubscription = CreateEventSubscription'
    { _cesrqEnabled          :: !(Maybe Bool)
    , _cesrqSourceType       :: !(Maybe Text)
    , _cesrqSeverity         :: !(Maybe Text)
    , _cesrqEventCategories  :: !(Maybe [Text])
    , _cesrqSourceIds        :: !(Maybe [Text])
    , _cesrqTags             :: !(Maybe [Tag])
    , _cesrqSubscriptionName :: !Text
    , _cesrqSNSTopicARN      :: !Text
    } deriving (Eq,Read,Show,Data,Typeable,Generic)

-- | 'CreateEventSubscription' smart constructor.
createEventSubscription :: Text -> Text -> CreateEventSubscription
createEventSubscription pSubscriptionName_ pSNSTopicARN_ =
    CreateEventSubscription'
    { _cesrqEnabled = Nothing
    , _cesrqSourceType = Nothing
    , _cesrqSeverity = Nothing
    , _cesrqEventCategories = Nothing
    , _cesrqSourceIds = Nothing
    , _cesrqTags = Nothing
    , _cesrqSubscriptionName = pSubscriptionName_
    , _cesrqSNSTopicARN = pSNSTopicARN_
    }

-- | A Boolean value; set to @true@ to activate the subscription, set to
-- @false@ to create the subscription but not active it.
cesrqEnabled :: Lens' CreateEventSubscription (Maybe Bool)
cesrqEnabled = lens _cesrqEnabled (\ s a -> s{_cesrqEnabled = a});

-- | The type of source that will be generating the events. For example, if
-- you want to be notified of events generated by a cluster, you would set
-- this parameter to cluster. If this value is not specified, events are
-- returned for all Amazon Redshift objects in your AWS account. You must
-- specify a source type in order to specify source IDs.
--
-- Valid values: cluster, cluster-parameter-group, cluster-security-group,
-- and cluster-snapshot.
cesrqSourceType :: Lens' CreateEventSubscription (Maybe Text)
cesrqSourceType = lens _cesrqSourceType (\ s a -> s{_cesrqSourceType = a});

-- | Specifies the Amazon Redshift event severity to be published by the
-- event notification subscription.
--
-- Values: ERROR, INFO
cesrqSeverity :: Lens' CreateEventSubscription (Maybe Text)
cesrqSeverity = lens _cesrqSeverity (\ s a -> s{_cesrqSeverity = a});

-- | Specifies the Amazon Redshift event categories to be published by the
-- event notification subscription.
--
-- Values: Configuration, Management, Monitoring, Security
cesrqEventCategories :: Lens' CreateEventSubscription [Text]
cesrqEventCategories = lens _cesrqEventCategories (\ s a -> s{_cesrqEventCategories = a}) . _Default;

-- | A list of one or more identifiers of Amazon Redshift source objects. All
-- of the objects must be of the same type as was specified in the source
-- type parameter. The event subscription will return only events generated
-- by the specified objects. If not specified, then events are returned for
-- all objects within the source type specified.
--
-- Example: my-cluster-1, my-cluster-2
--
-- Example: my-snapshot-20131010
cesrqSourceIds :: Lens' CreateEventSubscription [Text]
cesrqSourceIds = lens _cesrqSourceIds (\ s a -> s{_cesrqSourceIds = a}) . _Default;

-- | A list of tag instances.
cesrqTags :: Lens' CreateEventSubscription [Tag]
cesrqTags = lens _cesrqTags (\ s a -> s{_cesrqTags = a}) . _Default;

-- | The name of the event subscription to be created.
--
-- Constraints:
--
-- -   Cannot be null, empty, or blank.
-- -   Must contain from 1 to 255 alphanumeric characters or hyphens.
-- -   First character must be a letter.
-- -   Cannot end with a hyphen or contain two consecutive hyphens.
cesrqSubscriptionName :: Lens' CreateEventSubscription Text
cesrqSubscriptionName = lens _cesrqSubscriptionName (\ s a -> s{_cesrqSubscriptionName = a});

-- | The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit
-- the event notifications. The ARN is created by Amazon SNS when you
-- create a topic and subscribe to it.
cesrqSNSTopicARN :: Lens' CreateEventSubscription Text
cesrqSNSTopicARN = lens _cesrqSNSTopicARN (\ s a -> s{_cesrqSNSTopicARN = a});

instance AWSRequest CreateEventSubscription where
        type Sv CreateEventSubscription = Redshift
        type Rs CreateEventSubscription =
             CreateEventSubscriptionResponse
        request = post
        response
          = receiveXMLWrapper "CreateEventSubscriptionResult"
              (\ s h x ->
                 CreateEventSubscriptionResponse' <$>
                   (x .@? "EventSubscription") <*> (pure (fromEnum s)))

instance ToHeaders CreateEventSubscription where
        toHeaders = const mempty

instance ToPath CreateEventSubscription where
        toPath = const "/"

instance ToQuery CreateEventSubscription where
        toQuery CreateEventSubscription'{..}
          = mconcat
              ["Action" =:
                 ("CreateEventSubscription" :: ByteString),
               "Version" =: ("2012-12-01" :: ByteString),
               "Enabled" =: _cesrqEnabled,
               "SourceType" =: _cesrqSourceType,
               "Severity" =: _cesrqSeverity,
               "EventCategories" =:
                 toQuery
                   (toQueryList "EventCategory" <$>
                      _cesrqEventCategories),
               "SourceIds" =:
                 toQuery (toQueryList "SourceId" <$> _cesrqSourceIds),
               "Tags" =: toQuery (toQueryList "Tag" <$> _cesrqTags),
               "SubscriptionName" =: _cesrqSubscriptionName,
               "SnsTopicArn" =: _cesrqSNSTopicARN]

-- | /See:/ 'createEventSubscriptionResponse' smart constructor.
--
-- The fields accessible through corresponding lenses are:
--
-- * 'cesrsEventSubscription'
--
-- * 'cesrsStatus'
data CreateEventSubscriptionResponse = CreateEventSubscriptionResponse'
    { _cesrsEventSubscription :: !(Maybe EventSubscription)
    , _cesrsStatus            :: !Int
    } deriving (Eq,Read,Show,Data,Typeable,Generic)

-- | 'CreateEventSubscriptionResponse' smart constructor.
createEventSubscriptionResponse :: Int -> CreateEventSubscriptionResponse
createEventSubscriptionResponse pStatus_ =
    CreateEventSubscriptionResponse'
    { _cesrsEventSubscription = Nothing
    , _cesrsStatus = pStatus_
    }

-- | FIXME: Undocumented member.
cesrsEventSubscription :: Lens' CreateEventSubscriptionResponse (Maybe EventSubscription)
cesrsEventSubscription = lens _cesrsEventSubscription (\ s a -> s{_cesrsEventSubscription = a});

-- | FIXME: Undocumented member.
cesrsStatus :: Lens' CreateEventSubscriptionResponse Int
cesrsStatus = lens _cesrsStatus (\ s a -> s{_cesrsStatus = a});
